/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.kaleidoscope.report;

@com.runwaysdk.business.ClassSignature(hash = -117331845)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to KaleidoscopeReportView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class KaleidoscopeReportViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.kaleidoscope.report.KaleidoscopeReportView";
  public static java.lang.String DASHBOARDLABEL = "dashboardLabel";
  public static java.lang.String ID = "id";
  public static java.lang.String REPORTID = "reportId";
  public static java.lang.String REPORTLABEL = "reportLabel";
  public static java.lang.String REPORTNAME = "reportName";
  private static final long serialVersionUID = -117331845;
  
  public KaleidoscopeReportViewBase()
  {
    super();
  }
  
  public String getDashboardLabel()
  {
    return getValue(DASHBOARDLABEL);
  }
  
  public void validateDashboardLabel()
  {
    this.validateAttribute(DASHBOARDLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getDashboardLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.kaleidoscope.report.KaleidoscopeReportView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(DASHBOARDLABEL);
  }
  
  public void setDashboardLabel(String value)
  {
    if(value == null)
    {
      setValue(DASHBOARDLABEL, "");
    }
    else
    {
      setValue(DASHBOARDLABEL, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.kaleidoscope.report.KaleidoscopeReportView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getReportId()
  {
    return getValue(REPORTID);
  }
  
  public void validateReportId()
  {
    this.validateAttribute(REPORTID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getReportIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.kaleidoscope.report.KaleidoscopeReportView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(REPORTID);
  }
  
  public void setReportId(String value)
  {
    if(value == null)
    {
      setValue(REPORTID, "");
    }
    else
    {
      setValue(REPORTID, value);
    }
  }
  
  public String getReportLabel()
  {
    return getValue(REPORTLABEL);
  }
  
  public void validateReportLabel()
  {
    this.validateAttribute(REPORTLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getReportLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.kaleidoscope.report.KaleidoscopeReportView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(REPORTLABEL);
  }
  
  public void setReportLabel(String value)
  {
    if(value == null)
    {
      setValue(REPORTLABEL, "");
    }
    else
    {
      setValue(REPORTLABEL, value);
    }
  }
  
  public String getReportName()
  {
    return getValue(REPORTNAME);
  }
  
  public void validateReportName()
  {
    this.validateAttribute(REPORTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getReportNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.kaleidoscope.report.KaleidoscopeReportView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(REPORTNAME);
  }
  
  public void setReportName(String value)
  {
    if(value == null)
    {
      setValue(REPORTNAME, "");
    }
    else
    {
      setValue(REPORTNAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static KaleidoscopeReportView get(String id)
  {
    return (KaleidoscopeReportView) com.runwaysdk.business.View.get(id);
  }
  
  public void remove()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.kaleidoscope.report.KaleidoscopeReportView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void remove(java.lang.String id)
  {
    KaleidoscopeReportView _instance = KaleidoscopeReportView.get(id);
    _instance.remove();
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
