/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.entomology;

@com.runwaysdk.business.ClassSignature(hash = -713641046)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to PupalContainer.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class PupalContainerQuery extends com.runwaysdk.query.GeneratedBusinessQuery
 implements com.runwaysdk.generation.loader.Reloadable
{

  public PupalContainerQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public PupalContainerQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.entomology.PupalContainer.CLASS;
  }
  public com.runwaysdk.query.SelectableChar getContainerId()
  {
    return getContainerId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getContainerId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.CONTAINERID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getContainerId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.CONTAINERID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getContainerLength()
  {
    return getContainerLength(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.CONTAINERLENGTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.CONTAINERLENGTH, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType()
  {
    return getContainerType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getDiameter()
  {
    return getDiameter(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getDiameter(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.DIAMETER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getDiameter(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.DIAMETER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency()
  {
    return getDrawdownFrequency(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getDrawdownPercent()
  {
    return getDrawdownPercent(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNPERCENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNPERCENT, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency()
  {
    return getFillFrequency(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod()
  {
    return getFillMethod(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getHeight()
  {
    return getHeight(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getHeight(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.HEIGHT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getHeight(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.HEIGHT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid()
  {
    return getLid(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.LID);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.LID, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.LID);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.LID, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getOpeningDiameter()
  {
    return getOpeningDiameter(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.OPENINGDIAMETER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.OPENINGDIAMETER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getOpeningLength()
  {
    return getOpeningLength(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.OPENINGLENGTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.OPENINGLENGTH, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getOpeningWidth()
  {
    return getOpeningWidth(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.OPENINGWIDTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.OPENINGWIDTH, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise()
  {
    return getPremise(null);

  }
 
  public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.PREMISE);

    return (dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.PREMISE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.PREMISE);

    return (dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.PREMISE, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof()
  {
    return getRoof(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.ROOF);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.ROOF, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.ROOF);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.ROOF, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.SEQ, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading()
  {
    return getShading(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.SHADING);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.SHADING, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.SHADING);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.SHADING, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape()
  {
    return getShape(null);

  }
 
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.SHAPE);

    return (dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.SHAPE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.entomology.PupalContainer.SHAPE);

    return (dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.PupalContainer.SHAPE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getWidth()
  {
    return getWidth(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getWidth(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.WIDTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getWidth(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.entomology.PupalContainer.WIDTH, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.LID)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.PREMISE)) 
    {
       return new dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.ROOF)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.SHADING)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeEnumeration enumerationFactory( com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  String mdEnumerationTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF masterListMdBusinessIF, String masterListTalbeAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.entomology.PupalContainer.SHAPE)) 
    {
       return new dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQuery((com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends PupalContainer> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<PupalContainer>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition pupal()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_pupal()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition pupal(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.getBusinessQuery().isParentIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupal(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition pupal(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupal(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(pupalContainerAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_pupal()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupal(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.getBusinessQuery().isNotParentIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(pupalContainerAmountQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface PupalContainerQueryReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableChar getContainerId();
    public com.runwaysdk.query.SelectableChar getContainerId(String alias);
    public com.runwaysdk.query.SelectableChar getContainerId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getContainerLength();
    public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias);
    public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getDiameter();
    public com.runwaysdk.query.SelectableDecimal getDiameter(String alias);
    public com.runwaysdk.query.SelectableDecimal getDiameter(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getDrawdownPercent();
    public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias);
    public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getHeight();
    public com.runwaysdk.query.SelectableDecimal getHeight(String alias);
    public com.runwaysdk.query.SelectableDecimal getHeight(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getOpeningDiameter();
    public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias);
    public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getOpeningLength();
    public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias);
    public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getOpeningWidth();
    public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias);
    public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise();
    public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias);
    public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias, String displayLabel);
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape();
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias);
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getWidth();
    public com.runwaysdk.query.SelectableDecimal getWidth(String alias);
    public com.runwaysdk.query.SelectableDecimal getWidth(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.entomology.PupalContainer pupalContainer);

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.entomology.PupalContainer pupalContainer);


  public com.runwaysdk.query.Condition pupal();

  public com.runwaysdk.query.Condition pupal(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_pupal();

  public com.runwaysdk.query.Condition SUBSELECT_pupal(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery);


  public com.runwaysdk.query.Condition NOT_IN_pupal();

  public com.runwaysdk.query.Condition NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class PupalContainerQueryReference extends com.runwaysdk.query.AttributeReference
 implements PupalContainerQueryReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {

  public PupalContainerQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.entomology.PupalContainer pupalContainer)
    {
      if(pupalContainer == null) return this.EQ((java.lang.String)null);
      return this.EQ(pupalContainer.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.entomology.PupalContainer pupalContainer)
    {
      if(pupalContainer == null) return this.NE((java.lang.String)null);
      return this.NE(pupalContainer.getId());
    }

  public com.runwaysdk.query.SelectableChar getContainerId()
  {
    return getContainerId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getContainerId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getContainerId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getContainerLength()
  {
    return getContainerLength(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERLENGTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERLENGTH, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType()
  {
    return getContainerType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.entomology.PupalContainer.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.entomology.PupalContainer.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getDiameter()
  {
    return getDiameter(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getDiameter(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.DIAMETER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getDiameter(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.DIAMETER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency()
  {
    return getDrawdownFrequency(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getDrawdownPercent()
  {
    return getDrawdownPercent(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNPERCENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNPERCENT, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency()
  {
    return getFillFrequency(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod()
  {
    return getFillMethod(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getHeight()
  {
    return getHeight(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getHeight(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.HEIGHT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getHeight(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.HEIGHT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid()
  {
    return getLid(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LID, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LID,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getOpeningDiameter()
  {
    return getOpeningDiameter(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGDIAMETER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGDIAMETER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getOpeningLength()
  {
    return getOpeningLength(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGLENGTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGLENGTH, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getOpeningWidth()
  {
    return getOpeningWidth(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGWIDTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGWIDTH, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.OWNER,  alias, displayLabel);

  }
  public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise()
  {
    return getPremise(null);

  }
 
  public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias)
  {
    return (dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.PREMISE, alias, null);

  }
 
  public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias, String displayLabel)
  {
    return (dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.PREMISE,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof()
  {
    return getRoof(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.ROOF, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.ROOF,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.entomology.PupalContainer.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.entomology.PupalContainer.SEQ, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading()
  {
    return getShading(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.SHADING, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.SHADING,  alias, displayLabel);

  }
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape()
  {
    return getShape(null);

  }
 
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias)
  {
    return (dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF)this.get(dss.vector.solutions.entomology.PupalContainer.SHAPE, alias, null);

  }
 
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias, String displayLabel)
  {
    return (dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF)this.get(dss.vector.solutions.entomology.PupalContainer.SHAPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getWidth()
  {
    return getWidth(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getWidth(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.WIDTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getWidth(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.WIDTH, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition pupal()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_pupal()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition pupal(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.isParentIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupal(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.isParentIn_SUBSELECT(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition pupal(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupal(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasChild(termQuery));
    return this.isParentIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasChild(termQuery));
    return this.isParentIn_SUBSELECT(pupalContainerAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_pupal()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupal(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.isNotParentIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.isNotParentIn_SUBSELECT(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasChild(termQuery));
    return this.isNotParentIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupal(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasChild(termQuery));
    return this.isNotParentIn_SUBSELECT(pupalContainerAmountQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.LID)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.PREMISE)) 
    {
       return new dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.ROOF)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.SHADING)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeEnumeration enumerationFactory( com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  String mdEnumerationTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF masterListMdBusinessIF, String masterListTalbeAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.entomology.PupalContainer.SHAPE)) 
    {
       return new dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQuery((com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface PupalContainerQueryMultiReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableChar getContainerId();
    public com.runwaysdk.query.SelectableChar getContainerId(String alias);
    public com.runwaysdk.query.SelectableChar getContainerId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getContainerLength();
    public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias);
    public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getDiameter();
    public com.runwaysdk.query.SelectableDecimal getDiameter(String alias);
    public com.runwaysdk.query.SelectableDecimal getDiameter(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getDrawdownPercent();
    public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias);
    public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getHeight();
    public com.runwaysdk.query.SelectableDecimal getHeight(String alias);
    public com.runwaysdk.query.SelectableDecimal getHeight(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getOpeningDiameter();
    public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias);
    public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getOpeningLength();
    public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias);
    public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getOpeningWidth();
    public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias);
    public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise();
    public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias);
    public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias, String displayLabel);
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape();
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias);
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getWidth();
    public com.runwaysdk.query.SelectableDecimal getWidth(String alias);
    public com.runwaysdk.query.SelectableDecimal getWidth(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(dss.vector.solutions.entomology.PupalContainer ... pupalContainer);
    public com.runwaysdk.query.Condition notContainsAny(dss.vector.solutions.entomology.PupalContainer ... pupalContainer);
    public com.runwaysdk.query.Condition containsAll(dss.vector.solutions.entomology.PupalContainer ... pupalContainer);
    public com.runwaysdk.query.Condition notContainsAll(dss.vector.solutions.entomology.PupalContainer ... pupalContainer);
    public com.runwaysdk.query.Condition containsExactly(dss.vector.solutions.entomology.PupalContainer ... pupalContainer);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class PupalContainerQueryMultiReference extends com.runwaysdk.query.AttributeMultiReference
 implements PupalContainerQueryMultiReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {

  public PupalContainerQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(dss.vector.solutions.entomology.PupalContainer ... pupalContainer)  {

      String[] itemIdArray = new String[pupalContainer.length]; 

      for (int i=0; i<pupalContainer.length; i++)
      {
        itemIdArray[i] = pupalContainer[i].getId();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(dss.vector.solutions.entomology.PupalContainer ... pupalContainer)  {

      String[] itemIdArray = new String[pupalContainer.length]; 

      for (int i=0; i<pupalContainer.length; i++)
      {
        itemIdArray[i] = pupalContainer[i].getId();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(dss.vector.solutions.entomology.PupalContainer ... pupalContainer)  {

      String[] itemIdArray = new String[pupalContainer.length]; 

      for (int i=0; i<pupalContainer.length; i++)
      {
        itemIdArray[i] = pupalContainer[i].getId();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(dss.vector.solutions.entomology.PupalContainer ... pupalContainer)  {

      String[] itemIdArray = new String[pupalContainer.length]; 

      for (int i=0; i<pupalContainer.length; i++)
      {
        itemIdArray[i] = pupalContainer[i].getId();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(dss.vector.solutions.entomology.PupalContainer ... pupalContainer)  {

      String[] itemIdArray = new String[pupalContainer.length]; 

      for (int i=0; i<pupalContainer.length; i++)
      {
        itemIdArray[i] = pupalContainer[i].getId();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableChar getContainerId()
  {
    return getContainerId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getContainerId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getContainerId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getContainerLength()
  {
    return getContainerLength(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERLENGTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getContainerLength(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERLENGTH, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType()
  {
    return getContainerType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerType(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.entomology.PupalContainer.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.entomology.PupalContainer.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getDiameter()
  {
    return getDiameter(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getDiameter(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.DIAMETER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getDiameter(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.DIAMETER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency()
  {
    return getDrawdownFrequency(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDrawdownFrequency(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getDrawdownPercent()
  {
    return getDrawdownPercent(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNPERCENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getDrawdownPercent(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNPERCENT, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency()
  {
    return getFillFrequency(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillFrequency(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod()
  {
    return getFillMethod(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getFillMethod(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getHeight()
  {
    return getHeight(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getHeight(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.HEIGHT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getHeight(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.HEIGHT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid()
  {
    return getLid(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LID, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLid(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LID,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getOpeningDiameter()
  {
    return getOpeningDiameter(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGDIAMETER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningDiameter(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGDIAMETER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getOpeningLength()
  {
    return getOpeningLength(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGLENGTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningLength(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGLENGTH, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getOpeningWidth()
  {
    return getOpeningWidth(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGWIDTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getOpeningWidth(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.OPENINGWIDTH, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.OWNER,  alias, displayLabel);

  }
  public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise()
  {
    return getPremise(null);

  }
 
  public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias)
  {
    return (dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.PREMISE, alias, null);

  }
 
  public dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF getPremise(String alias, String displayLabel)
  {
    return (dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.PREMISE,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof()
  {
    return getRoof(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.ROOF, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRoof(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.ROOF,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.entomology.PupalContainer.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.entomology.PupalContainer.SEQ, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading()
  {
    return getShading(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.SHADING, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getShading(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.entomology.PupalContainer.SHADING,  alias, displayLabel);

  }
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape()
  {
    return getShape(null);

  }
 
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias)
  {
    return (dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF)this.get(dss.vector.solutions.entomology.PupalContainer.SHAPE, alias, null);

  }
 
  public dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF getShape(String alias, String displayLabel)
  {
    return (dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQueryIF)this.get(dss.vector.solutions.entomology.PupalContainer.SHAPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.entomology.PupalContainer.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getWidth()
  {
    return getWidth(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getWidth(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.WIDTH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getWidth(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.entomology.PupalContainer.WIDTH, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.entomology.PupalContainer.CONTAINERTYPE)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.DRAWDOWNFREQUENCY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.FILLFREQUENCY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.FILLMETHOD)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.LID)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.PREMISE)) 
    {
       return new dss.vector.solutions.entomology.PupalPremiseQuery.PupalPremiseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.ROOF)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.entomology.PupalContainer.SHADING)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeEnumeration enumerationFactory( com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  String mdEnumerationTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF masterListMdBusinessIF, String masterListTalbeAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.entomology.PupalContainer.SHAPE)) 
    {
       return new dss.vector.solutions.entomology.ContainerShapeMasterQuery.ContainerShapeQuery((com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
