/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.geo;

@com.runwaysdk.business.ClassSignature(hash = 1759163439)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ChildEntityOverflowInformation.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ChildEntityOverflowInformationBase extends com.runwaysdk.business.Information implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.geo.ChildEntityOverflowInformation";
  public static java.lang.String ID = "id";
  public static java.lang.String OVERFLOWEND = "overflowEnd";
  public static java.lang.String OVERFLOWNUMBER = "overflowNumber";
  public static java.lang.String OVERFLOWPAGE = "overflowPage";
  public static java.lang.String OVERFLOWSTART = "overflowStart";
  public static java.lang.String OVERFLOWTHRESHOLD = "overflowThreshold";
  private static final long serialVersionUID = 1759163439;
  
  public ChildEntityOverflowInformationBase()
  {
    super();
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.ChildEntityOverflowInformation.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public Integer getOverflowEnd()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(OVERFLOWEND));
  }
  
  public void validateOverflowEnd()
  {
    this.validateAttribute(OVERFLOWEND);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getOverflowEndMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.ChildEntityOverflowInformation.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(OVERFLOWEND);
  }
  
  public void setOverflowEnd(Integer value)
  {
    if(value == null)
    {
      setValue(OVERFLOWEND, "");
    }
    else
    {
      setValue(OVERFLOWEND, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getOverflowNumber()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(OVERFLOWNUMBER));
  }
  
  public void validateOverflowNumber()
  {
    this.validateAttribute(OVERFLOWNUMBER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getOverflowNumberMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.ChildEntityOverflowInformation.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(OVERFLOWNUMBER);
  }
  
  public void setOverflowNumber(Integer value)
  {
    if(value == null)
    {
      setValue(OVERFLOWNUMBER, "");
    }
    else
    {
      setValue(OVERFLOWNUMBER, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getOverflowPage()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(OVERFLOWPAGE));
  }
  
  public void validateOverflowPage()
  {
    this.validateAttribute(OVERFLOWPAGE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getOverflowPageMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.ChildEntityOverflowInformation.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(OVERFLOWPAGE);
  }
  
  public void setOverflowPage(Integer value)
  {
    if(value == null)
    {
      setValue(OVERFLOWPAGE, "");
    }
    else
    {
      setValue(OVERFLOWPAGE, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getOverflowStart()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(OVERFLOWSTART));
  }
  
  public void validateOverflowStart()
  {
    this.validateAttribute(OVERFLOWSTART);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getOverflowStartMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.ChildEntityOverflowInformation.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(OVERFLOWSTART);
  }
  
  public void setOverflowStart(Integer value)
  {
    if(value == null)
    {
      setValue(OVERFLOWSTART, "");
    }
    else
    {
      setValue(OVERFLOWSTART, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getOverflowThreshold()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(OVERFLOWTHRESHOLD));
  }
  
  public void validateOverflowThreshold()
  {
    this.validateAttribute(OVERFLOWTHRESHOLD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getOverflowThresholdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.ChildEntityOverflowInformation.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(OVERFLOWTHRESHOLD);
  }
  
  public void setOverflowThreshold(Integer value)
  {
    if(value == null)
    {
      setValue(OVERFLOWTHRESHOLD, "");
    }
    else
    {
      setValue(OVERFLOWTHRESHOLD, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{overflowEnd}", this.getOverflowEnd());
    message = replace(message, "{overflowNumber}", this.getOverflowNumber());
    message = replace(message, "{overflowPage}", this.getOverflowPage());
    message = replace(message, "{overflowStart}", this.getOverflowStart());
    message = replace(message, "{overflowThreshold}", this.getOverflowThreshold());
    return message;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
