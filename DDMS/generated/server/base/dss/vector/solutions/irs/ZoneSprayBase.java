/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.irs;

@com.runwaysdk.business.ClassSignature(hash = -1723109535)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ZoneSpray.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ZoneSprayBase extends dss.vector.solutions.irs.AbstractSpray implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.irs.ZoneSpray";
  public static java.lang.String BRANDFORINDEX = "brandForIndex";
  public static java.lang.String DISEASE = "disease";
  public static java.lang.String GEOENTITYFORINDEX = "geoEntityForIndex";
  public static java.lang.String SPRAYDATEFORINDEX = "sprayDateForIndex";
  public static java.lang.String SPRAYMETHODFORINDEX = "sprayMethodForIndex";
  public static java.lang.String SUPERVISOR = "supervisor";
  private static final long serialVersionUID = -1723109535;
  
  public ZoneSprayBase()
  {
    super();
  }
  
  public dss.vector.solutions.irs.InsecticideBrand getBrandForIndex()
  {
    if (getValue(BRANDFORINDEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.InsecticideBrand.get(getValue(BRANDFORINDEX));
    }
  }
  
  public String getBrandForIndexId()
  {
    return getValue(BRANDFORINDEX);
  }
  
  public void validateBrandForIndex()
  {
    this.validateAttribute(BRANDFORINDEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getBrandForIndexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(BRANDFORINDEX);
  }
  
  public void setBrandForIndex(dss.vector.solutions.irs.InsecticideBrand value)
  {
    if(value == null)
    {
      setValue(BRANDFORINDEX, "");
    }
    else
    {
      setValue(BRANDFORINDEX, value.getId());
    }
  }
  
  public dss.vector.solutions.general.Disease getDisease()
  {
    if (getValue(DISEASE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.general.Disease.get(getValue(DISEASE));
    }
  }
  
  public String getDiseaseId()
  {
    return getValue(DISEASE);
  }
  
  public void validateDisease()
  {
    this.validateAttribute(DISEASE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getDiseaseMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(DISEASE);
  }
  
  public void setDisease(dss.vector.solutions.general.Disease value)
  {
    if(value == null)
    {
      setValue(DISEASE, "");
    }
    else
    {
      setValue(DISEASE, value.getId());
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getGeoEntityForIndex()
  {
    if (getValue(GEOENTITYFORINDEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(GEOENTITYFORINDEX));
    }
  }
  
  public String getGeoEntityForIndexId()
  {
    return getValue(GEOENTITYFORINDEX);
  }
  
  public void validateGeoEntityForIndex()
  {
    this.validateAttribute(GEOENTITYFORINDEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getGeoEntityForIndexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(GEOENTITYFORINDEX);
  }
  
  public void setGeoEntityForIndex(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(GEOENTITYFORINDEX, "");
    }
    else
    {
      setValue(GEOENTITYFORINDEX, value.getId());
    }
  }
  
  public java.util.Date getSprayDateForIndex()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(SPRAYDATEFORINDEX));
  }
  
  public void validateSprayDateForIndex()
  {
    this.validateAttribute(SPRAYDATEFORINDEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateDAOIF getSprayDateForIndexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateDAOIF)mdClassIF.definesAttribute(SPRAYDATEFORINDEX);
  }
  
  public void setSprayDateForIndex(java.util.Date value)
  {
    if(value == null)
    {
      setValue(SPRAYDATEFORINDEX, "");
    }
    else
    {
      setValue(SPRAYDATEFORINDEX, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getSprayMethodForIndex()
  {
    return getValue(SPRAYMETHODFORINDEX);
  }
  
  public void validateSprayMethodForIndex()
  {
    this.validateAttribute(SPRAYMETHODFORINDEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSprayMethodForIndexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SPRAYMETHODFORINDEX);
  }
  
  public void setSprayMethodForIndex(String value)
  {
    if(value == null)
    {
      setValue(SPRAYMETHODFORINDEX, "");
    }
    else
    {
      setValue(SPRAYMETHODFORINDEX, value);
    }
  }
  
  public dss.vector.solutions.irs.Supervisor getSupervisor()
  {
    if (getValue(SUPERVISOR).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.Supervisor.get(getValue(SUPERVISOR));
    }
  }
  
  public String getSupervisorId()
  {
    return getValue(SUPERVISOR);
  }
  
  public void validateSupervisor()
  {
    this.validateAttribute(SUPERVISOR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getSupervisorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(SUPERVISOR);
  }
  
  public void setSupervisor(dss.vector.solutions.irs.Supervisor value)
  {
    if(value == null)
    {
      setValue(SUPERVISOR, "");
    }
    else
    {
      setValue(SUPERVISOR, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ZoneSprayQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ZoneSprayQuery query = new ZoneSprayQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static ZoneSpray get(String id)
  {
    return (ZoneSpray) com.runwaysdk.business.Business.get(id);
  }
  
  public static ZoneSpray getByKey(String key)
  {
    return (ZoneSpray) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static java.io.InputStream exportQueryToCSV(java.lang.String queryXML, java.lang.String config, java.lang.String savedSearchId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.io.InputStream exportQueryToExcel(java.lang.String queryXML, java.lang.String config, java.lang.String savedSearchId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.irs.TeamSprayStatusView[] getStatusViews()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.TeamSprayStatusView[] getStatusViews(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    return _instance.getStatusViews();
  }
  
  public dss.vector.solutions.irs.ZoneSprayView getView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.ZoneSprayView getView(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    return _instance.getView();
  }
  
  public dss.vector.solutions.irs.ZoneSprayView lockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.ZoneSprayView lockView(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    return _instance.lockView();
  }
  
  public static com.runwaysdk.query.ValueQuery queryIRS(java.lang.String queryXML, java.lang.String config, java.lang.String sortBy, java.lang.Boolean ascending, java.lang.Integer pageNumber, java.lang.Integer pageSize)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.irs.ZoneSprayView unlockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.ZoneSprayView unlockView(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    return _instance.unlockView();
  }
  
  public static com.runwaysdk.query.ValueQuery xmlToValueQuery(java.lang.String xml, java.lang.String[] selectedUniversals, java.lang.Boolean includeGeometry)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static ZoneSpray lock(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static ZoneSpray unlock(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
