/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.irs;

@com.runwaysdk.business.ClassSignature(hash = -738575483)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SprayedSumProblem.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class SprayedSumProblemBase extends dss.vector.solutions.NotificationProblem implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.irs.SprayedSumProblem";
  public static java.lang.String OBJECTLABEL = "objectLabel";
  public static java.lang.String OBJECTS = "objects";
  public static java.lang.String SPRAYEDOBJECTLABEL = "sprayedObjectLabel";
  public static java.lang.String SPRAYEDOBJECTS = "sprayedObjects";
  private static final long serialVersionUID = -738575483;
  
  public SprayedSumProblemBase()
  {
    super();
  }
  
  public SprayedSumProblemBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public String getObjectLabel()
  {
    return getValue(OBJECTLABEL);
  }
  
  public void validateObjectLabel()
  {
    this.validateAttribute(OBJECTLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getObjectLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.SprayedSumProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(OBJECTLABEL);
  }
  
  public void setObjectLabel(String value)
  {
    if(value == null)
    {
      setValue(OBJECTLABEL, "");
    }
    else
    {
      setValue(OBJECTLABEL, value);
    }
  }
  
  public Integer getObjects()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(OBJECTS));
  }
  
  public void validateObjects()
  {
    this.validateAttribute(OBJECTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getObjectsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.SprayedSumProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(OBJECTS);
  }
  
  public void setObjects(Integer value)
  {
    if(value == null)
    {
      setValue(OBJECTS, "");
    }
    else
    {
      setValue(OBJECTS, java.lang.Integer.toString(value));
    }
  }
  
  public String getSprayedObjectLabel()
  {
    return getValue(SPRAYEDOBJECTLABEL);
  }
  
  public void validateSprayedObjectLabel()
  {
    this.validateAttribute(SPRAYEDOBJECTLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSprayedObjectLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.SprayedSumProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SPRAYEDOBJECTLABEL);
  }
  
  public void setSprayedObjectLabel(String value)
  {
    if(value == null)
    {
      setValue(SPRAYEDOBJECTLABEL, "");
    }
    else
    {
      setValue(SPRAYEDOBJECTLABEL, value);
    }
  }
  
  public Integer getSprayedObjects()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(SPRAYEDOBJECTS));
  }
  
  public void validateSprayedObjects()
  {
    this.validateAttribute(SPRAYEDOBJECTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getSprayedObjectsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.SprayedSumProblem.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(SPRAYEDOBJECTS);
  }
  
  public void setSprayedObjects(Integer value)
  {
    if(value == null)
    {
      setValue(SPRAYEDOBJECTS, "");
    }
    else
    {
      setValue(SPRAYEDOBJECTS, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{objectLabel}", this.getObjectLabel());
    message = replace(message, "{objects}", this.getObjects());
    message = replace(message, "{sprayedObjectLabel}", this.getSprayedObjectLabel());
    message = replace(message, "{sprayedObjects}", this.getSprayedObjects());
    return message;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
