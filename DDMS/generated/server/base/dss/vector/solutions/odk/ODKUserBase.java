package dss.vector.solutions.odk;

@com.runwaysdk.business.ClassSignature(hash = -588844398)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ODKUser.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ODKUserBase extends dss.vector.solutions.MDSSUser implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.odk.ODKUser";
  public static java.lang.String ISSYNCED = "isSynced";
  public static java.lang.String ODKPASSWORD = "odkPassword";
  public static java.lang.String ODKUSERNAME = "odkUsername";
  private static final long serialVersionUID = -588844398;
  
  public ODKUserBase()
  {
    super();
  }
  
  public Boolean getIsSynced()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISSYNCED));
  }
  
  public void validateIsSynced()
  {
    this.validateAttribute(ISSYNCED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsSyncedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.odk.ODKUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISSYNCED);
  }
  
  public void setIsSynced(Boolean value)
  {
    if(value == null)
    {
      setValue(ISSYNCED, "");
    }
    else
    {
      setValue(ISSYNCED, java.lang.Boolean.toString(value));
    }
  }
  
  public String getOdkPassword()
  {
    return getValue(ODKPASSWORD);
  }
  
  public void validateOdkPassword()
  {
    this.validateAttribute(ODKPASSWORD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getOdkPasswordMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.odk.ODKUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ODKPASSWORD);
  }
  
  public void setOdkPassword(String value)
  {
    if(value == null)
    {
      setValue(ODKPASSWORD, "");
    }
    else
    {
      setValue(ODKPASSWORD, value);
    }
  }
  
  public String getOdkUsername()
  {
    return getValue(ODKUSERNAME);
  }
  
  public void validateOdkUsername()
  {
    this.validateAttribute(ODKUSERNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getOdkUsernameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.odk.ODKUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ODKUSERNAME);
  }
  
  public void setOdkUsername(String value)
  {
    if(value == null)
    {
      setValue(ODKUSERNAME, "");
    }
    else
    {
      setValue(ODKUSERNAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ODKUserQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ODKUserQuery query = new ODKUserQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static ODKUser get(String id)
  {
    return (ODKUser) com.runwaysdk.business.Business.get(id);
  }
  
  public static ODKUser getByKey(String key)
  {
    return (ODKUser) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static dss.vector.solutions.odk.ODKUser getUser()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.odk.ODKUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static ODKUser lock(java.lang.String id)
  {
    ODKUser _instance = ODKUser.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static ODKUser unlock(java.lang.String id)
  {
    ODKUser _instance = ODKUser.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
