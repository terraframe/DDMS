/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.intervention.monitor;

@com.runwaysdk.business.ClassSignature(hash = -1482710849)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ITNInstanceView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ITNInstanceViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.intervention.monitor.ITNInstanceView";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String DAMAGED = "damaged";
  public static java.lang.String HANGING = "hanging";
  public static java.lang.String HOUSEHOLD = "household";
  public static java.lang.String ID = "id";
  public static java.lang.String ISNETUSED = "isNetUsed";
  public static java.lang.String MONTHRECEIVED = "monthReceived";
  public static java.lang.String MONTHRETREATED = "monthRetreated";
  public static java.lang.String NETBRAND = "netBrand";
  public static java.lang.String NETID = "netId";
  public static java.lang.String NOTUSEDFORSLEEPING = "notUsedForSleeping";
  public static java.lang.String OBTAINED = "obtained";
  public static java.lang.String PRICE = "price";
  public static java.lang.String PURPOSE = "purpose";
  public static java.lang.String PURPOSECOMMENTS = "purposeComments";
  public static java.lang.String RETREATED = "retreated";
  public static java.lang.String SLEPTUNDERNET = "sleptUnderNet";
  public static java.lang.String WASHFREQUENCY = "washFrequency";
  public static java.lang.String WASHPERIOD = "washPeriod";
  public static java.lang.String WASHED = "washed";
  public static java.lang.String YEARRECEIVED = "yearReceived";
  public static java.lang.String YEARRETREATED = "yearRetreated";
  private static final long serialVersionUID = -1482710849;
  
  public ITNInstanceViewBase()
  {
    super();
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public dss.vector.solutions.ontology.Term getDamaged()
  {
    if (getValue(DAMAGED).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(DAMAGED));
    }
  }
  
  public String getDamagedId()
  {
    return getValue(DAMAGED);
  }
  
  public void validateDamaged()
  {
    this.validateAttribute(DAMAGED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getDamagedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(DAMAGED);
  }
  
  public void setDamaged(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(DAMAGED, "");
    }
    else
    {
      setValue(DAMAGED, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getHanging()
  {
    if (getValue(HANGING).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(HANGING));
    }
  }
  
  public String getHangingId()
  {
    return getValue(HANGING);
  }
  
  public void validateHanging()
  {
    this.validateAttribute(HANGING);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getHangingMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(HANGING);
  }
  
  public void setHanging(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(HANGING, "");
    }
    else
    {
      setValue(HANGING, value.getId());
    }
  }
  
  public dss.vector.solutions.intervention.monitor.Household getHousehold()
  {
    if (getValue(HOUSEHOLD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.intervention.monitor.Household.get(getValue(HOUSEHOLD));
    }
  }
  
  public String getHouseholdId()
  {
    return getValue(HOUSEHOLD);
  }
  
  public void validateHousehold()
  {
    this.validateAttribute(HOUSEHOLD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getHouseholdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(HOUSEHOLD);
  }
  
  public void setHousehold(dss.vector.solutions.intervention.monitor.Household value)
  {
    if(value == null)
    {
      setValue(HOUSEHOLD, "");
    }
    else
    {
      setValue(HOUSEHOLD, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public Boolean getIsNetUsed()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISNETUSED));
  }
  
  public void validateIsNetUsed()
  {
    this.validateAttribute(ISNETUSED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsNetUsedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISNETUSED);
  }
  
  public void setIsNetUsed(Boolean value)
  {
    if(value == null)
    {
      setValue(ISNETUSED, "");
    }
    else
    {
      setValue(ISNETUSED, java.lang.Boolean.toString(value));
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.MonthOfYear> getMonthReceived()
  {
    return (java.util.List<dss.vector.solutions.MonthOfYear>) getEnumValues(MONTHRECEIVED);
  }
  
  public void addMonthReceived(dss.vector.solutions.MonthOfYear value)
  {
    if(value != null)
    {
      addEnumItem(MONTHRECEIVED, value.getId());
    }
  }
  
  public void removeMonthReceived(dss.vector.solutions.MonthOfYear value)
  {
    if(value != null)
    {
      removeEnumItem(MONTHRECEIVED, value.getId());
    }
  }
  
  public void clearMonthReceived()
  {
    clearEnum(MONTHRECEIVED);
  }
  
  public void validateMonthReceived()
  {
    this.validateAttribute(MONTHRECEIVED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getMonthReceivedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(MONTHRECEIVED);
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.MonthOfYear> getMonthRetreated()
  {
    return (java.util.List<dss.vector.solutions.MonthOfYear>) getEnumValues(MONTHRETREATED);
  }
  
  public void addMonthRetreated(dss.vector.solutions.MonthOfYear value)
  {
    if(value != null)
    {
      addEnumItem(MONTHRETREATED, value.getId());
    }
  }
  
  public void removeMonthRetreated(dss.vector.solutions.MonthOfYear value)
  {
    if(value != null)
    {
      removeEnumItem(MONTHRETREATED, value.getId());
    }
  }
  
  public void clearMonthRetreated()
  {
    clearEnum(MONTHRETREATED);
  }
  
  public void validateMonthRetreated()
  {
    this.validateAttribute(MONTHRETREATED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getMonthRetreatedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(MONTHRETREATED);
  }
  
  public dss.vector.solutions.ontology.Term getNetBrand()
  {
    if (getValue(NETBRAND).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(NETBRAND));
    }
  }
  
  public String getNetBrandId()
  {
    return getValue(NETBRAND);
  }
  
  public void validateNetBrand()
  {
    this.validateAttribute(NETBRAND);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getNetBrandMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(NETBRAND);
  }
  
  public void setNetBrand(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(NETBRAND, "");
    }
    else
    {
      setValue(NETBRAND, value.getId());
    }
  }
  
  public String getNetId()
  {
    return getValue(NETID);
  }
  
  public void validateNetId()
  {
    this.validateAttribute(NETID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getNetIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(NETID);
  }
  
  public void setNetId(String value)
  {
    if(value == null)
    {
      setValue(NETID, "");
    }
    else
    {
      setValue(NETID, value);
    }
  }
  
  public Boolean getNotUsedForSleeping()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(NOTUSEDFORSLEEPING));
  }
  
  public void validateNotUsedForSleeping()
  {
    this.validateAttribute(NOTUSEDFORSLEEPING);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getNotUsedForSleepingMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(NOTUSEDFORSLEEPING);
  }
  
  public void setNotUsedForSleeping(Boolean value)
  {
    if(value == null)
    {
      setValue(NOTUSEDFORSLEEPING, "");
    }
    else
    {
      setValue(NOTUSEDFORSLEEPING, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getObtained()
  {
    if (getValue(OBTAINED).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(OBTAINED));
    }
  }
  
  public String getObtainedId()
  {
    return getValue(OBTAINED);
  }
  
  public void validateObtained()
  {
    this.validateAttribute(OBTAINED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getObtainedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(OBTAINED);
  }
  
  public void setObtained(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(OBTAINED, "");
    }
    else
    {
      setValue(OBTAINED, value.getId());
    }
  }
  
  public java.math.BigDecimal getPrice()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(PRICE));
  }
  
  public void validatePrice()
  {
    this.validateAttribute(PRICE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getPriceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(PRICE);
  }
  
  public void setPrice(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(PRICE, "");
    }
    else
    {
      setValue(PRICE, value.toString());
    }
  }
  
  public dss.vector.solutions.ontology.Term getPurpose()
  {
    if (getValue(PURPOSE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(PURPOSE));
    }
  }
  
  public String getPurposeId()
  {
    return getValue(PURPOSE);
  }
  
  public void validatePurpose()
  {
    this.validateAttribute(PURPOSE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getPurposeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(PURPOSE);
  }
  
  public void setPurpose(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(PURPOSE, "");
    }
    else
    {
      setValue(PURPOSE, value.getId());
    }
  }
  
  public String getPurposeComments()
  {
    return getValue(PURPOSECOMMENTS);
  }
  
  public void validatePurposeComments()
  {
    this.validateAttribute(PURPOSECOMMENTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getPurposeCommentsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(PURPOSECOMMENTS);
  }
  
  public void setPurposeComments(String value)
  {
    if(value == null)
    {
      setValue(PURPOSECOMMENTS, "");
    }
    else
    {
      setValue(PURPOSECOMMENTS, value);
    }
  }
  
  public Boolean getRetreated()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(RETREATED));
  }
  
  public void validateRetreated()
  {
    this.validateAttribute(RETREATED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getRetreatedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(RETREATED);
  }
  
  public void setRetreated(Boolean value)
  {
    if(value == null)
    {
      setValue(RETREATED, "");
    }
    else
    {
      setValue(RETREATED, java.lang.Boolean.toString(value));
    }
  }
  
  public Long getSleptUnderNet()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SLEPTUNDERNET));
  }
  
  public void validateSleptUnderNet()
  {
    this.validateAttribute(SLEPTUNDERNET);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getSleptUnderNetMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(SLEPTUNDERNET);
  }
  
  public void setSleptUnderNet(Long value)
  {
    if(value == null)
    {
      setValue(SLEPTUNDERNET, "");
    }
    else
    {
      setValue(SLEPTUNDERNET, java.lang.Long.toString(value));
    }
  }
  
  public Integer getWashFrequency()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(WASHFREQUENCY));
  }
  
  public void validateWashFrequency()
  {
    this.validateAttribute(WASHFREQUENCY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getWashFrequencyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(WASHFREQUENCY);
  }
  
  public void setWashFrequency(Integer value)
  {
    if(value == null)
    {
      setValue(WASHFREQUENCY, "");
    }
    else
    {
      setValue(WASHFREQUENCY, java.lang.Integer.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getWashPeriod()
  {
    if (getValue(WASHPERIOD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(WASHPERIOD));
    }
  }
  
  public String getWashPeriodId()
  {
    return getValue(WASHPERIOD);
  }
  
  public void validateWashPeriod()
  {
    this.validateAttribute(WASHPERIOD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getWashPeriodMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(WASHPERIOD);
  }
  
  public void setWashPeriod(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(WASHPERIOD, "");
    }
    else
    {
      setValue(WASHPERIOD, value.getId());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.Response> getWashed()
  {
    return (java.util.List<dss.vector.solutions.Response>) getEnumValues(WASHED);
  }
  
  public void addWashed(dss.vector.solutions.Response value)
  {
    if(value != null)
    {
      addEnumItem(WASHED, value.getId());
    }
  }
  
  public void removeWashed(dss.vector.solutions.Response value)
  {
    if(value != null)
    {
      removeEnumItem(WASHED, value.getId());
    }
  }
  
  public void clearWashed()
  {
    clearEnum(WASHED);
  }
  
  public void validateWashed()
  {
    this.validateAttribute(WASHED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getWashedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(WASHED);
  }
  
  public Integer getYearReceived()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(YEARRECEIVED));
  }
  
  public void validateYearReceived()
  {
    this.validateAttribute(YEARRECEIVED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getYearReceivedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(YEARRECEIVED);
  }
  
  public void setYearReceived(Integer value)
  {
    if(value == null)
    {
      setValue(YEARRECEIVED, "");
    }
    else
    {
      setValue(YEARRECEIVED, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getYearRetreated()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(YEARRETREATED));
  }
  
  public void validateYearRetreated()
  {
    this.validateAttribute(YEARRETREATED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getYearRetreatedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ITNInstanceView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(YEARRETREATED);
  }
  
  public void setYearRetreated(Integer value)
  {
    if(value == null)
    {
      setValue(YEARRETREATED, "");
    }
    else
    {
      setValue(YEARRETREATED, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ITNInstanceView get(String id)
  {
    return (ITNInstanceView) com.runwaysdk.business.View.get(id);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ITNInstanceView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    ITNInstanceView _instance = ITNInstanceView.get(id);
    _instance.deleteConcrete();
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
