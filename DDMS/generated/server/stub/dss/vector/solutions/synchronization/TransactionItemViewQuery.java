/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.synchronization;

import com.runwaysdk.generation.loader.Reloadable;
import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.ViewQueryBuilder;
import com.runwaysdk.system.transaction.TransactionItemQuery;

/**
 *
 * @author Autogenerated by TerraFrame
 */
public class TransactionItemViewQuery extends dss.vector.solutions.synchronization.TransactionItemViewQueryBase  implements Reloadable
{
  private static final long serialVersionUID = 1648474451;
  
  public TransactionItemViewQuery(QueryFactory queryFactory, String recordId)
  {
    super(queryFactory);
    
    this.buildQuery(new DefaultTransactionItemViewBuilder(queryFactory, recordId));
  }
  
  public TransactionItemViewQuery(QueryFactory queryFactory, ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  public class DefaultTransactionItemViewBuilder extends ViewQueryBuilder implements Reloadable
  {
    private TransactionItemQuery query;
    
    private String recordId;
    
    public DefaultTransactionItemViewBuilder(QueryFactory queryFactory)
    {
      this(queryFactory, null);
    }
    
    public DefaultTransactionItemViewBuilder(QueryFactory queryFactory, String recordId)
    {
      super(queryFactory);
      
      this.query = new TransactionItemQuery(queryFactory);
      this.recordId = recordId;
    }

    protected TransactionItemViewQuery getViewQuery()
    {
      return (TransactionItemViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      TransactionItemViewQuery vQuery = this.getViewQuery();
      
      vQuery.map(TransactionItemView.ITEMID, query.getId());
      vQuery.map(TransactionItemView.COMPONENTID, query.getComponentId());
      vQuery.map(TransactionItemView.ACTIONLABEL, query.getItemAction().getDisplayLabel().localize());
      vQuery.map(TransactionItemView.COMPONENTSEQ, query.getComponentSeq());
      vQuery.map(TransactionItemView.COMPONENTSITEMASTER, query.getComponentSiteMaster());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      TransactionItemViewQuery vQuery = this.getViewQuery();
      
      if(recordId != null && !recordId.equals(""))
      {
        vQuery.WHERE(query.getTransactionRecord().EQ(recordId));      
      }
    }

  }
}
