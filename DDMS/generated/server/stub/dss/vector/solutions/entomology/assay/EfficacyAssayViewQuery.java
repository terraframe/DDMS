/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.entomology.assay;




/**
 *
 * @author Autogenerated by TerraFrame
 */
public class EfficacyAssayViewQuery extends dss.vector.solutions.entomology.assay.EfficacyAssayViewQueryBase  implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = 1242609508401L;

  public EfficacyAssayViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultEfficacyAssayViewBuilder(queryFactory));
  }

  public EfficacyAssayViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultEfficacyAssayViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    private EfficacyAssayQuery query;

    public DefaultEfficacyAssayViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);      
      query = new EfficacyAssayQuery(queryFactory);
    }

    protected EfficacyAssayViewQuery getViewQuery()
    {
      return (EfficacyAssayViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      EfficacyAssayViewQuery vQuery = this.getViewQuery();
      
      vQuery.map(EfficacyAssayView.UNIQUEASSAYID, query.getUniqueAssayId());
      vQuery.map(EfficacyAssayView.AGERANGE, query.getAgeRange());
      vQuery.map(EfficacyAssayView.COLONYNAME, query.getColonyName());
      vQuery.map(EfficacyAssayView.CONCRETEID, query.getId());
      vQuery.map(EfficacyAssayView.EXPOSURETIME, query.getExposureTime());
      vQuery.map(EfficacyAssayView.FED, query.getFed());
      vQuery.map(EfficacyAssayView.GEOID, query.getGeoEntity().getGeoId());
      vQuery.map(EfficacyAssayView.GRAVID, query.getGravid());
      vQuery.map(EfficacyAssayView.HOLDINGTIME, query.getHoldingTime());
      vQuery.map(EfficacyAssayView.INSECTICIDEBRAND, query.getInsecticideBrand());
      vQuery.map(EfficacyAssayView.MORTALITY, query.getMortality());
      vQuery.map(EfficacyAssayView.QUANTITYDEAD, query.getQuantityDead());
      vQuery.map(EfficacyAssayView.QUANTITYLIVE, query.getQuantityLive());
      vQuery.map(EfficacyAssayView.QUANTITYTESTED, query.getQuantityTested());
      vQuery.map(EfficacyAssayView.SEX, query.getSex());
      vQuery.map(EfficacyAssayView.SPECIE, query.getSpecie());
      vQuery.map(EfficacyAssayView.SURFACEPOSTION, query.getSurfacePostion());
      vQuery.map(EfficacyAssayView.TESTDATE, query.getTestDate());
      vQuery.map(EfficacyAssayView.TESTMETHOD, query.getTestMethod());
      vQuery.map(EfficacyAssayView.TIMEONSURFACE, query.getTimeOnSurface());
      vQuery.map(EfficacyAssayView.SURFACETYPE, query.getSurfaceType());
      vQuery.map(EfficacyAssayView.DISEASE, query.getDisease());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {

    }

  }
}
