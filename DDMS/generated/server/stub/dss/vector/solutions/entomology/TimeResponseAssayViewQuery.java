/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.entomology;

/**
 *
 * @author Autogenerated by RunwaySDK
 */
public class TimeResponseAssayViewQuery extends dss.vector.solutions.entomology.TimeResponseAssayViewQueryBase  implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = -1961672020;

  public TimeResponseAssayViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultTimeResponseAssayViewBuilder(queryFactory));
  }

  public TimeResponseAssayViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultTimeResponseAssayViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    private TimeResponseAssayQuery query;
    
    public DefaultTimeResponseAssayViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
      
      this.query = new TimeResponseAssayQuery(queryFactory);
    }

    protected TimeResponseAssayViewQuery getViewQuery()
    {
      return (TimeResponseAssayViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      TimeResponseAssayViewQuery vQuery = this.getViewQuery();
      
      vQuery.map(TimeResponseAssayView.UNIQUEASSAYID, query.getUniqueAssayId());
      vQuery.map(TimeResponseAssayView.CONCRETEID, query.getId());
      vQuery.map(TimeResponseAssayView.COLLECTION, query.getCollection());      
      vQuery.map(TimeResponseAssayView.ASSAY, query.getAssay());
      vQuery.map(TimeResponseAssayView.ACTIVEINGREDIENT, query.getActiveIngredient());
      vQuery.map(TimeResponseAssayView.SPECIES, query.getSpecies());
      vQuery.map(TimeResponseAssayView.LIFESTAGE, query.getLifeStage());
      vQuery.map(TimeResponseAssayView.SYNERGIST, query.getSynergist());
      vQuery.map(TimeResponseAssayView.TESTSTRAINRESULT, query.getTestStrainResult());
      vQuery.map(TimeResponseAssayView.REFERENCESTRAINRESULT, query.getReferenceStrainResult());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {

    }

  }
}
