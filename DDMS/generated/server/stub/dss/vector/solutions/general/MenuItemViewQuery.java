/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.general;

import com.runwaysdk.generation.loader.Reloadable;
import com.runwaysdk.query.OrderBy.SortOrder;
import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.ViewQueryBuilder;

/**
 * 
 * @author Autogenerated by RunwaySDK
 */
public class MenuItemViewQuery extends dss.vector.solutions.general.MenuItemViewQueryBase implements Reloadable
{
  private static final long serialVersionUID = -1651769820;

  public MenuItemViewQuery(QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultMenuItemViewBuilder(queryFactory));
  }

  public MenuItemViewQuery(QueryFactory queryFactory, ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultMenuItemViewBuilder extends ViewQueryBuilder implements Reloadable
  {
    private MenuItemQuery menuItemQuery;

    public DefaultMenuItemViewBuilder(QueryFactory queryFactory)
    {
      super(queryFactory);

      this.menuItemQuery = new MenuItemQuery(queryFactory);
    }

    protected MenuItemViewQuery getViewQuery()
    {
      return (MenuItemViewQuery) super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      MenuItemViewQuery q = this.getViewQuery();
      q.map(MenuItemView.DISEASE, this.menuItemQuery.getDisease());
      q.map(MenuItemView.TERMDISPLAY, this.menuItemQuery.getTerm().getTermDisplayLabel().localize());
      q.map(MenuItemView.URLDISPLAY, this.menuItemQuery.getUrl().getDisplayLabel().localize("asdf"));
      q.map(MenuItemView.MENUITEMID, this.menuItemQuery.getId());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      MenuItemViewQuery q = this.getViewQuery();

      Disease disease = Disease.getCurrent();
      q.WHERE(this.menuItemQuery.getDisease().EQ(disease));

      q.ORDER_BY_ASC(this.menuItemQuery.getUrl().getDisplayLabel().localize());
    }

  }

  static class MenuItemViewBuilder extends ViewQueryBuilder implements Reloadable
  {
    private MenuItemQuery menuItemQuery;

    private String        sortAttribute;

    private SortOrder     orderBy;

    public MenuItemViewBuilder(QueryFactory queryFactory, String sortAttribute, Boolean isAscending)
    {
      super(queryFactory);

      this.menuItemQuery = new MenuItemQuery(queryFactory);
      this.sortAttribute = sortAttribute;
      this.orderBy = ( isAscending ? SortOrder.ASC : SortOrder.DESC );
    }

    protected MenuItemViewQuery getViewQuery()
    {
      return (MenuItemViewQuery) super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      MenuItemViewQuery q = this.getViewQuery();
      q.map(MenuItemView.DISEASE, this.menuItemQuery.getDisease());
      q.map(MenuItemView.TERMDISPLAY, this.menuItemQuery.getTerm().getTermDisplayLabel().localize());
      q.map(MenuItemView.URLDISPLAY, this.menuItemQuery.getUrl().getDisplayLabel().localize("asdf"));
      q.map(MenuItemView.MENUITEMID, this.menuItemQuery.getId());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      MenuItemViewQuery q = this.getViewQuery();

      Disease disease = Disease.getCurrent();
      q.WHERE(this.menuItemQuery.getDisease().EQ(disease));

      if (this.sortAttribute.equals(MenuItemView.URLDISPLAY))
      {
        q.ORDER_BY(this.menuItemQuery.getUrl().getDisplayLabel().localize(), this.orderBy);
      }
      else if (this.sortAttribute.equals(MenuItemView.TERMDISPLAY))
      {
        q.ORDER_BY(this.menuItemQuery.getTerm().getTermDisplayLabel().localize(), this.orderBy);
      }
    }
  }
}
