/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions;

import com.runwaysdk.generation.loader.Reloadable;
import com.runwaysdk.query.AND;
import com.runwaysdk.query.Condition;
import com.runwaysdk.query.QueryFactory;

@com.runwaysdk.business.ClassSignature(hash = 978492195)
/**
 *
 * @author Autogenerated by TerraFrame
 */
public class PersonWithDelegatesViewQuery extends dss.vector.solutions.PersonWithDelegatesViewQueryBase  implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = 978492195;

  public PersonWithDelegatesViewQuery(com.runwaysdk.query.QueryFactory queryFactory, PersonView view)
  {
    super(queryFactory);
    this.buildQuery(new SearchQueryBuilder(queryFactory, view));
  }
  
  public PersonWithDelegatesViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultPersonWithDelegatesViewBuilder(queryFactory));
  }

  public PersonWithDelegatesViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultPersonWithDelegatesViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    private PersonQuery query;
    
    public DefaultPersonWithDelegatesViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
      
      query = new PersonQuery(queryFactory);
    }

    protected PersonWithDelegatesViewQuery getViewQuery()
    {
      return (PersonWithDelegatesViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      PersonWithDelegatesViewQuery vQuery = this.getViewQuery();
      
      vQuery.map(PersonWithDelegatesView.PERSONID, query.getId());
      vQuery.map(PersonWithDelegatesView.IDENTIFIER, query.getIdentifier());
      vQuery.map(PersonWithDelegatesView.DATEOFBIRTH, query.getDateOfBirth());
      vQuery.map(PersonWithDelegatesView.FIRSTNAME, query.getFirstName());
      vQuery.map(PersonWithDelegatesView.LASTNAME, query.getLastName());
      vQuery.map(PersonWithDelegatesView.SEX, query.getSex());
      vQuery.map(PersonWithDelegatesView.PATIENTDELEGATE, query.getPatientDelegate());
      vQuery.map(PersonWithDelegatesView.TEAMMEMBERDELEGATE, query.getTeamMemberDelegate());
      vQuery.map(PersonWithDelegatesView.STOCKSTAFFDELEGATE, query.getStockStaffDelegate());
      vQuery.map(PersonWithDelegatesView.IPTRECIPIENTDELEGATE, query.getIptRecipientDelegate());
      vQuery.map(PersonWithDelegatesView.ITNRECIPIENTDELEGATE, query.getItnRecipientDelegate());
      vQuery.map(PersonWithDelegatesView.SUPERVISORDELEGATE, query.getSupervisorDelegate());
      vQuery.map(PersonWithDelegatesView.USERDELEGATE, query.getUserDelegate());
      vQuery.map(PersonWithDelegatesView.PHYSICIANDELEGATE, query.getPhysicianDelegate());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {

    }

  }
  
  public class SearchQueryBuilder extends DefaultPersonWithDelegatesViewBuilder implements Reloadable
  {
    private PersonView view;

    private Condition                    condition;

    public SearchQueryBuilder(QueryFactory queryFactory, PersonView view)
    {
      super(queryFactory);

      this.view = view;
      this.condition = null;
    }

    @Override
    protected void buildWhereClause()
    {
      PersonWithDelegatesViewQuery vQuery = this.getViewQuery();

      if (view.getPersonId() != null && !view.getPersonId().equals(""))
      {
        this.addCondition(vQuery.getPersonId().EQ(view.getPersonId()));
      }

      if (view.getIdentifier() != null && !view.getIdentifier().equals(""))
      {
        this.addCondition(vQuery.getIdentifier().EQ(view.getIdentifier()));
      }

      if (view.getDateOfBirth() != null && !view.getDateOfBirth().equals(""))
      {
        this.addCondition(vQuery.getDateOfBirth().EQ(view.getDateOfBirth()));
      }
      
      if (view.getFirstName() != null && !view.getFirstName().equals(""))
      {
        this.addCondition(vQuery.getFirstName().EQi(view.getFirstName()));
      }
      
      if (view.getLastName() != null && !view.getLastName().equals(""))
      {
        this.addCondition(vQuery.getLastName().EQi(view.getLastName()));
      }
      
      if (view.getSex() != null)
      {
        this.addCondition(vQuery.getSex().EQ(view.getSex()));
      }
      
//      if (view.getPatientDelegate() != null)
//      {
//        this.addCondition(vQuery.getSex().EQ(view.getPatientDelegate()));
//      }
//      
//      if (view.getTeamMemberDelegate() != null)
//      {
//        this.addCondition(vQuery.getSex().EQ(view.getTeamMemberDelegate()));
//      }
//      
//      if (view.getStockStaffDelegate() != null)
//      {
//        this.addCondition(vQuery.getSex().EQ(view.getStockStaffDelegate()));
//      }
//      
//      if (view.getIptRecipientDelegate() != null)
//      {
//        this.addCondition(vQuery.getSex().EQ(view.getIptRecipientDelegate()));
//      }
//      
//      if (view.getItnRecipientDelegate() != null)
//      {
//        this.addCondition(vQuery.getSex().EQ(view.getItnRecipientDelegate()));
//      }
//      
//      if (view.getSupervisorDelegate() != null)
//      {
//        this.addCondition(vQuery.getSex().EQ(view.getSupervisorDelegate()));
//      }
//      
//      if (view.getUserDelegate() != null)
//      {
//        this.addCondition(vQuery.getSex().EQ(view.getUserDelegate()));
//      }
//      
//      if (view.getPhysicianDelegate() != null)
//      {
//        this.addCondition(vQuery.getSex().EQ(view.getPhysicianDelegate()));
//      }

      if (condition != null)
      {
        vQuery.WHERE(condition);
      }
    }

    private void addCondition(Condition newCondition)
    {
      if (condition == null)
      {
        condition = newCondition;
      }
      else
      {
        condition = AND.get(condition, newCondition);
      }
    }
  }
}
