<?xml version="1.0" encoding="UTF-8"?>
<project name="test" default="deploy">

	<!-- =================================================================== -->
	<!-- Set up our properties                                               -->
	<!-- =================================================================== -->

	<property name="profile.root" value="../../../profiles" />
	<property name="system.password" value="mdsstest2" />
	<taskdef name="runwayproperties" classname="com.runwaysdk.ant.RunwayProperties" classpath="${profile.root};runwayProperties.jar" />
	<runwayproperties root="${profile.root}" />
	<echo message="${java.ext.dirs}" />

	<!-- execution path -->
	<path id="framework.classpath">
		<fileset dir="${local.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${profile.root}" />
		<pathelement path="${java.home}/lib/ext/sunjce_provider.jar" />
		<pathelement location="${local.bin}" />
		<pathelement location="${client.bin}" />
		<pathelement location="${server.bin}" />
		<pathelement location="${common.bin}" />
	</path>

	<property name="domain.location" value="${local.root}/doc/entomology.xml" />
	<property name="xsd.location" value="${local.root}/profiles/datatype_gis.xsd" />

	<property name="version.dir" value="${local.root}/doc/individual/" />

	<property name="version.dir" value="${local.root}/doc/individual/" />
	<property name="working.dir" value="${local.root}/doc/working/" />
	<property name="model.dir" value="${local.root}/doc/model/" />

	<property name="version.xsd" value="/version_gis.xsd" />
	<property name="geodata.db" value="mrc_zambia" />

	<!-- =================================================================== -->
	<!-- Define the tomcat tasks                                                 -->
	<!-- =================================================================== -->
	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpath="${server.lib}/catalina-ant.jar" />

	<taskdef name="start" classname="org.apache.catalina.ant.StartTask" classpath="${server.lib}/catalina-ant.jar" />

	<taskdef name="stop" classname="org.apache.catalina.ant.StopTask" classpath="${server.lib}/catalina-ant.jar" />

	<target name="reload_tomcat_webapp" description="Calls tomcat's manager to reload the webapp">
		<reload url="${deploy.manager.url}" username="${deploy.username}" password="${deploy.password}" path="/${deploy.appname}" />
		<echo message="The Tomcat webapp '${deploy.appname}' has been stopped" />
	</target>

	<!--If this is the first time this project is built, these tasks will not run-->
	<available file="${deploy.path}" type="dir" property="deploy_path_exists" />
	<target name="stop_tomcat_webapp" description="Calls tomcat's manager to stop the webapp" if="deploy_path_exists">
		<stop url="${deploy.manager.url}" username="${deploy.username}" password="${deploy.password}" path="/${deploy.appname}" />
		<echo message="The Tomcat webapp '${deploy.appname}' has been stopped" />
	</target>

	<target name="start_tomcat_webapp" description="Calls tomcat's manager to start the webapp" if="deploy_path_exists">
		<start url="${deploy.manager.url}" username="${deploy.username}" password="${deploy.password}" path="/${deploy.appname}" />
		<echo message="The Tomcat webapp '${deploy.appname}' has been started." />
	</target>

	<!-- Add in AspectJ task definitions -->
	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
		<classpath>
			<fileset dir="${local.lib}">
				<include name="**/*.jar" />
			</fileset>
		</classpath>
	</taskdef>



	<target name="deploy_all_files" depends="createWebAppDirs,deploy_tomcat_files,copy_properties,deploy_src_class_lib_files,deploy_presentation_files">
	</target>

	<target name="deploy_all_application_files" depends="copy_properties,deploy_src_class_lib_files,deploy_presentation_files">
	</target>

	<target name="createWebAppDirs">
		<!-- create WEB-INF skeleton structure -->
		<mkdir dir="${deploy.webinf}" />
		<mkdir dir="${deploy.webinf}/tlds" />
		<mkdir dir="${deploy.bin}" />
		<mkdir dir="${deploy.lib}" />
	</target>

	<target name="deploy_tomcat_files">
		<copy todir="${deploy.webinf}/tlds" overwrite="true" verbose="true">
			<fileset dir="${webapp.root}/WEB-INF/tlds" />
		</copy>

		<copy todir="${deploy.webinf}/platform" overwrite="true" verbose="true">
			<fileset dir="${webapp.root}/WEB-INF/platform" />
		</copy>

		<!-- create the META-INF dir -->
		<copy toDir="${deploy.path}/META-INF" overwrite="true">
			<fileset dir="${webapp.root}/META-INF" />
		</copy>

		<!-- Delete the old web.xml file -->
		<delete failonerror="false">
			<fileset dir="${deploy.webinf}">
				<include name="**/web.xml" />
			</fileset>
		</delete>

		<!-- Create the new web.xml file -->
		<concat destfile="${deploy.webinf}/web.xml">
			<fileset dir="${local.ant}">
				<include name="web_begin.xml" />
			</fileset>
			<fileset dir="${local.ant}">
				<include name="web_application_settings.xml" />
			</fileset>
			<fileset dir="${local.ant}">
				<include name="web_end.xml" />
			</fileset>
		</concat>

	</target>

	<!-- assumes the develop provile -->
	<target name="deploy_src_class_lib_files">

		<!-- Copy classes -->
		<copy todir="${deploy.bin}" overwrite="true">
			<fileset dir="${common.src}/bin">
				<include name="**/*.class" />
			</fileset>
		</copy>

		<!-- Copy classes -->
		<copy todir="${deploy.bin}" overwrite="true">
			<fileset dir="${server.src}/bin">
				<include name="**/*.class" />
			</fileset>
		</copy>

		<!-- Copy classes -->
		<copy todir="${deploy.bin}" overwrite="true">
			<fileset dir="${client.src}/bin">
				<include name="**/*.class" />
			</fileset>
		</copy>

		<!-- Copy classes -->
		<copy todir="${deploy.bin}" overwrite="true">
			<fileset dir="${local.bin}">
				<include name="**/*.class" />
			</fileset>
		</copy>

		<!-- Copy source -->
		<copy todir="${deploy.common.src}/base" overwrite="true">
			<fileset dir="${common.src}/base">
				<include name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${deploy.common.src}/stub" overwrite="true">
			<fileset dir="${common.src}/stub">
				<include name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${deploy.common.src}/stub" overwrite="true">
			<fileset dir="${local.src}/common">
				<include name="**/*.java" />
			</fileset>
		</copy>


		<copy todir="${deploy.server.src}/base" overwrite="true">
			<fileset dir="${server.src}/base">
				<include name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${deploy.server.src}/stub" overwrite="true">
			<fileset dir="${server.src}/stub">
				<include name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${deploy.server.src}/stub" overwrite="true">
			<fileset dir="${local.src}/server">
				<include name="**/*.java" />
			</fileset>
		</copy>

		<copy todir="${deploy.client.src}/base" overwrite="true">
			<fileset dir="${client.src}/base">
				<include name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${deploy.client.src}/stub" overwrite="true">
			<fileset dir="${client.src}/stub">
				<include name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${deploy.client.src}/stub" overwrite="true">
			<fileset dir="${local.src}/client">
				<include name="**/*.java" />
			</fileset>
		</copy>

		<!-- Copy exceptions -->
		<copy todir="${deploy.common.src}/xml" overwrite="true">
			<fileset dir="${common.src}/xml">
				<include name="**/*.xml" />
			</fileset>
		</copy>

		<!-- Copy Libs -->
		<copy toDir="${deploy.lib}" overwrite="true" flatten="true">
			<fileset dir="${local.lib}">
				<include name="**/*.jar" />
				<exclude name="**/servlet-api-*.jar" />
				<exclude name="**/jsp-api.jar" />
			</fileset>
		</copy>

		<!-- These files are needed for compilation, but should not exist in the deploy -->
		<delete file="${deploy.bin}/dss/vector/solutions/global/CredentialsSingleton.class" />
		<delete file="${deploy.bin}/dss/vector/solutions/global/CredentialsSingleton$1.class" />
		<delete file="${deploy.bin}/dss/vector/solutions/global/CredentialsSingleton$Singleton.class" />
		<delete file="${deploy.bin}/dss/vector/solutions/geoserver/GeoServerRequestFilter.class" />

	</target>

	<!-- Exports a jar containing client, server, and common code -->
	<target name="build_aspect_jar" description="Exports all application aspects into a jar">

		<mkdir dir="temp" />
		<mkdir dir="temp/META-INF" />

		<copy file="${local.ant}/aop.xml" todir="temp/META-INF" />

		<!-- Instead of including source in the jar, just create a zip file that can still be referenced by eclipse for debugging -->
		<iajc destDir="temp" source="1.5" target="1.5" verbose="false" X="notReweavable">
			<src path="${local.src.server};" />
			<include name="**/*.aj" />

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</iajc>

		<jar destfile="${local.lib}/mdssaspect.jar" compress="true">
			<fileset dir="temp">
				<exclude name="**/*.java" />
				<exclude name="**/*.aj" />
			</fileset>
		</jar>

		<delete dir="temp" />
	</target>


	<target name="change_schema_version" description="Updates the domain model to the given version of the schema" depends="get_version_number">
		<echo message="Update domain to the most recent schema" />
		<java classname="com.runwaysdk.dataaccess.io.UpdateVersion" failonerror="true">
			<arg value="${version.dir}/" />
			<arg value="${version.xsd}" />
			<arg value="${versionNumber}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>



	<!-- =================================================================== -->
	<!-- Rebuild the environment                                             -->
	<!-- =================================================================== -->

	<target name="get_root_login" description="Checks for root username and prompts for it if not found." unless="root.user">
		<input message="Root Username:" addproperty="root.user" />
	</target>

	<target name="get_root_password" description="Checks for root password and prompts for it if not found." unless="root.pass">
		<input message="Root Password:" addproperty="root.pass" />
	</target>

	<target name="get_root_database" description="Checks for root database and prompts for it if not found." unless="root.db">
		<input message="Root Database:" addproperty="root.db" />
	</target>

	<target name="rebuild_db" description="Rebuilds the metadata" depends="get_root_login,get_root_password,get_root_database">
		<echo message="Setting up users and metadata on database!!!!!" />
		<java classname="com.runwaysdk.dataaccess.Installer" failonerror="true">
			<arg value="${root.user}" />
			<arg value="${root.pass}" />
			<arg value="${root.db}" />
			<arg file="${local.root}/scripts/metadata/schema.xsd" />
			<arg file="${local.root}/scripts/metadata/metadata.xml" />
			<arg file="${local.root}/scripts/metadata/gismetadata.xml" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="install_db_procedures" description="Installs Dabase Procedures" depends="">
		<echo message="Install Database Stored Procedures:" />
		<java classname="dss.vector.solutions.util.InstallStoredProcedures" failonerror="true" fork="true">
			<arg file="${local.root}/scripts/plsql/geoEntity_Views.sql" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="clean_generated" description="Removes all generated classes and directories">
		<!-- we don't want to fail on error because the dirs may not exist if this is a fresh install -->
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${client.src}" includes="**/*" />
		</delete>
		<echo message="Cleaned generated directory [${client.src}]" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${common.src}">
				<include name="**/*" />
				<!-- exclude name="xml/exceptions.xsd"/ -->
			</fileset>
		</delete>
		<echo message="Cleaned generated directory [${common.src}]" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${server.src}" includes="**/*" />
		</delete>
		<echo message="Cleaned generated directory [${server.src}]" />
		<copy file="${profile.root}/exceptions.xsd" tofile="${common.src}/xml/exceptions.xsd" />
	</target>

	<target name="delete_generated_base" description="Removes all generated BASE classes and directories">
		<!-- we don't want to fail on error because the dirs may not exist if this is a fresh install -->
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${client.src}/base" includes="**/*" />
			<fileset dir="${client.src}/bin" includes="**/*" />
		</delete>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${common.src}/base" includes="**/*" />
			<fileset dir="${common.src}/bin" includes="**/*" />
		</delete>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${server.src}/base" includes="**/*" />
			<fileset dir="${server.src}/bin" includes="**/*" />
		</delete>
		<echo message="Cleaned generated base directories" />
	</target>

	<target name="delete_generated_all" description="Removes all generated BASE and STUB classes and directories">
		<!-- we don't want to fail on error because the dirs may not exist if this is a fresh install -->
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${client.src}/base" includes="**/*" />
			<fileset dir="${client.src}/stub" includes="**/*" />
			<fileset dir="${client.src}/bin" includes="**/*" />
		</delete>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${common.src}/base" includes="**/*" />
			<fileset dir="${common.src}/stub" includes="**/*" />
			<fileset dir="${common.src}/bin" includes="**/*" />
		</delete>
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${server.src}/base" includes="**/*" />
			<fileset dir="${server.src}/stub" includes="**/*" />
			<fileset dir="${server.src}/bin" includes="**/*" />
		</delete>
		<echo message="Cleaned generated base stub and bin directories" />
	</target>

	<target name="compile_generated">
		<iajc destdir="${local.bin}" sourceroots="${local.src}" debug="true" source="1.6" target="1.6" maxmem="1024m">
			<aspectpath>
				<pathelement location="${server.lib}/runwaysdk-server.jar" />
				<pathelement location="${common.lib}/runwaysdk-common.jar" />
				<pathelement location="${client.lib}/runwaysdk-client.jar" />
			</aspectpath>

			<classpath refid="framework.classpath" />
		</iajc>
		<iajc destdir="${common.bin}" sourceroots="${common.src}" debug="true" source="1.6" target="1.6" maxmem="1024m">
			<aspectpath>
				<pathelement location="${server.lib}/runwaysdk-server.jar" />
				<pathelement location="${common.lib}/runwaysdk-common.jar" />
				<pathelement location="${client.lib}/runwaysdk-client.jar" />
			</aspectpath>

			<classpath refid="framework.classpath" />
		</iajc>
		<iajc destdir="${client.bin}" sourceroots="${client.src}" debug="true" source="1.6" target="1.6" maxmem="1024m">
			<aspectpath>
				<pathelement location="${server.lib}/runwaysdk-server.jar" />
				<pathelement location="${common.lib}/runwaysdk-common.jar" />
				<pathelement location="${client.lib}/runwaysdk-client.jar" />
			</aspectpath>

			<classpath>
				<path refid="framework.classpath" />
				<pathelement location="${common.bin}" />
			</classpath>
		</iajc>
		<iajc destdir="${server.bin}" sourceroots="${server.src}" debug="true" source="1.6" target="1.6" maxmem="1024m">
			<aspectpath>
				<pathelement location="${server.lib}/runwaysdk-server.jar" />
				<pathelement location="${common.lib}/runwaysdk-common.jar" />
				<pathelement location="${client.lib}/runwaysdk-client.jar" />
			</aspectpath>

			<classpath>
				<path refid="framework.classpath" />
				<pathelement location="${common.bin}" />
			</classpath>
		</iajc>
	</target>

	<target name="update_domain_model">
		<!-- Import the domain model -->
		<java classname="ImportModel" failonerror="true">
			<arg file="${domain.location}" />
			<arg file="${xsd.location}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="update_db_source_and_classes">
		<!-- Update the database with the new sources and classes -->
		<java classname="com.runwaysdk.util.UpdateDatabaseSourceAndClasses" failonerror="true">
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="update_deploy_source">
		<!-- Update the database with the new sources and classes -->
		<java classname="com.runwaysdk.dataaccess.io.dataDefinition.DeployedMetadataUpdater" failonerror="true">
			<arg value="${export.package}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="deploy" depends="deploy_presentation_files,deploy_application_files,deploy_web_xml,copy_properties">
	</target>

	<target name="copy_properties">
		<!-- Flatten a profile and stick it on tomcat. -->
		<java classname="com.runwaysdk.ant.ProfileFlattener" fork="false" failonerror="true">
			<arg value="${deploy.profile}" />
			<arg value="$$${deploy.appname}_tmp" />
			<classpath>
				<fileset file="${server.lib}/runwaysdk-server.jar" />
				<fileset file="${client.lib}/runwaysdk-client.jar" />
				<fileset file="${common.lib}/runwaysdk-common.jar" />
				<pathelement location="${profile.root}" />
			</classpath>
		</java>

		<!-- Copy the flattened profile -->
		<copy todir="${deploy.bin}" overwrite="true">
			<fileset dir="${profile.root}/$$${deploy.appname}_tmp">
				<include name="**/*" />
			</fileset>
			<fileset dir="${profile.root}">
				<exclude name="master.properties" />
				<include name="*.*" />
			</fileset>
		</copy>

		<!-- Finally, delete the temp directory -->
		<delete dir="${profile.root}/$$${deploy.appname}_tmp" />

	</target>

	<target name="deploy_web_xml" description="constructs the web.xml file for the given application">

		<!-- Delete the old web.xml file -->
		<delete failonerror="false">
			<fileset dir="${deploy.webinf}">
				<include name="**/web.xml" />
			</fileset>
		</delete>

		<!-- Create the new web.xml file -->
		<concat destfile="${deploy.webinf}/web.xml">
			<fileset dir="${local.ant}">
				<include name="web_begin.xml" />
			</fileset>
			<fileset dir="${local.ant}">
				<include name="web_application_settings.xml" />
			</fileset>
			<fileset dir="${local.ant}">
				<include name="web_end.xml" />
			</fileset>
		</concat>

	</target>

	<target name="deploy_presentation_files">

		<!-- deploy application files (e.g., js, html, and jsp) -->
		<copy toDir="${deploy.path}" overwrite="true">
			<fileset dir="${webapp.root}">
				<include name="**/*.jsp" />
				<include name="**/*.html" />
				<include name="js/**" />
				<include name="**/*.css" />
				<include name="reports/**" />
				<include name="imgs/**" />
			</fileset>
		</copy>
	</target>

	<!-- deploy application specific files -->
	<target name="deploy_application_files">

		<!-- create WEB-INF skeleton structure -->
		<mkdir dir="${deploy.webinf}" />
		<mkdir dir="${deploy.webinf}/tlds" />
		<mkdir dir="${deploy.bin}" />
		<mkdir dir="${deploy.lib}" />

		<copy todir="${deploy.webinf}/tlds" overwrite="true" verbose="true">
			<fileset dir="${webapp.root}/WEB-INF/tlds" />
		</copy>

		<copy todir="${deploy.webinf}/platform" overwrite="true" verbose="true">
			<fileset dir="${webapp.root}/WEB-INF/platform" />
		</copy>

		<!-- Copy over the menu reset txt file -->
		<copy tofile="${deploy.path}/panicButton.txt" file="${webapp.root}/panicButton.txt" />

		<copy todir="${deploy.bin}" overwrite="true" verbose="true">

			<fileset dir="${webapp.root}/WEB-INF/tlds" />
		</copy>

		<!-- create the META-INF dir -->
		<copy toDir="${deploy.path}/META-INF" overwrite="true">
			<fileset dir="${webapp.root}/META-INF" />
		</copy>

		<!-- deploy all application jars -->
		<copy toDir="${deploy.lib}" overwrite="true" flatten="true">
			<fileset dir="${local.lib}">
				<include name="**/*.jar" />
				<exclude name="**/servlet-api-*.jar" />
				<exclude name="**/jsp-api.jar" />
			</fileset>
		</copy>

		<antcall target="compile_generated" />

		<copy todir="${deploy.bin}">
			<fileset dir="${server.bin}" includes="**/*.class" />
			<fileset dir="${common.bin}" includes="**/*.class" />
			<fileset dir="${client.bin}" includes="**/*.class" />
		</copy>

		<!-- compile and jar the application library (e.g., servlet filters) -->
		<!-- You can comment this section out to speed up deploy if you want to use the class files produced by eclipse -->
		<iajc sourceroots="${local.src}" destDir="${deploy.bin}" debug="true" source="1.6" target="1.6" maxmem="1024m">
			<aspectpath>
				<pathelement location="${server.lib}/runwaysdk-server.jar" />
				<pathelement location="${common.lib}/runwaysdk-common.jar" />
				<pathelement location="${client.lib}/runwaysdk-client.jar" />
			</aspectpath>
			<classpath>
				<path refid="framework.classpath" />
				<pathelement location="${client.bin}" />
				<pathelement location="${common.bin}" />
				<pathelement location="${server.bin}" />
			</classpath>
		</iajc>

		<!-- These files are needed for compilation, but should not exist in the deploy -->
		<delete file="${deploy.bin}/dss/vector/solutions/global/CredentialsSingleton.class" />
		<delete file="${deploy.bin}/dss/vector/solutions/global/CredentialsSingleton$1.class" />
		<delete file="${deploy.bin}/dss/vector/solutions/global/CredentialsSingleton$Singleton.class" />
		<delete file="${deploy.bin}/dss/vector/solutions/geoserver/GeoServerRequestFilter.class" />

	</target>

	<target name="export_credentials_singleton">
		<jar destfile="${deploy.root}/lib/credentialsSingleton.jar" basedir="${local.bin}" compress="true">
			<include name="dss/vector/solutions/global/CredentialsSingleton.class" />
			<include name="dss/vector/solutions/global/CredentialsSingleton$Singleton.class" />
		</jar>
	</target>

	<target name="export_tomcat_classloader" description="Exports the Tomcat webapp classloader">
		<copy file="runwaySDKTomcatLoader.jar" tofile="${deploy.classloader.jar}" />
	</target>

	<target name="prepare_web_service" description="Publishes web services to Apache Axis">

		<!-- get the path of the axis lib -->
		<path id="axis.classpath">
			<fileset dir="${server.lib}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${common.lib}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<!-- define the core services -->
		<java classname="com.runwaysdk.facade.wsdd.WebServiceDeployer" fork="true" failonerror="true">
			<classpath>
				<path refid="framework.classpath" />
				<path refid="axis.classpath" />
			</classpath>
		</java>
	</target>


	<!-- =================================================================== -->
	<!-- Set the schema to the given version number                          -->
	<!-- =================================================================== -->

	<target name="get_version_number" description="Checks for root database and prompts for it if not found." unless="version.number">
		<property name="${version.number}" value="0" />
	</target>

	<target name="merge_model_v2_8" description="Creates a freshly merged schema for release 2.8">
		<echo message="Merging Pre Country Schema (v2.8): (0001238646706000)" />
		<java classname="com.runwaysdk.dataaccess.schemamanager.SchemaManager" failonerror="true" fork="true">
			<arg value="-timestamp" />
			<arg value="${local.root}/doc/V2.8/" />
			<arg value="${profile.root}/version_gis.xsd" />
			<arg value="${model.dir}(0001238646706000)Pre_V_Two_Eight.xml" />
			<arg value="0001238646706001" />
			<arg value="0001238646707000" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
		<echo message="Merging Post Country Schema (v2.8): (0001238646707003)" />
		<java classname="com.runwaysdk.dataaccess.schemamanager.SchemaManager" failonerror="true" fork="true">
			<arg value="-timestamp" />
			<arg value="${local.root}/doc/V2.8/" />
			<arg value="${profile.root}/version_gis.xsd" />
			<arg value="${model.dir}(0001238646707003)Post_V_Two_Eight.xml" />
			<arg value="0001238646707002" />
			<arg value="0001276205063723" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="setup_model" description="Sets up the model directory for importing">
		<echo message="Cleaning up of model directory" />
		<delete>
			<fileset dir="${model.dir}" includes="**/*.xml" excludes="**/*Two_Eight.xml" />
		</delete>
		<echo message="Copying over country specific files." />
		<copy todir="${model.dir}">
			<fileset dir="${version.dir}" includes="schema(0001238646707001).xml" />
		</copy>
		<echo message="Merging Post Country Schema (v3): ${model.dir}(0001238646707003)PostUniversal.xml" />
		<java classname="com.runwaysdk.dataaccess.schemamanager.SchemaManager" failonerror="true" fork="true">
			<arg value="-timestamp" />
			<arg value="${version.dir}" />
			<arg value="${profile.root}/version_gis.xsd" />
			<arg value="${model.dir}(0001238646707004)ReleaseUpdates.xml" />
			<arg value="0001276205063724" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="rebuild_model" depends="setup_model" description="Rebuilds the entire domain model using a freshly merged schema">
		<echo message="Update domain to the most recent schema" />
		<java classname="com.runwaysdk.dataaccess.io.Versioning" failonerror="true">
			<arg value="${model.dir}" />
			<arg value="${version.xsd}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="import_most_recent" description="Updates the domain model to the most recent schema" depends="get_version_number">
		<echo message="Update domain to the most recent schema" />
		<echoproperties>
		</echoproperties>
		<java classname="com.runwaysdk.dataaccess.io.Versioning" failonerror="true">
			<arg value="${version.dir}/" />
			<arg value="${version.xsd}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="redo_last_import" description="RollsBack one Version and then ReImports it" depends="get_version_number">
		<echo message="Update domain to the most recent schema" />
		<java classname="com.runwaysdk.dataaccess.io.RedoLastUpdate" failonerror="true">
			<arg value="${version.dir}/" />
			<arg value="${version.xsd}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="import_working_set" description="Performs the doIt command on all of the files in the working directory">
		<echo message="Import working set" />
		<java classname="com.runwaysdk.dataaccess.io.Versioning" failonerror="true">
			<arg value="${working.dir}/" />
			<arg value="${version.xsd}" />
			<arg value="false" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="unimport_working_set" description="Performs the undoIt command on all of the files in the working directory">
		<echo message="Unimport working set" />
		<java classname="com.runwaysdk.dataaccess.io.UndoAll" failonerror="true">
			<arg value="${working.dir}/" />
			<arg value="${version.xsd}" />
			<arg value="false" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="create_new_domain_model" description="Creates a new time stamped domain model">
		<echo message="Create a time stamped schema" />
		<java classname="com.runwaysdk.dataaccess.io.CreateDomainModel" failonerror="true">
			<arg value="${working.dir}/" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<!-- =================================================================== -->
	<!-- Import the geo data into the db                             -->
	<!-- =================================================================== -->
	<target name="import_geodata" depends="" description="imports a db of geodata into the db">
		<diagnostics />
		<java classname="dss.vector.solutions.util.GeoEntityImporter" fork="true" failonerror="true" dir="." timeout="4000000" taskname="ImportGeodata">
			<jvmarg value="-Xmx1024m" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="${root.user}" />
			<arg value="${root.pass}" />
			<arg value="${geodata.db}" />
			<arg value="../../../doc/country/${geodata.db}-universals.xls" />
		</java>
	</target>


	<!-- =================================================================== -->
	<!-- Import the ontology                                                 -->
	<!-- =================================================================== -->
	<target name="import_ontology_old" depends="" description="imports the MO ontology data into the db">
		<!--
		<diagnostics/>
		<echoproperties>
		</echoproperties>
		-->
		<java classname="dss.vector.solutions.util.OntologyImportManager" fork="true" failonerror="true" dir="." timeout="4000000" taskname="ImportOntology">
			<jvmarg value="-Xmx1024m" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="../../../doc/ontology/ro.obo" />
			<arg value="../../../doc/ontology/MO.obo" />
			<arg value="MO" />
		</java>

	</target>

	<target name="import_localization_disease_defaults" depends="" description="Import localization by disease defaults">
		<java classname="dss.vector.solutions.util.MdssLocalizationImporter" fork="true" failonerror="true" dir="." timeout="4000000" taskname="ImportLocalization">
			<jvmarg value="-Xmx1024M" />
			
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="../../../doc/DiseaseLocalizationDefaults.xls" />
		</java>
	</target>

	<target name="import_ontology" depends="" description="imports the MO ontology data into the db">
		<java classname="dss.vector.solutions.ontology.OntologyExcelImporter" fork="true" failonerror="true" dir="." timeout="4000000" taskname="ImportOntology">
			<jvmarg value="-Xmx1512M" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="../../../doc/ontology/MOterms.xls" />
			<arg value="MO" />
		</java>

	</target>

	<target name="import_ontology_roots" depends="" description="imports the MO roots into the db">
		<!--
		<diagnostics/>
		<echoproperties>
		</echoproperties>
		-->
		<java classname="dss.vector.solutions.ontology.PostOntologySetup" fork="true" failonerror="true" dir="." timeout="4000000" taskname="ImportOntologyRoots">
			<jvmarg value="-Xmx1024m" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="../../../doc/ontology/MOroots.xls" />
			<arg value="../../../doc/country/${geodata.db}-universals.xls" />
		</java>
	</target>

	<target name="import_menuitems" depends="" description="imports the default MenuItems into the db">
		<!--
		<diagnostics/>
		<echoproperties>
		</echoproperties>
		-->
		<java classname="dss.vector.solutions.util.MenuItemImporter" fork="true" failonerror="true" dir="." timeout="4000000" taskname="ImportMenuItems">
			<jvmarg value="-Xmx1024m" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="../../../doc/menu/MenuItems.xls" />
		</java>
	</target>

	<!-- =================================================================== -->
	<!-- Rebuild the geodata all paths table                                 -->
	<!-- =================================================================== -->
	<target name="build_all_paths_geodata" depends="" description="imports a db of geodata into the db">
		<!--
		<diagnostics/>
		<echoproperties>
		</echoproperties>
		-->
		<java classname="dss.vector.solutions.util.GeoEntityAllPathBuilder" fork="true" failonerror="true" dir="." timeout="14000000" taskname="Build AllPaths">
			<jvmarg value="-Xmx1024m" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="${root.user}" />
			<arg value="${root.pass}" />
			<arg value="${geodata.db}" />
		</java>
	</target>

	<!-- =================================================================== -->
	<!-- Rebuild the ontology all paths table                                -->
	<!-- =================================================================== -->
	<target name="build_all_paths_ontology" depends="" description="imports a db of geodata into the db">
		<!--
		<diagnostics/>
		<echoproperties>
		</echoproperties>
		-->
		<java classname="dss.vector.solutions.ontology.AllPaths" fork="true" failonerror="true" dir="." timeout="14000000" taskname="Build AllPaths">
			<jvmarg value="-Xmx1024m" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<!-- =================================================================== -->
	<!-- Create system queries for all universal types                       -->
	<!-- =================================================================== -->
	<target name="create_universal_queries" depends="" description="creates system queries for all universal types">
		<!--
		<diagnostics/>
		<echoproperties>
		</echoproperties>
		-->
		<java classname="dss.vector.solutions.util.UniversalSearchHelper" fork="true" failonerror="true" dir="." timeout="4000000" taskname="CreateUniversalSystemQueries">
			<jvmarg value="-Xmx1024m" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>

		</java>

	</target>

	<!-- =================================================================== -->
	<!-- Load Permissions                                                    -->
	<!-- =================================================================== -->
	<target name="load_permissions" depends="" description="Loads roles and permissions">
		<!--
		<diagnostics/>
		<echoproperties>
		</echoproperties>
		-->
		<java classname="dss.vector.solutions.permission.PermissionImporter" fork="true" failonerror="true" dir="." timeout="4000000" taskname="LoadPermissions">
			<jvmarg value="-Xmx1512M" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="../../../doc/permissions/Permissions.xls" />
		</java>

	</target>

	<!-- =================================================================== -->
	<!-- Backup the application                                              -->
	<!-- =================================================================== -->
	<target name="backupApplication" depends="" description="backs up the application to a zip file">
		<!--
		<diagnostics/>
		<echoproperties>
		</echoproperties>
		-->
		<java classname="com.runwaysdk.dataaccess.io.Backup" fork="true" failonerror="true" dir="." timeout="4000000" taskname="Backup Application">
			<jvmarg value="-Xmx1024m" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="${backupFileRootName}" />
			<arg value="${backupFileLocationDir}" />
		</java>
	</target>

	<!-- =================================================================== -->
	<!-- Restore the application                                             -->
	<!-- =================================================================== -->
	<target name="restoreApplication" depends="" description="restores the application">
		<!--
		<diagnostics/>
		<echoproperties>
		</echoproperties>
		-->
		<java classname="com.runwaysdk.dataaccess.io.Restore" fork="true" failonerror="true" dir="." timeout="4000000" taskname="Restore Application">
			<jvmarg value="-Xmx1024m" />
			

			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<arg value="${zipFileLocation}" />
		</java>
	</target>

	<!-- =================================================================== -->
	<!-- Jar Heavy Client Control Pannel                                     -->
	<!-- =================================================================== -->
	<target name="buildControllPannelJar" depends="" description="Builds the controll pannel jar">
		<javac srcdir="${local.src}" destDir="${local.bin}" source="1.6" target="1.6">
			<include name="**/MdssControlPanel.java" />
		</javac>

		<jar destfile="../../../mdsscontrolanel.jar" compress="true">
			<manifest>
				<attribute name="Main-Class" value="dss.vector.solutions.controlpanel.MdssControlPanel" />
			</manifest>
			<fileset dir="${local.bin}">
				<include name="**/MdssControlPanel*.class" />
			</fileset>
			<fileset dir="${profile.root}/controlpanel">
				<include name="**/MdssControlPanel.properties" />
			</fileset>
		</jar>
	</target>

	<!-- =================================================================== -->
	<!-- Run test suite                                                      -->
	<!-- =================================================================== -->
	<target name="test" description="Run DDMS test suite">
		<delete dir="${local.root}/test-results" />
		<mkdir dir="${local.root}/test-results" />
		<junit errorproperty="test.failed" failureproperty="test.failed" haltonfailure="no" printsummary="on" fork="yes" forkmode="once" showoutput="no" dir="${local.root}">
			<jvmarg value="-Xmx1512M" />
			
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
			<formatter type="brief" usefile="false" />
			<formatter type="xml" />
			<test todir="${local.root}/test-results" name="dss.vector.solutions.UeberTestSuite" />
		</junit>
		<fail message="Test failed: Check test log." if="test.failed" />
	</target>

</project>
