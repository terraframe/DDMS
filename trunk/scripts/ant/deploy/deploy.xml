<?xml version="1.0" encoding="UTF-8"?>
<project name="test" default="deploy">

	<!-- =================================================================== -->
	<!-- Set up our properties                                               -->
	<!-- =================================================================== -->


	<property name="profile.root" value="../../../profiles" />
	<taskdef name="tfproperties" classname="com.terraframe.mojo.ant.TFProperties"
		classpath="${profile.root};tfprops.jar" />
	<tfproperties root="${profile.root}"/>

	<!-- execution path -->
	<path id="framework.classpath">
		<fileset dir="${local.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${profile.root}" />
		<pathelement path="${java.ext.dirs}/sunjce_provider.jar" />
	</path>
	<path id="genpath">
		<fileset dir="${local.lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${local.bin}" />
	</path>
	
	<property name="domain.location" value="${local.root}/doc/entomology.xml" />

	<!-- =================================================================== -->
	<!-- Define tomcat tasks                                                 -->
	<!-- =================================================================== -->

	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpath="${server.lib}/catalina-ant.jar" />

	<taskdef name="start" classname="org.apache.catalina.ant.StartTask" classpath="${server.lib}/catalina-ant.jar" />

	<taskdef name="stop" classname="org.apache.catalina.ant.StartTask" classpath="${server.lib}/catalina-ant.jar" />

	<target name="reload_tomcat_webapp" description="Calls tomcat's manager to reload the webapp">
		<reload url="${deploy.manager.url}" username="${deploy.username}" password="${deploy.password}" path="/${deploy.appname}" />
		<echo message="The Tomcat webapp '${deploy.appname}' has been stopped" />
	</target>

	<target name="stop_tomcat_webapp" description="Calls tomcat's manager to stop the webapp">
		<stop url="${deploy.manager.url}" username="${deploy.username}" password="${deploy.password}" path="/${deploy.appname}" />
		<echo message="The Tomcat webapp '${deploy.appname}' has been stopped" />
	</target>

	<target name="start_tomcat_webapp" description="Calls tomcat's manager to start the webapp">
		<start url="${deploy.manager.url}" username="${deploy.username}" password="${deploy.password}" path="/${deploy.appname}" />
		<echo message="The Tomcat webapp '${deploy.appname}' has been started." />
	</target>


	<!-- Add in AspectJ task definitions -->
	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
		<classpath>
			<fileset dir="${local.lib}">
				<include name="**/*.jar" />
			</fileset>
		</classpath>
	</taskdef>

	<!-- =================================================================== -->
	<!-- Rebuild the environment                                             -->
	<!-- =================================================================== -->

	<target name="get_root_login" description="Checks for root username and prompts for it if not found." unless="root.user">
		<input message="Root Username:" addproperty="root.user" />
	</target>

	<target name="get_root_password" description="Checks for root password and prompts for it if not found." unless="root.pass">
		<input message="Root Password:" addproperty="root.pass" />
	</target>

	<target name="get_root_database" description="Checks for root database and prompts for it if not found." unless="root.db">
		<input message="Root Database:" addproperty="root.db" />
	</target>

	<target name="rebuild_db" description="Rebuilds the metadata" depends="get_root_login,get_root_password,get_root_database">
		<echo message="Setting up users and metadata on database" />
		<java classname="com.terraframe.mojo.dataaccess.Installer" failonerror="true">
			<arg value="${root.user}" />
			<arg value="${root.pass}" />
			<arg value="${root.db}" />
			<arg file="${local.root}/scripts/metadata/schema.xsd" />
			<arg file="${local.root}/scripts/metadata/metadata.xml" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="clean_generated" description="Removes all generated classes and directories">
		<!-- we don't want to fail on error because the dirs may not exist if this is a fresh install -->
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${client.src}" includes="**/*" />
		</delete>
		<echo message="Cleaned generated directory [${client.src}]" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${common.src}">
				<include name="**/*" />
				<!-- exclude name="xml/exceptions.xsd"/ -->
			</fileset>
		</delete>
		<echo message="Cleaned generated directory [${common.src}]" />
		<delete failonerror="false" includeemptydirs="true">
			<fileset dir="${server.src}" includes="**/*" />
		</delete>
		<echo message="Cleaned generated directory [${server.src}]" />
		<copy file="${profile.root}/exceptions.xsd" tofile="${common.src}/xml/exceptions.xsd" />
	</target>

	<target name="compile_generated">
		<javac destdir="${common.bin}" srcdir="${common.src}" debug="true">
			<classpath refid="genpath" />
		</javac>
		<javac destdir="${client.bin}" srcdir="${client.src}" debug="true">
			<classpath>
				<path refid="genpath" />
				<pathelement location="${common.bin}" />
			</classpath>
		</javac>
		<javac destdir="${server.bin}" srcdir="${server.src}" debug="true">
			<classpath>
				<path refid="genpath" />
				<pathelement location="${common.bin}" />
			</classpath>
		</javac>
	</target>

	<target name="update_domain_model">
		<!-- Import the domain model -->
		<java classname="ImportModel" failonerror="true">
			<arg file="${domain.location}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="update_db_source_and_classes">
		<!-- Update the database with the new sources and classes -->
		<java classname="com.terraframe.mojo.util.UpdateDatabaseSourceAndClasses" failonerror="true">
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>
	
	<target name="update_db_s_c_and_deploy" >
		<java classname="csu.mrc.ivcc.mdss.global.UpdateUtility" failonerror="true">
			<arg value="${export.package}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="update_deploy_source">
		<!-- Update the database with the new sources and classes -->
		<java classname="com.terraframe.mojo.dataaccess.io.dataDefinition.DeployedMetadataUpdater" failonerror="true">
			<arg value="${export.package}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>

	<target name="deploy" depends="deploy_presentation_files,deploy_application_files,deploy_web_xml">
		<!-- Flatten a profile and stick it on tomcat. -->
		<java classname="com.terraframe.mojo.ant.ProfileFlattener" fork="false" failonerror="true">
			<arg value="${deploy.profile}" />
			<arg value="$$${deploy.appname}_tmp" />
			<classpath>
				<fileset file="${local.lib}/terraframe.jar" />
				<pathelement location="${profile.root}" />
			</classpath>
		</java>

		<!-- Copy the flattened profile -->
		<copy todir="${deploy.bin}" overwrite="true">
			<fileset dir="${profile.root}/$$${deploy.appname}_tmp">
				<include name="**/*" />
			</fileset>
			<fileset dir="${profile.root}">
				<exclude name="master.properties" />
				<include name="*.*" />
			</fileset>
		</copy>

		<!-- Overwrite local.properties with the JEE defaults -->
		<copy tofile="${deploy.bin}/local.properties" file="JEElocal.properties" overwrite="true" />

		<!-- Finally, delete the temp directory -->
		<delete dir="${profile.root}/$$${deploy.appname}_tmp" />

	</target>

	<target name="deploy_web_xml" description="constructs the web.xml file for the given application">

		<!-- Delete the old web.xml file -->
		<delete failonerror="false">
			<fileset dir="${deploy.webinf}">
				<include name="**/web.xml" />
			</fileset>
		</delete>

		<!-- Create the new web.xml file -->
		<concat destfile="${deploy.webinf}/web.xml">
			<fileset dir="${local.ant}">
				<include name="web_begin.xml" />
			</fileset>
			<fileset dir="${local.ant}">
				<include name="web_application_settings.xml" />
			</fileset>
			<fileset dir="${local.ant}">
				<include name="web_end.xml" />
			</fileset>
		</concat>

	</target>

	<target name="deploy_presentation_files">

		<!-- deploy application files (e.g., js, html, and jsp) -->
		<copy toDir="${deploy.path}" overwrite="true">
			<fileset dir="${webapp.root}">
				<include name="**/*.jsp" />
				<include name="**/*.html" />
				<include name="js/**" />
				<include name="**/*.css" />
				<include name="reports/**" />
				<include name="imgs/**" />
			</fileset>
		</copy>
	</target>

	<!-- deploy application specific files -->
	<target name="deploy_application_files">

		<!-- create WEB-INF skeleton structure -->
		<mkdir dir="${deploy.webinf}" />
		<mkdir dir="${deploy.webinf}/tlds" />
		<mkdir dir="${deploy.bin}" />
		<mkdir dir="${deploy.lib}" />

		<copy todir="${deploy.webinf}/tlds" overwrite="true" verbose="true">
			<fileset dir="${webapp.root}/WEB-INF/tlds" />
		</copy>
		
		<copy todir="${deploy.webinf}/platform" overwrite="true" verbose="true">
			<fileset dir="${webapp.root}/WEB-INF/platform" />
		</copy>

		<!-- create the META-INF dir -->
		<copy toDir="${deploy.path}/META-INF" overwrite="true">
			<fileset dir="${webapp.root}/META-INF" />
		</copy>

		<!-- deploy all application jars -->
		<copy toDir="${deploy.lib}" overwrite="true" flatten="true">
			<fileset dir="${local.lib}">
				<include name="**/*.jar" />
				<exclude name="**/servlet-api-*.jar" />
				<exclude name="**/jsp-api.jar" />
			</fileset>
		</copy>

		<antcall target="compile_generated">
		</antcall>
		<copy todir="${deploy.bin}">
			<fileset dir="${server.bin}" includes="**/*.class" />
			<fileset dir="${common.bin}" includes="**/*.class" />
			<fileset dir="${client.bin}" includes="**/*.class" />
		</copy>

		<!-- compile and jar the application library (e.g., servlet filters) -->
		<javac srcdir="${local.src}" destDir="${deploy.bin}" debug="true" source="1.5" target="1.5">
			<classpath>
				<path refid="genpath" />
				<pathelement location="${client.bin}" />
				<pathelement location="${common.bin}" />
				<pathelement location="${server.bin}" />
			</classpath>
		</javac>

		<!-- These files are needed for compilation, but should not exist in the deploy -->
		<delete file="${deploy.bin}/csu/ivc/mrc/mdss/global/CredentialsSingleton.class" />
		<delete file="${deploy.bin}/csu/ivc/mrc/mdss/global/CredentialsSingleton$Singleton.class" />
		<delete file="${deploy.bin}/csu/ivc/mrc/mdss/geoserver/GeoServerRequestFilter.class" />
		
	</target>

	<target name="export_credentials_singleton">
		<jar destfile="${deploy.root}/lib/credentialsSingleton.jar" basedir="${local.bin}" compress="true">
	      <include name="csu/ivc/mrc/mdss/global/CredentialsSingleton.class"/>
	      <include name="csu/ivc/mrc/mdss/global/CredentialsSingleton$Singleton.class"/>
		</jar>
	</target>
	
	<target name="export_tomcat_classloader" description="Exports the Tomcat webapp classloader">
		<copy file="terraframeTomcatLoader.jar" tofile="${deploy.classloader.jar}" />
	</target>

	<target name="prepare_web_service" description="Publishes web services to Apache Axis">

		<!-- get the path of the axis lib -->
		<path id="axis.classpath">
			<fileset dir="${server.lib}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${common.lib}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<!-- define the core services -->
		<java classname="com.terraframe.mojo.facade.wsdd.WebServiceDeployer" fork="true" failonerror="true">
			<classpath>
				<path refid="framework.classpath" />
				<path refid="axis.classpath" />
			</classpath>
		</java>
	</target>


	<!-- =================================================================== -->
	<!-- Set the schema to the given version number                          -->
	<!-- =================================================================== -->

	<target name="get_version_number" description="Checks for root database and prompts for it if not found." unless="version.number">
		<property name="${version.number}" value="0" />
	</target>

	<target name="import_version" description="Reverts the domain model to the given version number" depends="get_version_number">
		<echo message="Reverts the domain model to the given version number" />
		<java classname="com.terraframe.mojo.dataaccess.io.Versioning" failonerror="true">
			<arg value="${version.dir}/" />
			<arg value="${version.number}" />
			<classpath>
				<path refid="framework.classpath" />
			</classpath>
		</java>
	</target>
	
	<target name="push_source" depends="">
			<java classname="com.terraframe.mojo.dataaccess.io.dataDefinition.DeployedMetadataUpdater" fork="true" failonerror="true" dir="." timeout="4000000" taskname="pushSource">
				<jvmarg value="-Xmx1024m" />
				<classpath>
					<path refid="framework.classpath" />
				</classpath>
				<arg value="com.terraframe.mojo.defaults" />
				<arg value="csu.mrc.ivcc.mdss.entomology" />
				<arg value="csu.mrc.ivcc.mdss.export.entomology" />
				<arg value="csu.mrc.ivcc.mdss.mo" />
				<arg value="csu.mrc.ivcc.mdss.entomology.assay" />
				<arg value="csu.mrc.ivcc.mdss.entomology.assay.biochemical" />
				<arg value="csu.mrc.ivcc.mdss.entomology.assay.molecular" />
				<arg value="csu.mrc.ivcc.mdss.entomology.assay.infectivity" />
				<arg value="csu.mrc.ivcc.mdss.geo" />
				<arg value="csu.mrc.ivcc.mdss.geo.generated" />
				<arg value="csu.mrc.ivcc.mdss.util" />
				<arg value="csu.mrc.ivcc.mdss" />
				<arg value="csu.mrc.ivcc.mdss.report" />
			</java>
		</target>
</project>
