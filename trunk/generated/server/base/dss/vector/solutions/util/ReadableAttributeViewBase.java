package dss.vector.solutions.util;

@com.runwaysdk.business.ClassSignature(hash = -611406576)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ReadableAttributeView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ReadableAttributeViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.util.ReadableAttributeView";
  public static java.lang.String ATTRIBUTEDESCRIPTION = "attributeDescription";
  public static java.lang.String ATTRIBUTENAME = "attributeName";
  public static java.lang.String ATTRIBUTEREQUIRED = "attributeRequired";
  public static java.lang.String BARCODE = "barcode";
  public static java.lang.String BASIC = "basic";
  public static java.lang.String DISPLAYLABEL = "displayLabel";
  public static java.lang.String FIELDID = "fieldId";
  public static java.lang.String FORMLEVEL = "formLevel";
  public static java.lang.String ID = "id";
  public static java.lang.String NOTBLANK = "notBlank";
  public static java.lang.String READPERMISSION = "readPermission";
  private static final long serialVersionUID = -611406576;
  
  public ReadableAttributeViewBase()
  {
    super();
  }
  
  public String getAttributeDescription()
  {
    return getValue(ATTRIBUTEDESCRIPTION);
  }
  
  public void validateAttributeDescription()
  {
    this.validateAttribute(ATTRIBUTEDESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getAttributeDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ATTRIBUTEDESCRIPTION);
  }
  
  public void setAttributeDescription(String value)
  {
    if(value == null)
    {
      setValue(ATTRIBUTEDESCRIPTION, "");
    }
    else
    {
      setValue(ATTRIBUTEDESCRIPTION, value);
    }
  }
  
  public String getAttributeName()
  {
    return getValue(ATTRIBUTENAME);
  }
  
  public void validateAttributeName()
  {
    this.validateAttribute(ATTRIBUTENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getAttributeNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(ATTRIBUTENAME);
  }
  
  public void setAttributeName(String value)
  {
    if(value == null)
    {
      setValue(ATTRIBUTENAME, "");
    }
    else
    {
      setValue(ATTRIBUTENAME, value);
    }
  }
  
  public Boolean getAttributeRequired()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ATTRIBUTEREQUIRED));
  }
  
  public void validateAttributeRequired()
  {
    this.validateAttribute(ATTRIBUTEREQUIRED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getAttributeRequiredMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ATTRIBUTEREQUIRED);
  }
  
  public void setAttributeRequired(Boolean value)
  {
    if(value == null)
    {
      setValue(ATTRIBUTEREQUIRED, "");
    }
    else
    {
      setValue(ATTRIBUTEREQUIRED, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getBarcode()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(BARCODE));
  }
  
  public void validateBarcode()
  {
    this.validateAttribute(BARCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getBarcodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(BARCODE);
  }
  
  public void setBarcode(Boolean value)
  {
    if(value == null)
    {
      setValue(BARCODE, "");
    }
    else
    {
      setValue(BARCODE, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getBasic()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(BASIC));
  }
  
  public void validateBasic()
  {
    this.validateAttribute(BASIC);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getBasicMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(BASIC);
  }
  
  public void setBasic(Boolean value)
  {
    if(value == null)
    {
      setValue(BASIC, "");
    }
    else
    {
      setValue(BASIC, java.lang.Boolean.toString(value));
    }
  }
  
  public String getDisplayLabel()
  {
    return getValue(DISPLAYLABEL);
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public void setDisplayLabel(String value)
  {
    if(value == null)
    {
      setValue(DISPLAYLABEL, "");
    }
    else
    {
      setValue(DISPLAYLABEL, value);
    }
  }
  
  public String getFieldId()
  {
    return getValue(FIELDID);
  }
  
  public void validateFieldId()
  {
    this.validateAttribute(FIELDID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getFieldIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(FIELDID);
  }
  
  public void setFieldId(String value)
  {
    if(value == null)
    {
      setValue(FIELDID, "");
    }
    else
    {
      setValue(FIELDID, value);
    }
  }
  
  public Boolean getFormLevel()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(FORMLEVEL));
  }
  
  public void validateFormLevel()
  {
    this.validateAttribute(FORMLEVEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getFormLevelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(FORMLEVEL);
  }
  
  public void setFormLevel(Boolean value)
  {
    if(value == null)
    {
      setValue(FORMLEVEL, "");
    }
    else
    {
      setValue(FORMLEVEL, java.lang.Boolean.toString(value));
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public Boolean getNotBlank()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(NOTBLANK));
  }
  
  public void validateNotBlank()
  {
    this.validateAttribute(NOTBLANK);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getNotBlankMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(NOTBLANK);
  }
  
  public void setNotBlank(Boolean value)
  {
    if(value == null)
    {
      setValue(NOTBLANK, "");
    }
    else
    {
      setValue(NOTBLANK, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getReadPermission()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(READPERMISSION));
  }
  
  public void validateReadPermission()
  {
    this.validateAttribute(READPERMISSION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getReadPermissionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.util.ReadableAttributeView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(READPERMISSION);
  }
  
  public void setReadPermission(Boolean value)
  {
    if(value == null)
    {
      setValue(READPERMISSION, "");
    }
    else
    {
      setValue(READPERMISSION, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ReadableAttributeView get(String id)
  {
    return (ReadableAttributeView) com.runwaysdk.business.View.get(id);
  }
  
  public static dss.vector.solutions.util.ReadableAttributeView[] getActorAttributes(java.lang.String universal, java.lang.String actorName)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.util.ReadableAttributeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.util.ReadableAttributeView[] getReadableAttributes(java.lang.String qualifiedClass)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.util.ReadableAttributeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static void setActorAttributes(java.lang.String universal, java.lang.String actorName, dss.vector.solutions.util.ReadableAttributeView[] attributeViews)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.util.ReadableAttributeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
