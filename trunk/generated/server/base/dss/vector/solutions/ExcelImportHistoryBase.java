package dss.vector.solutions;

@com.runwaysdk.business.ClassSignature(hash = 811413147)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ExcelImportHistory.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ExcelImportHistoryBase extends com.runwaysdk.system.scheduler.JobHistory implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.ExcelImportHistory";
  public static java.lang.String ERRORFILE = "errorFile";
  public static java.lang.String FILENAME = "fileName";
  public static java.lang.String HASERROR = "hasError";
  public static java.lang.String IMPORTCOUNT = "importCount";
  public static java.lang.String SERIALIZEDUNKNOWNGEOS = "serializedUnknownGeos";
  public static java.lang.String SERIALIZEDUNKNOWNTERMS = "serializedUnknownTerms";
  public static java.lang.String TOTALRECORDS = "totalRecords";
  private static final long serialVersionUID = 811413147;
  
  public ExcelImportHistoryBase()
  {
    super();
  }
  
  public com.runwaysdk.system.VaultFile getErrorFile()
  {
    if (getValue(ERRORFILE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.VaultFile.get(getValue(ERRORFILE));
    }
  }
  
  public String getErrorFileId()
  {
    return getValue(ERRORFILE);
  }
  
  public void validateErrorFile()
  {
    this.validateAttribute(ERRORFILE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getErrorFileMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ExcelImportHistory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ERRORFILE);
  }
  
  public void setErrorFile(com.runwaysdk.system.VaultFile value)
  {
    if(value == null)
    {
      setValue(ERRORFILE, "");
    }
    else
    {
      setValue(ERRORFILE, value.getId());
    }
  }
  
  public void setErrorFile(java.lang.String id)
  {
    if(id == null)
    {
      setValue(ERRORFILE, "");
    }
    else
    {
      setValue(ERRORFILE, id);
    }
  }
  
  public String getFileName()
  {
    return getValue(FILENAME);
  }
  
  public void validateFileName()
  {
    this.validateAttribute(FILENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getFileNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ExcelImportHistory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(FILENAME);
  }
  
  public void setFileName(String value)
  {
    if(value == null)
    {
      setValue(FILENAME, "");
    }
    else
    {
      setValue(FILENAME, value);
    }
  }
  
  public Boolean getHasError()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(HASERROR));
  }
  
  public void validateHasError()
  {
    this.validateAttribute(HASERROR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getHasErrorMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ExcelImportHistory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(HASERROR);
  }
  
  public void setHasError(Boolean value)
  {
    if(value == null)
    {
      setValue(HASERROR, "");
    }
    else
    {
      setValue(HASERROR, java.lang.Boolean.toString(value));
    }
  }
  
  public Integer getImportCount()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(IMPORTCOUNT));
  }
  
  public void validateImportCount()
  {
    this.validateAttribute(IMPORTCOUNT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getImportCountMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ExcelImportHistory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(IMPORTCOUNT);
  }
  
  public void setImportCount(Integer value)
  {
    if(value == null)
    {
      setValue(IMPORTCOUNT, "");
    }
    else
    {
      setValue(IMPORTCOUNT, java.lang.Integer.toString(value));
    }
  }
  
  public String getSerializedUnknownGeos()
  {
    return getValue(SERIALIZEDUNKNOWNGEOS);
  }
  
  public void validateSerializedUnknownGeos()
  {
    this.validateAttribute(SERIALIZEDUNKNOWNGEOS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getSerializedUnknownGeosMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ExcelImportHistory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(SERIALIZEDUNKNOWNGEOS);
  }
  
  public void setSerializedUnknownGeos(String value)
  {
    if(value == null)
    {
      setValue(SERIALIZEDUNKNOWNGEOS, "");
    }
    else
    {
      setValue(SERIALIZEDUNKNOWNGEOS, value);
    }
  }
  
  public String getSerializedUnknownTerms()
  {
    return getValue(SERIALIZEDUNKNOWNTERMS);
  }
  
  public void validateSerializedUnknownTerms()
  {
    this.validateAttribute(SERIALIZEDUNKNOWNTERMS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getSerializedUnknownTermsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ExcelImportHistory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(SERIALIZEDUNKNOWNTERMS);
  }
  
  public void setSerializedUnknownTerms(String value)
  {
    if(value == null)
    {
      setValue(SERIALIZEDUNKNOWNTERMS, "");
    }
    else
    {
      setValue(SERIALIZEDUNKNOWNTERMS, value);
    }
  }
  
  public Integer getTotalRecords()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(TOTALRECORDS));
  }
  
  public void validateTotalRecords()
  {
    this.validateAttribute(TOTALRECORDS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getTotalRecordsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ExcelImportHistory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(TOTALRECORDS);
  }
  
  public void setTotalRecords(Integer value)
  {
    if(value == null)
    {
      setValue(TOTALRECORDS, "");
    }
    else
    {
      setValue(TOTALRECORDS, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ExcelImportHistoryQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ExcelImportHistoryQuery query = new ExcelImportHistoryQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static ExcelImportHistory get(String id)
  {
    return (ExcelImportHistory) com.runwaysdk.business.Business.get(id);
  }
  
  public static ExcelImportHistory getByKey(String key)
  {
    return (ExcelImportHistory) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static void deleteAllHistory()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ExcelImportHistory.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void downloadErrorSpreadsheet(java.io.OutputStream outputStream)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ExcelImportHistory.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void downloadErrorSpreadsheet(java.lang.String id, java.io.OutputStream outputStream)
  {
    ExcelImportHistory _instance = ExcelImportHistory.get(id);
    _instance.downloadErrorSpreadsheet(outputStream);
  }
  
  public static dss.vector.solutions.ExcelImportHistory[] getAllHistory()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ExcelImportHistory.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static ExcelImportHistory lock(java.lang.String id)
  {
    ExcelImportHistory _instance = ExcelImportHistory.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static ExcelImportHistory unlock(java.lang.String id)
  {
    ExcelImportHistory _instance = ExcelImportHistory.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
