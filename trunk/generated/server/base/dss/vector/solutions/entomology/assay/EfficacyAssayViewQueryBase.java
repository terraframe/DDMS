package dss.vector.solutions.entomology.assay;

@com.runwaysdk.business.ClassSignature(hash = -776588635)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to EfficacyAssayView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  abstract  class EfficacyAssayViewQueryBase extends com.runwaysdk.query.GeneratedViewQuery
 implements com.runwaysdk.generation.loader.Reloadable
{

  public EfficacyAssayViewQueryBase(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
  }

  public EfficacyAssayViewQueryBase(com.runwaysdk.query.QueryFactory componentQueryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(componentQueryFactory, viewQueryBuilder);
  }
  public String getClassType()
  {
    return dss.vector.solutions.entomology.assay.EfficacyAssayView.CLASS;
  }
  public dss.vector.solutions.entomology.assay.AdultAgeRangeQuery.AdultAgeRangeQueryStructIF getAgeRange()
  {
    return getAgeRange(null);

  }
 
  public dss.vector.solutions.entomology.assay.AdultAgeRangeQuery.AdultAgeRangeQueryStructIF getAgeRange(String alias)
  {
    return (dss.vector.solutions.entomology.assay.AdultAgeRangeQuery.AdultAgeRangeQueryStructIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.AGERANGE, alias, null);

  }
 
  public dss.vector.solutions.entomology.assay.AdultAgeRangeQuery.AdultAgeRangeQueryStructIF getAgeRange(String alias, String displayLabel)
  {
    return (dss.vector.solutions.entomology.assay.AdultAgeRangeQuery.AdultAgeRangeQueryStructIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.AGERANGE, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableChar getColonyName()
  {
    return getColonyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getColonyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.COLONYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getColonyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.COLONYNAME, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableChar getConcreteId()
  {
    return getConcreteId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getConcreteId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.CONCRETEID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getConcreteId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.CONCRETEID, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableFloat getControlTestMortality()
  {
    return getControlTestMortality(null);

  }
 
  public com.runwaysdk.query.SelectableFloat getControlTestMortality(String alias)
  {
    return (com.runwaysdk.query.SelectableFloat)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.CONTROLTESTMORTALITY, alias, null);

  }
 
  public com.runwaysdk.query.SelectableFloat getControlTestMortality(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableFloat)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.CONTROLTESTMORTALITY, alias, displayLabel);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease()
  {
    return getDisease(null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias)
  {

    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.DISEASE, alias, null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel)
  {

    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.DISEASE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getExposureTime()
  {
    return getExposureTime(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getExposureTime(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.EXPOSURETIME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getExposureTime(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.EXPOSURETIME, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getFed()
  {
    return getFed(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getFed(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.FED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getFed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.FED, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableChar getGeoId()
  {
    return getGeoId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeoId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.GEOID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getGeoId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.GEOID, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getGravid()
  {
    return getGravid(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getGravid(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.GRAVID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getGravid(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.GRAVID, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getHoldingTime()
  {
    return getHoldingTime(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getHoldingTime(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.HOLDINGTIME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getHoldingTime(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.HOLDINGTIME, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.ID, alias, displayLabel);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getInsecticideBrand()
  {
    return getInsecticideBrand(null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getInsecticideBrand(String alias)
  {

    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.INSECTICIDEBRAND, alias, null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getInsecticideBrand(String alias, String displayLabel)
  {

    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.INSECTICIDEBRAND, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableFloat getMortality()
  {
    return getMortality(null);

  }
 
  public com.runwaysdk.query.SelectableFloat getMortality(String alias)
  {
    return (com.runwaysdk.query.SelectableFloat)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.MORTALITY, alias, null);

  }
 
  public com.runwaysdk.query.SelectableFloat getMortality(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableFloat)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.MORTALITY, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getQuantityDead()
  {
    return getQuantityDead(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getQuantityDead(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.QUANTITYDEAD, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getQuantityDead(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.QUANTITYDEAD, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getQuantityLive()
  {
    return getQuantityLive(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getQuantityLive(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.QUANTITYLIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getQuantityLive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.QUANTITYLIVE, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getQuantityTested()
  {
    return getQuantityTested(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getQuantityTested(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.QUANTITYTESTED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getQuantityTested(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.QUANTITYTESTED, alias, displayLabel);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex()
  {
    return getSex(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.SEX, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.SEX, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSpecie()
  {
    return getSpecie(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSpecie(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.SPECIE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSpecie(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.SPECIE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSurfacePostion()
  {
    return getSurfacePostion(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSurfacePostion(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.SURFACEPOSTION, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSurfacePostion(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.SURFACEPOSTION, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSurfaceType()
  {
    return getSurfaceType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSurfaceType(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.SURFACETYPE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSurfaceType(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.SURFACETYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getTestDate()
  {
    return getTestDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTestDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.TESTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTestDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.TESTDATE, alias, displayLabel);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestMethod()
  {
    return getTestMethod(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestMethod(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.TESTMETHOD, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestMethod(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.TESTMETHOD, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getTimeOnSurface()
  {
    return getTimeOnSurface(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTimeOnSurface(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.TIMEONSURFACE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTimeOnSurface(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.assay.EfficacyAssayView.TIMEONSURFACE, alias, displayLabel);

  }
 
  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  @java.lang.SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends EfficacyAssayView> getIterator()
  {
    com.runwaysdk.query.ValueIterator valueIterator;
    if (_pageSize != null && _pageNumber != null)
    {
      valueIterator = (com.runwaysdk.query.ValueIterator<com.runwaysdk.dataaccess.ValueObject>)this.getComponentQuery().getIterator(_pageSize, _pageNumber);
    }
    else
    {
      valueIterator = (com.runwaysdk.query.ValueIterator<com.runwaysdk.dataaccess.ValueObject>)this.getComponentQuery().getIterator();
    }
    return new com.runwaysdk.query.ViewIterator<EfficacyAssayView>(this.getMdClassIF(), valueIterator);
  }

}
