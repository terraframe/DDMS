/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.entomology;

@com.runwaysdk.business.ClassSignature(hash = 909022899)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to PupalContainer.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class PupalContainerBase extends com.runwaysdk.business.Business implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.entomology.PupalContainer";
  public static java.lang.String CONTAINERID = "containerId";
  public static java.lang.String CONTAINERLENGTH = "containerLength";
  public static java.lang.String CONTAINERTYPE = "containerType";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CREATEDBY = "createdBy";
  public static java.lang.String DIAMETER = "diameter";
  public static java.lang.String DRAWDOWNFREQUENCY = "drawdownFrequency";
  public static java.lang.String DRAWDOWNPERCENT = "drawdownPercent";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String FILLFREQUENCY = "fillFrequency";
  public static java.lang.String FILLMETHOD = "fillMethod";
  public static java.lang.String HEIGHT = "height";
  public static java.lang.String ID = "id";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String LID = "lid";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String OPENINGDIAMETER = "openingDiameter";
  public static java.lang.String OPENINGLENGTH = "openingLength";
  public static java.lang.String OPENINGWIDTH = "openingWidth";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String PREMISE = "premise";
  public static java.lang.String ROOF = "roof";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String SHADING = "shading";
  public static java.lang.String SHAPE = "shape";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String TYPE = "type";
  public static java.lang.String WIDTH = "width";
  private static final long serialVersionUID = 909022899;
  
  public PupalContainerBase()
  {
    super();
  }
  
  public String getContainerId()
  {
    return getValue(CONTAINERID);
  }
  
  public void validateContainerId()
  {
    this.validateAttribute(CONTAINERID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getContainerIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CONTAINERID);
  }
  
  public void setContainerId(String value)
  {
    if(value == null)
    {
      setValue(CONTAINERID, "");
    }
    else
    {
      setValue(CONTAINERID, value);
    }
  }
  
  public java.math.BigDecimal getContainerLength()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(CONTAINERLENGTH));
  }
  
  public void validateContainerLength()
  {
    this.validateAttribute(CONTAINERLENGTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getContainerLengthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(CONTAINERLENGTH);
  }
  
  public void setContainerLength(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(CONTAINERLENGTH, "");
    }
    else
    {
      setValue(CONTAINERLENGTH, value.toString());
    }
  }
  
  public dss.vector.solutions.ontology.Term getContainerType()
  {
    if (getValue(CONTAINERTYPE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(CONTAINERTYPE));
    }
  }
  
  public String getContainerTypeId()
  {
    return getValue(CONTAINERTYPE);
  }
  
  public void validateContainerType()
  {
    this.validateAttribute(CONTAINERTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getContainerTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(CONTAINERTYPE);
  }
  
  public void setContainerType(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(CONTAINERTYPE, "");
    }
    else
    {
      setValue(CONTAINERTYPE, value.getId());
    }
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getCreatedBy()
  {
    if (getValue(CREATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(CREATEDBY));
    }
  }
  
  public String getCreatedById()
  {
    return getValue(CREATEDBY);
  }
  
  public void validateCreatedBy()
  {
    this.validateAttribute(CREATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getCreatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(CREATEDBY);
  }
  
  public java.math.BigDecimal getDiameter()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(DIAMETER));
  }
  
  public void validateDiameter()
  {
    this.validateAttribute(DIAMETER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getDiameterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(DIAMETER);
  }
  
  public void setDiameter(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(DIAMETER, "");
    }
    else
    {
      setValue(DIAMETER, value.toString());
    }
  }
  
  public dss.vector.solutions.ontology.Term getDrawdownFrequency()
  {
    if (getValue(DRAWDOWNFREQUENCY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(DRAWDOWNFREQUENCY));
    }
  }
  
  public String getDrawdownFrequencyId()
  {
    return getValue(DRAWDOWNFREQUENCY);
  }
  
  public void validateDrawdownFrequency()
  {
    this.validateAttribute(DRAWDOWNFREQUENCY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getDrawdownFrequencyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(DRAWDOWNFREQUENCY);
  }
  
  public void setDrawdownFrequency(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(DRAWDOWNFREQUENCY, "");
    }
    else
    {
      setValue(DRAWDOWNFREQUENCY, value.getId());
    }
  }
  
  public Integer getDrawdownPercent()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(DRAWDOWNPERCENT));
  }
  
  public void validateDrawdownPercent()
  {
    this.validateAttribute(DRAWDOWNPERCENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF getDrawdownPercentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeIntegerDAOIF)mdClassIF.definesAttribute(DRAWDOWNPERCENT);
  }
  
  public void setDrawdownPercent(Integer value)
  {
    if(value == null)
    {
      setValue(DRAWDOWNPERCENT, "");
    }
    else
    {
      setValue(DRAWDOWNPERCENT, java.lang.Integer.toString(value));
    }
  }
  
  public com.runwaysdk.system.metadata.MdDomain getEntityDomain()
  {
    if (getValue(ENTITYDOMAIN).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
  }
  
  public String getEntityDomainId()
  {
    return getValue(ENTITYDOMAIN);
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getEntityDomainMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.runwaysdk.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getFillFrequency()
  {
    if (getValue(FILLFREQUENCY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(FILLFREQUENCY));
    }
  }
  
  public String getFillFrequencyId()
  {
    return getValue(FILLFREQUENCY);
  }
  
  public void validateFillFrequency()
  {
    this.validateAttribute(FILLFREQUENCY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getFillFrequencyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(FILLFREQUENCY);
  }
  
  public void setFillFrequency(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(FILLFREQUENCY, "");
    }
    else
    {
      setValue(FILLFREQUENCY, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getFillMethod()
  {
    if (getValue(FILLMETHOD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(FILLMETHOD));
    }
  }
  
  public String getFillMethodId()
  {
    return getValue(FILLMETHOD);
  }
  
  public void validateFillMethod()
  {
    this.validateAttribute(FILLMETHOD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getFillMethodMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(FILLMETHOD);
  }
  
  public void setFillMethod(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(FILLMETHOD, "");
    }
    else
    {
      setValue(FILLMETHOD, value.getId());
    }
  }
  
  public java.math.BigDecimal getHeight()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(HEIGHT));
  }
  
  public void validateHeight()
  {
    this.validateAttribute(HEIGHT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getHeightMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(HEIGHT);
  }
  
  public void setHeight(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(HEIGHT, "");
    }
    else
    {
      setValue(HEIGHT, value.toString());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getKeyName()
  {
    return getValue(KEYNAME);
  }
  
  public void validateKeyName()
  {
    this.validateAttribute(KEYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getKeyNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(KEYNAME);
  }
  
  public void setKeyName(String value)
  {
    if(value == null)
    {
      setValue(KEYNAME, "");
    }
    else
    {
      setValue(KEYNAME, value);
    }
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTUPDATEDATE));
  }
  
  public void validateLastUpdateDate()
  {
    this.validateAttribute(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getLastUpdatedBy()
  {
    if (getValue(LASTUPDATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LASTUPDATEDBY));
    }
  }
  
  public String getLastUpdatedById()
  {
    return getValue(LASTUPDATEDBY);
  }
  
  public void validateLastUpdatedBy()
  {
    this.validateAttribute(LASTUPDATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLastUpdatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LASTUPDATEDBY);
  }
  
  public dss.vector.solutions.ontology.Term getLid()
  {
    if (getValue(LID).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(LID));
    }
  }
  
  public String getLidId()
  {
    return getValue(LID);
  }
  
  public void validateLid()
  {
    this.validateAttribute(LID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LID);
  }
  
  public void setLid(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(LID, "");
    }
    else
    {
      setValue(LID, value.getId());
    }
  }
  
  public com.runwaysdk.system.SingleActor getLockedBy()
  {
    if (getValue(LOCKEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LOCKEDBY));
    }
  }
  
  public String getLockedById()
  {
    return getValue(LOCKEDBY);
  }
  
  public void validateLockedBy()
  {
    this.validateAttribute(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  public java.math.BigDecimal getOpeningDiameter()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(OPENINGDIAMETER));
  }
  
  public void validateOpeningDiameter()
  {
    this.validateAttribute(OPENINGDIAMETER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getOpeningDiameterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(OPENINGDIAMETER);
  }
  
  public void setOpeningDiameter(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(OPENINGDIAMETER, "");
    }
    else
    {
      setValue(OPENINGDIAMETER, value.toString());
    }
  }
  
  public java.math.BigDecimal getOpeningLength()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(OPENINGLENGTH));
  }
  
  public void validateOpeningLength()
  {
    this.validateAttribute(OPENINGLENGTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getOpeningLengthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(OPENINGLENGTH);
  }
  
  public void setOpeningLength(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(OPENINGLENGTH, "");
    }
    else
    {
      setValue(OPENINGLENGTH, value.toString());
    }
  }
  
  public java.math.BigDecimal getOpeningWidth()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(OPENINGWIDTH));
  }
  
  public void validateOpeningWidth()
  {
    this.validateAttribute(OPENINGWIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getOpeningWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(OPENINGWIDTH);
  }
  
  public void setOpeningWidth(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(OPENINGWIDTH, "");
    }
    else
    {
      setValue(OPENINGWIDTH, value.toString());
    }
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (getValue(OWNER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(OWNER));
    }
  }
  
  public String getOwnerId()
  {
    return getValue(OWNER);
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getId());
    }
  }
  
  public dss.vector.solutions.entomology.PupalPremise getPremise()
  {
    if (getValue(PREMISE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.entomology.PupalPremise.get(getValue(PREMISE));
    }
  }
  
  public String getPremiseId()
  {
    return getValue(PREMISE);
  }
  
  public void validatePremise()
  {
    this.validateAttribute(PREMISE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getPremiseMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(PREMISE);
  }
  
  public void setPremise(dss.vector.solutions.entomology.PupalPremise value)
  {
    if(value == null)
    {
      setValue(PREMISE, "");
    }
    else
    {
      setValue(PREMISE, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getRoof()
  {
    if (getValue(ROOF).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(ROOF));
    }
  }
  
  public String getRoofId()
  {
    return getValue(ROOF);
  }
  
  public void validateRoof()
  {
    this.validateAttribute(ROOF);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getRoofMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ROOF);
  }
  
  public void setRoof(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(ROOF, "");
    }
    else
    {
      setValue(ROOF, value.getId());
    }
  }
  
  public Long getSeq()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SEQ));
  }
  
  public void validateSeq()
  {
    this.validateAttribute(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public dss.vector.solutions.ontology.Term getShading()
  {
    if (getValue(SHADING).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(SHADING));
    }
  }
  
  public String getShadingId()
  {
    return getValue(SHADING);
  }
  
  public void validateShading()
  {
    this.validateAttribute(SHADING);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getShadingMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(SHADING);
  }
  
  public void setShading(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(SHADING, "");
    }
    else
    {
      setValue(SHADING, value.getId());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.entomology.ContainerShape> getShape()
  {
    return (java.util.List<dss.vector.solutions.entomology.ContainerShape>) getEnumValues(SHAPE);
  }
  
  public void addShape(dss.vector.solutions.entomology.ContainerShape value)
  {
    if(value != null)
    {
      addEnumItem(SHAPE, value.getId());
    }
  }
  
  public void removeShape(dss.vector.solutions.entomology.ContainerShape value)
  {
    if(value != null)
    {
      removeEnumItem(SHAPE, value.getId());
    }
  }
  
  public void clearShape()
  {
    clearEnum(SHAPE);
  }
  
  public void validateShape()
  {
    this.validateAttribute(SHAPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF getShapeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdClassIF.definesAttribute(SHAPE);
  }
  
  public String getSiteMaster()
  {
    return getValue(SITEMASTER);
  }
  
  public void validateSiteMaster()
  {
    this.validateAttribute(SITEMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSiteMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SITEMASTER);
  }
  
  public String getType()
  {
    return getValue(TYPE);
  }
  
  public void validateType()
  {
    this.validateAttribute(TYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TYPE);
  }
  
  public java.math.BigDecimal getWidth()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(WIDTH));
  }
  
  public void validateWidth()
  {
    this.validateAttribute(WIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF getWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainer.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDecimalDAOIF)mdClassIF.definesAttribute(WIDTH);
  }
  
  public void setWidth(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(WIDTH, "");
    }
    else
    {
      setValue(WIDTH, value.toString());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static PupalContainerQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    PupalContainerQuery query = new PupalContainerQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public dss.vector.solutions.entomology.PupalContainerAmount addPupal(dss.vector.solutions.ontology.Term term)
  {
    return (dss.vector.solutions.entomology.PupalContainerAmount) addChild(term, dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
  }
  
  public void removePupal(dss.vector.solutions.ontology.Term term)
  {
    removeAllChildren(term, dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.Term> getAllPupal()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.Term>) getChildren(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainerAmount> getAllPupalRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainerAmount>) getChildRelationships(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.entomology.PupalContainerAmount getPupalRel(dss.vector.solutions.ontology.Term term)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainerAmount> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainerAmount>) getRelationshipsWithChild(term, dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static PupalContainer get(String id)
  {
    return (PupalContainer) com.runwaysdk.business.Business.get(id);
  }
  
  public static PupalContainer getByKey(String key)
  {
    return (PupalContainer) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public dss.vector.solutions.entomology.PupalContainerView getView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.PupalContainer.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.PupalContainerView getView(java.lang.String id)
  {
    PupalContainer _instance = PupalContainer.get(id);
    return _instance.getView();
  }
  
  public static PupalContainer lock(java.lang.String id)
  {
    PupalContainer _instance = PupalContainer.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static PupalContainer unlock(java.lang.String id)
  {
    PupalContainer _instance = PupalContainer.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
