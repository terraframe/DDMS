package dss.vector.solutions.entomology;

@com.runwaysdk.business.ClassSignature(hash = -539698499)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ImmatureThresholdView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ImmatureThresholdViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.entomology.ImmatureThresholdView";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String DISPLAYLABEL = "displayLabel";
  private com.runwaysdk.business.Struct displayLabel = null;
  
  public static java.lang.String ID = "id";
  public static java.lang.String THRESHOLDINDEX = "thresholdIndex";
  public static java.lang.String THRESHOLDVALUE = "thresholdValue";
  private static final long serialVersionUID = -539698499;
  
  public ImmatureThresholdViewBase()
  {
    super();
    displayLabel = super.getStruct("displayLabel");
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ImmatureThresholdView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public dss.vector.solutions.entomology.ImmatureThresholdDisplayLabel getDisplayLabel()
  {
    return (dss.vector.solutions.entomology.ImmatureThresholdDisplayLabel) displayLabel;
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ImmatureThresholdView.CLASS);
    return mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ImmatureThresholdView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getThresholdIndex()
  {
    return getValue(THRESHOLDINDEX);
  }
  
  public void validateThresholdIndex()
  {
    this.validateAttribute(THRESHOLDINDEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getThresholdIndexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ImmatureThresholdView.CLASS);
    return mdClassIF.definesAttribute(THRESHOLDINDEX);
  }
  
  public void setThresholdIndex(String value)
  {
    if(value == null)
    {
      setValue(THRESHOLDINDEX, "");
    }
    else
    {
      setValue(THRESHOLDINDEX, value);
    }
  }
  
  public java.math.BigDecimal getThresholdValue()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(THRESHOLDVALUE));
  }
  
  public void validateThresholdValue()
  {
    this.validateAttribute(THRESHOLDVALUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getThresholdValueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ImmatureThresholdView.CLASS);
    return mdClassIF.definesAttribute(THRESHOLDVALUE);
  }
  
  public void setThresholdValue(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(THRESHOLDVALUE, "");
    }
    else
    {
      setValue(THRESHOLDVALUE, value.toString());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ImmatureThresholdView get(String id)
  {
    return (ImmatureThresholdView) com.runwaysdk.business.View.get(id);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.ImmatureThresholdView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    ImmatureThresholdView _instance = ImmatureThresholdView.get(id);
    _instance.deleteConcrete();
  }
  
  public static dss.vector.solutions.entomology.ImmatureThresholdViewQuery getPage(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.ImmatureThresholdView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
