package dss.vector.solutions.entomology;

@com.runwaysdk.business.ClassSignature(hash = -84098217)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ImmatureCollectionView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  abstract  class ImmatureCollectionViewQueryBase extends com.runwaysdk.query.GeneratedViewQuery
 implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = -84098217;

  public ImmatureCollectionViewQueryBase(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
  }

  public ImmatureCollectionViewQueryBase(com.runwaysdk.query.QueryFactory componentQueryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(componentQueryFactory, viewQueryBuilder);
  }
  public String getClassType()
  {
    return dss.vector.solutions.entomology.ImmatureCollectionView.CLASS;
  }
  public com.runwaysdk.query.SelectableChar getCollectionId()
  {
    return getCollectionId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getCollectionId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.COLLECTIONID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getCollectionId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.COLLECTIONID, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableChar getConcreteId()
  {
    return getConcreteId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getConcreteId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.CONCRETEID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getConcreteId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.CONCRETEID, alias, displayLabel);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerGrid()
  {
    return getContainerGrid(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerGrid(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.CONTAINERGRID, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getContainerGrid(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.CONTAINERGRID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getEndDate()
  {
    return getEndDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getEndDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.ENDDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getEndDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.ENDDATE, alias, displayLabel);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity()
  {
    return getGeoEntity(null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias)
  {

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.GEOENTITY, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias, String displayLabel)
  {

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.GEOENTITY, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.ID, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableChar getNotes()
  {
    return getNotes(null);

  }
 
  public com.runwaysdk.query.SelectableChar getNotes(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NOTES, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getNotes(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NOTES, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberExamined()
  {
    return getNumberExamined(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberExamined(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBEREXAMINED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberExamined(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBEREXAMINED, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberInhabitants()
  {
    return getNumberInhabitants(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberInhabitants(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBERINHABITANTS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberInhabitants(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBERINHABITANTS, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberWithImmatures()
  {
    return getNumberWithImmatures(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberWithImmatures(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBERWITHIMMATURES, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberWithImmatures(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBERWITHIMMATURES, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberWithLarvae()
  {
    return getNumberWithLarvae(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberWithLarvae(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBERWITHLARVAE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberWithLarvae(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBERWITHLARVAE, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberWithPupae()
  {
    return getNumberWithPupae(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberWithPupae(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBERWITHPUPAE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberWithPupae(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.NUMBERWITHPUPAE, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableChar getPremiseId()
  {
    return getPremiseId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getPremiseId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.PREMISEID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getPremiseId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.PREMISEID, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableDecimal getPremiseSize()
  {
    return getPremiseSize(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getPremiseSize(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.PREMISESIZE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getPremiseSize(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.PREMISESIZE, alias, displayLabel);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPremiseType()
  {
    return getPremiseType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPremiseType(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.PREMISETYPE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPremiseType(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.PREMISETYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getStartDate()
  {
    return getStartDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getStartDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.STARTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getStartDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.STARTDATE, alias, displayLabel);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTaxon()
  {
    return getTaxon(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTaxon(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.TAXON, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTaxon(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.TAXON, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getTaxonId()
  {
    return getTaxonId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getTaxonId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.TAXONID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getTaxonId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.entomology.ImmatureCollectionView.TAXONID, alias, displayLabel);

  }
 
  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  @java.lang.SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends ImmatureCollectionView> getIterator()
  {
    com.runwaysdk.query.ValueIterator valueIterator;
    if (_pageSize != null && _pageNumber != null)
    {
      valueIterator = (com.runwaysdk.query.ValueIterator<com.runwaysdk.dataaccess.ValueObject>)this.getComponentQuery().getIterator(_pageSize, _pageNumber);
    }
    else
    {
      valueIterator = (com.runwaysdk.query.ValueIterator<com.runwaysdk.dataaccess.ValueObject>)this.getComponentQuery().getIterator();
    }
    return new com.runwaysdk.query.ViewIterator<ImmatureCollectionView>(this.getMdClassIF(), valueIterator);
  }

}
