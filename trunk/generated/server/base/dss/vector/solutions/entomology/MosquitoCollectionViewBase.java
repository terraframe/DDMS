package dss.vector.solutions.entomology;

@com.terraframe.mojo.business.ClassSignature(hash = -926842203)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MosquitoCollectionView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class MosquitoCollectionViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.entomology.MosquitoCollectionView";
  public static java.lang.String ABUNDANCE = "abundance";
  public static java.lang.String COLLECTIONDATE = "collectionDate";
  public static java.lang.String COLLECTIONID = "collectionId";
  public static java.lang.String COLLECTIONMETHOD = "collectionMethod";
  public static java.lang.String COLLECTIONMETHODLABEL = "collectionMethodLabel";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String GEOENTITY = "geoEntity";
  public static java.lang.String GEOENTITYLABEL = "geoEntityLabel";
  public static java.lang.String ID = "id";
  public static java.lang.String LIFESTAGE = "lifeStage";
  private static final long serialVersionUID = -926842203;
  
  public MosquitoCollectionViewBase()
  {
    super();
  }
  
  public Boolean getAbundance()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ABUNDANCE));
  }
  
  public void validateAbundance()
  {
    this.validateAttribute(ABUNDANCE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAbundanceMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(ABUNDANCE);
  }
  
  public void setAbundance(Boolean value)
  {
    if(value == null)
    {
      setValue(ABUNDANCE, "");
    }
    else
    {
      setValue(ABUNDANCE, java.lang.Boolean.toString(value));
    }
  }
  
  public java.util.Date getCollectionDate()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(COLLECTIONDATE));
  }
  
  public void validateCollectionDate()
  {
    this.validateAttribute(COLLECTIONDATE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getCollectionDateMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(COLLECTIONDATE);
  }
  
  public void setCollectionDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(COLLECTIONDATE, "");
    }
    else
    {
      setValue(COLLECTIONDATE, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getCollectionId()
  {
    return getValue(COLLECTIONID);
  }
  
  public void validateCollectionId()
  {
    this.validateAttribute(COLLECTIONID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getCollectionIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(COLLECTIONID);
  }
  
  public void setCollectionId(String value)
  {
    if(value == null)
    {
      setValue(COLLECTIONID, "");
    }
    else
    {
      setValue(COLLECTIONID, value);
    }
  }
  
  public dss.vector.solutions.ontology.Term getCollectionMethod()
  {
    if (getValue(COLLECTIONMETHOD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(COLLECTIONMETHOD));
    }
  }
  
  public void validateCollectionMethod()
  {
    this.validateAttribute(COLLECTIONMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getCollectionMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(COLLECTIONMETHOD);
  }
  
  public void setCollectionMethod(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(COLLECTIONMETHOD, "");
    }
    else
    {
      setValue(COLLECTIONMETHOD, value.getId());
    }
  }
  
  public String getCollectionMethodLabel()
  {
    return getValue(COLLECTIONMETHODLABEL);
  }
  
  public void validateCollectionMethodLabel()
  {
    this.validateAttribute(COLLECTIONMETHODLABEL);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getCollectionMethodLabelMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(COLLECTIONMETHODLABEL);
  }
  
  public void setCollectionMethodLabel(String value)
  {
    if(value == null)
    {
      setValue(COLLECTIONMETHODLABEL, "");
    }
    else
    {
      setValue(COLLECTIONMETHODLABEL, value);
    }
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getGeoEntity()
  {
    if (getValue(GEOENTITY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(GEOENTITY));
    }
  }
  
  public void validateGeoEntity()
  {
    this.validateAttribute(GEOENTITY);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGeoEntityMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(GEOENTITY);
  }
  
  public void setGeoEntity(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(GEOENTITY, "");
    }
    else
    {
      setValue(GEOENTITY, value.getId());
    }
  }
  
  public String getGeoEntityLabel()
  {
    return getValue(GEOENTITYLABEL);
  }
  
  public void validateGeoEntityLabel()
  {
    this.validateAttribute(GEOENTITYLABEL);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGeoEntityLabelMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(GEOENTITYLABEL);
  }
  
  public void setGeoEntityLabel(String value)
  {
    if(value == null)
    {
      setValue(GEOENTITYLABEL, "");
    }
    else
    {
      setValue(GEOENTITYLABEL, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.entomology.LifeStage> getLifeStage()
  {
    return (java.util.List<dss.vector.solutions.entomology.LifeStage>) getEnumValues(LIFESTAGE);
  }
  
  public void addLifeStage(dss.vector.solutions.entomology.LifeStage value)
  {
    if(value != null)
    {
      addEnumItem(LIFESTAGE, value.getId());
    }
  }
  
  public void removeLifeStage(dss.vector.solutions.entomology.LifeStage value)
  {
    if(value != null)
    {
      removeEnumItem(LIFESTAGE, value.getId());
    }
  }
  
  public void clearLifeStage()
  {
    clearEnum(LIFESTAGE);
  }
  
  public void validateLifeStage()
  {
    this.validateAttribute(LIFESTAGE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getLifeStageMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return mdClassIF.definesAttribute(LIFESTAGE);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MosquitoCollectionView get(String id)
  {
    return (MosquitoCollectionView) com.terraframe.mojo.business.View.get(id);
  }
  
  public dss.vector.solutions.entomology.SubCollectionView[] applyAll(dss.vector.solutions.entomology.SubCollectionView[] subCollections)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.SubCollectionView[] applyAll(java.lang.String id, dss.vector.solutions.entomology.SubCollectionView[] subCollections)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.applyAll(subCollections);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    _instance.deleteConcrete();
  }
  
  public dss.vector.solutions.entomology.assay.AdultDiscriminatingDoseAssayQuery getAdultDoseAssays(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.assay.AdultDiscriminatingDoseAssayQuery getAdultDoseAssays(java.lang.String id, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getAdultDoseAssays(sortAttribute, isAscending, pageSize, pageNumber);
  }
  
  public dss.vector.solutions.entomology.BiochemicalAssayView[] getBiochemicalAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.BiochemicalAssayView[] getBiochemicalAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getBiochemicalAssays();
  }
  
  public static dss.vector.solutions.entomology.MosquitoCollectionView getCollection(dss.vector.solutions.entomology.MosquitoCollectionView collection)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.entomology.InfectionAssayView[] getInfectionAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.InfectionAssayView[] getInfectionAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getInfectionAssays();
  }
  
  public dss.vector.solutions.entomology.assay.KnockDownAssayQuery getKnockDownAssays(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.assay.KnockDownAssayQuery getKnockDownAssays(java.lang.String id, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getKnockDownAssays(sortAttribute, isAscending, pageSize, pageNumber);
  }
  
  public dss.vector.solutions.entomology.assay.LarvaeDiscriminatingDoseAssayQuery getLarvaeDoseAssays(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.assay.LarvaeDiscriminatingDoseAssayQuery getLarvaeDoseAssays(java.lang.String id, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getLarvaeDoseAssays(sortAttribute, isAscending, pageSize, pageNumber);
  }
  
  public dss.vector.solutions.entomology.MolecularAssayView[] getMolecularAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.MolecularAssayView[] getMolecularAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getMolecularAssays();
  }
  
  public static dss.vector.solutions.entomology.MosquitoCollectionViewQuery getMostRecent()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.entomology.PooledInfectionAssayView[] getPooledInfectionAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.PooledInfectionAssayView[] getPooledInfectionAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getPooledInfectionAssays();
  }
  
  public dss.vector.solutions.entomology.SubCollectionView[] getSubCollections()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.SubCollectionView[] getSubCollections(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getSubCollections();
  }
  
  public static dss.vector.solutions.entomology.MosquitoCollectionViewQuery searchCollection(java.lang.String value)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.entomology.MosquitoCollectionViewQuery searchCollections(dss.vector.solutions.entomology.SearchMosquitoCollectionView collection, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
