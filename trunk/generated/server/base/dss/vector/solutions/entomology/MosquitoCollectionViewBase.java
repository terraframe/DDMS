/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.entomology;

@com.runwaysdk.business.ClassSignature(hash = 1355517589)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MosquitoCollectionView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MosquitoCollectionViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.entomology.MosquitoCollectionView";
  public static java.lang.String ABUNDANCE = "abundance";
  public static java.lang.String COLLECTIONDATE = "collectionDate";
  public static java.lang.String COLLECTIONID = "collectionId";
  public static java.lang.String COLLECTIONMETHOD = "collectionMethod";
  public static java.lang.String COLLECTIONROUND = "collectionRound";
  public static java.lang.String COLLECTIONTYPE = "collectionType";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String DATELASTSPRAYED = "dateLastSprayed";
  public static java.lang.String GEOENTITY = "geoEntity";
  public static java.lang.String ID = "id";
  public static java.lang.String INSECTICIDEBRAND = "insecticideBrand";
  public static java.lang.String LIFESTAGE = "lifeStage";
  public static java.lang.String NUMBEROFANIMALOCCUPANTS = "numberOfAnimalOccupants";
  public static java.lang.String NUMBEROFHUMANOCCUPANTS = "numberOfHumanOccupants";
  public static java.lang.String NUMBEROFLLINS = "numberOfLLINs";
  public static java.lang.String RESISTANCEASSAYCOMMENTS = "resistanceAssayComments";
  public static java.lang.String WALLTYPE = "wallType";
  private static final long serialVersionUID = 1355517589;
  
  public MosquitoCollectionViewBase()
  {
    super();
  }
  
  public Boolean getAbundance()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ABUNDANCE));
  }
  
  public void validateAbundance()
  {
    this.validateAttribute(ABUNDANCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getAbundanceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(ABUNDANCE);
  }
  
  public void setAbundance(Boolean value)
  {
    if(value == null)
    {
      setValue(ABUNDANCE, "");
    }
    else
    {
      setValue(ABUNDANCE, java.lang.Boolean.toString(value));
    }
  }
  
  public java.util.Date getCollectionDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(COLLECTIONDATE));
  }
  
  public void validateCollectionDate()
  {
    this.validateAttribute(COLLECTIONDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getCollectionDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(COLLECTIONDATE);
  }
  
  public void setCollectionDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(COLLECTIONDATE, "");
    }
    else
    {
      setValue(COLLECTIONDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getCollectionId()
  {
    return getValue(COLLECTIONID);
  }
  
  public void validateCollectionId()
  {
    this.validateAttribute(COLLECTIONID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getCollectionIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(COLLECTIONID);
  }
  
  public void setCollectionId(String value)
  {
    if(value == null)
    {
      setValue(COLLECTIONID, "");
    }
    else
    {
      setValue(COLLECTIONID, value);
    }
  }
  
  public dss.vector.solutions.ontology.Term getCollectionMethod()
  {
    if (getValue(COLLECTIONMETHOD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(COLLECTIONMETHOD));
    }
  }
  
  public String getCollectionMethodId()
  {
    return getValue(COLLECTIONMETHOD);
  }
  
  public void validateCollectionMethod()
  {
    this.validateAttribute(COLLECTIONMETHOD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getCollectionMethodMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(COLLECTIONMETHOD);
  }
  
  public void setCollectionMethod(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(COLLECTIONMETHOD, "");
    }
    else
    {
      setValue(COLLECTIONMETHOD, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getCollectionRound()
  {
    if (getValue(COLLECTIONROUND).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(COLLECTIONROUND));
    }
  }
  
  public String getCollectionRoundId()
  {
    return getValue(COLLECTIONROUND);
  }
  
  public void validateCollectionRound()
  {
    this.validateAttribute(COLLECTIONROUND);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getCollectionRoundMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(COLLECTIONROUND);
  }
  
  public void setCollectionRound(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(COLLECTIONROUND, "");
    }
    else
    {
      setValue(COLLECTIONROUND, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getCollectionType()
  {
    if (getValue(COLLECTIONTYPE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(COLLECTIONTYPE));
    }
  }
  
  public String getCollectionTypeId()
  {
    return getValue(COLLECTIONTYPE);
  }
  
  public void validateCollectionType()
  {
    this.validateAttribute(COLLECTIONTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getCollectionTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(COLLECTIONTYPE);
  }
  
  public void setCollectionType(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(COLLECTIONTYPE, "");
    }
    else
    {
      setValue(COLLECTIONTYPE, value.getId());
    }
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public java.util.Date getDateLastSprayed()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(DATELASTSPRAYED));
  }
  
  public void validateDateLastSprayed()
  {
    this.validateAttribute(DATELASTSPRAYED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getDateLastSprayedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(DATELASTSPRAYED);
  }
  
  public void setDateLastSprayed(java.util.Date value)
  {
    if(value == null)
    {
      setValue(DATELASTSPRAYED, "");
    }
    else
    {
      setValue(DATELASTSPRAYED, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getGeoEntity()
  {
    if (getValue(GEOENTITY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(GEOENTITY));
    }
  }
  
  public String getGeoEntityId()
  {
    return getValue(GEOENTITY);
  }
  
  public void validateGeoEntity()
  {
    this.validateAttribute(GEOENTITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getGeoEntityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(GEOENTITY);
  }
  
  public void setGeoEntity(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(GEOENTITY, "");
    }
    else
    {
      setValue(GEOENTITY, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.irs.InsecticideBrand getInsecticideBrand()
  {
    if (getValue(INSECTICIDEBRAND).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.InsecticideBrand.get(getValue(INSECTICIDEBRAND));
    }
  }
  
  public String getInsecticideBrandId()
  {
    return getValue(INSECTICIDEBRAND);
  }
  
  public void validateInsecticideBrand()
  {
    this.validateAttribute(INSECTICIDEBRAND);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getInsecticideBrandMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(INSECTICIDEBRAND);
  }
  
  public void setInsecticideBrand(dss.vector.solutions.irs.InsecticideBrand value)
  {
    if(value == null)
    {
      setValue(INSECTICIDEBRAND, "");
    }
    else
    {
      setValue(INSECTICIDEBRAND, value.getId());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.entomology.LifeStage> getLifeStage()
  {
    return (java.util.List<dss.vector.solutions.entomology.LifeStage>) getEnumValues(LIFESTAGE);
  }
  
  public void addLifeStage(dss.vector.solutions.entomology.LifeStage value)
  {
    if(value != null)
    {
      addEnumItem(LIFESTAGE, value.getId());
    }
  }
  
  public void removeLifeStage(dss.vector.solutions.entomology.LifeStage value)
  {
    if(value != null)
    {
      removeEnumItem(LIFESTAGE, value.getId());
    }
  }
  
  public void clearLifeStage()
  {
    clearEnum(LIFESTAGE);
  }
  
  public void validateLifeStage()
  {
    this.validateAttribute(LIFESTAGE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getLifeStageMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(LIFESTAGE);
  }
  
  public Integer getNumberOfAnimalOccupants()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBEROFANIMALOCCUPANTS));
  }
  
  public void validateNumberOfAnimalOccupants()
  {
    this.validateAttribute(NUMBEROFANIMALOCCUPANTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getNumberOfAnimalOccupantsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(NUMBEROFANIMALOCCUPANTS);
  }
  
  public void setNumberOfAnimalOccupants(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBEROFANIMALOCCUPANTS, "");
    }
    else
    {
      setValue(NUMBEROFANIMALOCCUPANTS, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberOfHumanOccupants()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBEROFHUMANOCCUPANTS));
  }
  
  public void validateNumberOfHumanOccupants()
  {
    this.validateAttribute(NUMBEROFHUMANOCCUPANTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getNumberOfHumanOccupantsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(NUMBEROFHUMANOCCUPANTS);
  }
  
  public void setNumberOfHumanOccupants(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBEROFHUMANOCCUPANTS, "");
    }
    else
    {
      setValue(NUMBEROFHUMANOCCUPANTS, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberOfLLINs()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBEROFLLINS));
  }
  
  public void validateNumberOfLLINs()
  {
    this.validateAttribute(NUMBEROFLLINS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getNumberOfLLINsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(NUMBEROFLLINS);
  }
  
  public void setNumberOfLLINs(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBEROFLLINS, "");
    }
    else
    {
      setValue(NUMBEROFLLINS, java.lang.Integer.toString(value));
    }
  }
  
  public String getResistanceAssayComments()
  {
    return getValue(RESISTANCEASSAYCOMMENTS);
  }
  
  public void validateResistanceAssayComments()
  {
    this.validateAttribute(RESISTANCEASSAYCOMMENTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getResistanceAssayCommentsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(RESISTANCEASSAYCOMMENTS);
  }
  
  public void setResistanceAssayComments(String value)
  {
    if(value == null)
    {
      setValue(RESISTANCEASSAYCOMMENTS, "");
    }
    else
    {
      setValue(RESISTANCEASSAYCOMMENTS, value);
    }
  }
  
  public dss.vector.solutions.ontology.Term getWallType()
  {
    if (getValue(WALLTYPE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(WALLTYPE));
    }
  }
  
  public String getWallTypeId()
  {
    return getValue(WALLTYPE);
  }
  
  public void validateWallType()
  {
    this.validateAttribute(WALLTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getWallTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoCollectionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(WALLTYPE);
  }
  
  public void setWallType(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(WALLTYPE, "");
    }
    else
    {
      setValue(WALLTYPE, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MosquitoCollectionView get(String id)
  {
    return (MosquitoCollectionView) com.runwaysdk.business.View.get(id);
  }
  
  public dss.vector.solutions.entomology.SubCollectionView[] applyAll(dss.vector.solutions.entomology.SubCollectionView[] subCollections)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.SubCollectionView[] applyAll(java.lang.String id, dss.vector.solutions.entomology.SubCollectionView[] subCollections)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.applyAll(subCollections);
  }
  
  public static void deleteAllCollections(dss.vector.solutions.entomology.SearchMosquitoCollectionView criteria)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    _instance.deleteConcrete();
  }
  
  public dss.vector.solutions.entomology.assay.AdultDiscriminatingDoseAssayQuery getAdultDoseAssays(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.assay.AdultDiscriminatingDoseAssayQuery getAdultDoseAssays(java.lang.String id, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getAdultDoseAssays(sortAttribute, isAscending, pageSize, pageNumber);
  }
  
  public dss.vector.solutions.entomology.BiochemicalAssayView[] getBiochemicalAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.BiochemicalAssayView[] getBiochemicalAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getBiochemicalAssays();
  }
  
  public static dss.vector.solutions.entomology.MosquitoCollectionView getCollection(dss.vector.solutions.entomology.MosquitoCollectionView collection)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.entomology.DiagnosticAssayView[] getDiagnosticAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.DiagnosticAssayView[] getDiagnosticAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getDiagnosticAssays();
  }
  
  public dss.vector.solutions.entomology.InfectionAssayView[] getInfectionAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.InfectionAssayView[] getInfectionAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getInfectionAssays();
  }
  
  public dss.vector.solutions.entomology.assay.KnockDownAssayQuery getKnockDownAssays(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.assay.KnockDownAssayQuery getKnockDownAssays(java.lang.String id, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getKnockDownAssays(sortAttribute, isAscending, pageSize, pageNumber);
  }
  
  public dss.vector.solutions.entomology.assay.LarvaeDiscriminatingDoseAssayQuery getLarvaeDoseAssays(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.assay.LarvaeDiscriminatingDoseAssayQuery getLarvaeDoseAssays(java.lang.String id, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getLarvaeDoseAssays(sortAttribute, isAscending, pageSize, pageNumber);
  }
  
  public dss.vector.solutions.entomology.MolecularAssayView[] getMolecularAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.MolecularAssayView[] getMolecularAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getMolecularAssays();
  }
  
  public static dss.vector.solutions.entomology.MosquitoCollectionViewQuery getMostRecent()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.entomology.PooledInfectionAssayView[] getPooledInfectionAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.PooledInfectionAssayView[] getPooledInfectionAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getPooledInfectionAssays();
  }
  
  public dss.vector.solutions.entomology.SubCollectionView[] getSubCollections()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.SubCollectionView[] getSubCollections(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getSubCollections();
  }
  
  public dss.vector.solutions.entomology.TimeResponseAssayView[] getTimeResponseAssays()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.TimeResponseAssayView[] getTimeResponseAssays(java.lang.String id)
  {
    MosquitoCollectionView _instance = MosquitoCollectionView.get(id);
    return _instance.getTimeResponseAssays();
  }
  
  public static dss.vector.solutions.entomology.MosquitoCollectionView getViewByCollectionId(java.lang.String collectionId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static com.runwaysdk.query.ValueQuery searchByValueQuery(java.lang.String value)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.entomology.MosquitoCollectionViewQuery searchCollection(java.lang.String value)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.entomology.MosquitoCollectionViewQuery searchCollections(dss.vector.solutions.entomology.SearchMosquitoCollectionView collection, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoCollectionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
