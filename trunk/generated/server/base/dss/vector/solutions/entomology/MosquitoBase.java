package dss.vector.solutions.entomology;

@com.terraframe.mojo.business.ClassSignature(hash = -1486185904)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Mosquito.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class MosquitoBase extends dss.vector.solutions.entomology.TrueSpecieEntity implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.entomology.Mosquito";
  public static java.lang.String GENERATION = "generation";
  public static java.lang.String ISOFEMALE = "isofemale";
  public static java.lang.String SEX = "sex";
  public static java.lang.String TESTDATE = "testDate";
  private static final long serialVersionUID = -1486185904;
  
  public MosquitoBase()
  {
    super();
  }
  
  public dss.vector.solutions.ontology.Term getGeneration()
  {
    if (getValue(GENERATION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(GENERATION));
    }
  }
  
  public void validateGeneration()
  {
    this.validateAttribute(GENERATION);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGenerationMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.Mosquito.CLASS);
    return mdClassIF.definesAttribute(GENERATION);
  }
  
  public void setGeneration(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(GENERATION, "");
    }
    else
    {
      setValue(GENERATION, value.getId());
    }
  }
  
  public Boolean getIsofemale()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISOFEMALE));
  }
  
  public void validateIsofemale()
  {
    this.validateAttribute(ISOFEMALE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIsofemaleMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.Mosquito.CLASS);
    return mdClassIF.definesAttribute(ISOFEMALE);
  }
  
  public void setIsofemale(Boolean value)
  {
    if(value == null)
    {
      setValue(ISOFEMALE, "");
    }
    else
    {
      setValue(ISOFEMALE, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getSex()
  {
    if (getValue(SEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(SEX));
    }
  }
  
  public void validateSex()
  {
    this.validateAttribute(SEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.Mosquito.CLASS);
    return mdClassIF.definesAttribute(SEX);
  }
  
  public void setSex(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(SEX, "");
    }
    else
    {
      setValue(SEX, value.getId());
    }
  }
  
  public java.util.Date getTestDate()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(TESTDATE));
  }
  
  public void validateTestDate()
  {
    this.validateAttribute(TESTDATE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getTestDateMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.Mosquito.CLASS);
    return mdClassIF.definesAttribute(TESTDATE);
  }
  
  public void setTestDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(TESTDATE, "");
    }
    else
    {
      setValue(TESTDATE, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MosquitoQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    MosquitoQuery query = new MosquitoQuery(new com.terraframe.mojo.query.QueryFactory());
    com.terraframe.mojo.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public dss.vector.solutions.entomology.assay.BiochemicalTestResult addBiochemicalResults(dss.vector.solutions.ontology.Term term)
  {
    return (dss.vector.solutions.entomology.assay.BiochemicalTestResult) addChild(term, dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);
  }
  
  public void removeBiochemicalResults(dss.vector.solutions.ontology.Term term)
  {
    removeAllChildren(term, dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.ontology.Term> getAllBiochemicalResults()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.ontology.Term>) getChildren(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.BiochemicalTestResult> getAllBiochemicalResultsRel()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.BiochemicalTestResult>) getChildRelationships(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.entomology.assay.BiochemicalTestResult getBiochemicalResultsRel(dss.vector.solutions.ontology.Term term)
  {
    com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.BiochemicalTestResult> iterator = (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.BiochemicalTestResult>) getRelationshipsWithChild(term, dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.entomology.assay.InfectivityTestResult addInfectivityResults(dss.vector.solutions.ontology.Term term)
  {
    return (dss.vector.solutions.entomology.assay.InfectivityTestResult) addChild(term, dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);
  }
  
  public void removeInfectivityResults(dss.vector.solutions.ontology.Term term)
  {
    removeAllChildren(term, dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.ontology.Term> getAllInfectivityResults()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.ontology.Term>) getChildren(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.InfectivityTestResult> getAllInfectivityResultsRel()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.InfectivityTestResult>) getChildRelationships(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.entomology.assay.InfectivityTestResult getInfectivityResultsRel(dss.vector.solutions.ontology.Term term)
  {
    com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.InfectivityTestResult> iterator = (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.InfectivityTestResult>) getRelationshipsWithChild(term, dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.entomology.assay.TargetSiteTestResult addTargetSiteResults(dss.vector.solutions.ontology.Term term)
  {
    return (dss.vector.solutions.entomology.assay.TargetSiteTestResult) addChild(term, dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);
  }
  
  public void removeTargetSiteResults(dss.vector.solutions.ontology.Term term)
  {
    removeAllChildren(term, dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.ontology.Term> getAllTargetSiteResults()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.ontology.Term>) getChildren(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.TargetSiteTestResult> getAllTargetSiteResultsRel()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.TargetSiteTestResult>) getChildRelationships(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.entomology.assay.TargetSiteTestResult getTargetSiteResultsRel(dss.vector.solutions.ontology.Term term)
  {
    com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.TargetSiteTestResult> iterator = (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.assay.TargetSiteTestResult>) getRelationshipsWithChild(term, dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.entomology.CollectionMosquito addCollections(dss.vector.solutions.entomology.AbstractMosquitoCollection abstractMosquitoCollection)
  {
    return (dss.vector.solutions.entomology.CollectionMosquito) addParent(abstractMosquitoCollection, dss.vector.solutions.entomology.CollectionMosquito.CLASS);
  }
  
  public void removeCollections(dss.vector.solutions.entomology.AbstractMosquitoCollection abstractMosquitoCollection)
  {
    removeAllParents(abstractMosquitoCollection, dss.vector.solutions.entomology.CollectionMosquito.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.AbstractMosquitoCollection> getAllCollections()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.AbstractMosquitoCollection>) getParents(dss.vector.solutions.entomology.CollectionMosquito.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.CollectionMosquito> getAllCollectionsRel()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.CollectionMosquito>) getParentRelationships(dss.vector.solutions.entomology.CollectionMosquito.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.entomology.CollectionMosquito getCollectionsRel(dss.vector.solutions.entomology.AbstractMosquitoCollection abstractMosquitoCollection)
  {
    com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.CollectionMosquito> iterator = (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.entomology.CollectionMosquito>) getRelationshipsWithParent(abstractMosquitoCollection, dss.vector.solutions.entomology.CollectionMosquito.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static Mosquito get(String id)
  {
    return (Mosquito) com.terraframe.mojo.business.Business.get(id);
  }
  
  public static Mosquito getByKey(String key)
  {
    return (Mosquito) com.terraframe.mojo.business.Business.get(CLASS, key);
  }
  
  public static java.io.InputStream exportQueryToCSV(java.lang.String queryXML, java.lang.String config, java.lang.String savedSearchId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.Mosquito.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.io.InputStream exportQueryToExcel(java.lang.String queryXML, java.lang.String config, java.lang.String savedSearchId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.Mosquito.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.entomology.assay.AssayTestResult[] getTestResults()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.Mosquito.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.assay.AssayTestResult[] getTestResults(java.lang.String id)
  {
    Mosquito _instance = Mosquito.get(id);
    return _instance.getTestResults();
  }
  
  public static dss.vector.solutions.entomology.MosquitoView getView(java.lang.String id)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.Mosquito.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.entomology.MosquitoView lockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.Mosquito.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.MosquitoView lockView(java.lang.String id)
  {
    Mosquito _instance = Mosquito.get(id);
    return _instance.lockView();
  }
  
  public static com.terraframe.mojo.query.ValueQuery queryEntomology(java.lang.String queryXML, java.lang.String config, java.lang.String sortBy, java.lang.Boolean ascending, java.lang.Integer pageNumber, java.lang.Integer pageSize)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.Mosquito.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.entomology.MosquitoView unlockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.Mosquito.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.MosquitoView unlockView(java.lang.String id)
  {
    Mosquito _instance = Mosquito.get(id);
    return _instance.unlockView();
  }
  
  public static com.terraframe.mojo.query.ValueQuery xmlToValueQuery(java.lang.String xml, java.lang.String[] selectedUniversals, java.lang.Boolean includeGeometry)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.Mosquito.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static Mosquito lock(java.lang.String id)
  {
    Mosquito _instance = Mosquito.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static Mosquito unlock(java.lang.String id)
  {
    Mosquito _instance = Mosquito.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
