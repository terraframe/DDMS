package dss.vector.solutions.entomology;

@com.runwaysdk.business.ClassSignature(hash = 204053782)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ResistancePropertyException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ResistancePropertyExceptionBase extends com.runwaysdk.business.SmartException implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.entomology.ResistancePropertyException";
  public static java.lang.String ID = "id";
  public static java.lang.String LOWERLABEL = "lowerLabel";
  public static java.lang.String LOWERVALUE = "lowerValue";
  public static java.lang.String UPPERLABEL = "upperLabel";
  public static java.lang.String UPPERVALUE = "upperValue";
  private static final long serialVersionUID = 204053782;
  
  public ResistancePropertyExceptionBase()
  {
    super();
  }
  
  public ResistancePropertyExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public ResistancePropertyExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public ResistancePropertyExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ResistancePropertyException.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getLowerLabel()
  {
    return getValue(LOWERLABEL);
  }
  
  public void validateLowerLabel()
  {
    this.validateAttribute(LOWERLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLowerLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ResistancePropertyException.CLASS);
    return mdClassIF.definesAttribute(LOWERLABEL);
  }
  
  public void setLowerLabel(String value)
  {
    if(value == null)
    {
      setValue(LOWERLABEL, "");
    }
    else
    {
      setValue(LOWERLABEL, value);
    }
  }
  
  public Integer getLowerValue()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(LOWERVALUE));
  }
  
  public void validateLowerValue()
  {
    this.validateAttribute(LOWERVALUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLowerValueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ResistancePropertyException.CLASS);
    return mdClassIF.definesAttribute(LOWERVALUE);
  }
  
  public void setLowerValue(Integer value)
  {
    if(value == null)
    {
      setValue(LOWERVALUE, "");
    }
    else
    {
      setValue(LOWERVALUE, java.lang.Integer.toString(value));
    }
  }
  
  public String getUpperLabel()
  {
    return getValue(UPPERLABEL);
  }
  
  public void validateUpperLabel()
  {
    this.validateAttribute(UPPERLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUpperLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ResistancePropertyException.CLASS);
    return mdClassIF.definesAttribute(UPPERLABEL);
  }
  
  public void setUpperLabel(String value)
  {
    if(value == null)
    {
      setValue(UPPERLABEL, "");
    }
    else
    {
      setValue(UPPERLABEL, value);
    }
  }
  
  public Integer getUpperValue()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(UPPERVALUE));
  }
  
  public void validateUpperValue()
  {
    this.validateAttribute(UPPERVALUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUpperValueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.ResistancePropertyException.CLASS);
    return mdClassIF.definesAttribute(UPPERVALUE);
  }
  
  public void setUpperValue(Integer value)
  {
    if(value == null)
    {
      setValue(UPPERVALUE, "");
    }
    else
    {
      setValue(UPPERVALUE, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{lowerLabel}", this.getLowerLabel());
    message = replace(message, "{lowerValue}", this.getLowerValue());
    message = replace(message, "{upperLabel}", this.getUpperLabel());
    message = replace(message, "{upperValue}", this.getUpperValue());
    return message;
  }
  
}
