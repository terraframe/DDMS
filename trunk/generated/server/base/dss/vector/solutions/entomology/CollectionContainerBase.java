package dss.vector.solutions.entomology;

@com.runwaysdk.business.ClassSignature(hash = -366910736)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to CollectionContainer.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class CollectionContainerBase extends com.runwaysdk.business.Relationship implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.entomology.CollectionContainer";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CREATEDBY = "createdBy";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String ID = "id";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String NUMBERCONTAINERS = "numberContainers";
  public static java.lang.String NUMBERDESTROYED = "numberDestroyed";
  public static java.lang.String NUMBERIMMATURES = "numberImmatures";
  public static java.lang.String NUMBERLARVAE = "numberLarvae";
  public static java.lang.String NUMBERLARVAECOLLECTED = "numberLarvaeCollected";
  public static java.lang.String NUMBERPUPAE = "numberPupae";
  public static java.lang.String NUMBERPUPAECOLLECTED = "numberPupaeCollected";
  public static java.lang.String NUMBERWITHLARVICIDE = "numberWithLarvicide";
  public static java.lang.String NUMBERWITHWATER = "numberWithWater";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String TYPE = "type";
  private static final long serialVersionUID = -366910736;
  
  public CollectionContainerBase(String parentId, String childId)
  {
    super(parentId, childId);
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getCreatedBy()
  {
    if (getValue(CREATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(CREATEDBY));
    }
  }
  
  public void validateCreatedBy()
  {
    this.validateAttribute(CREATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCreatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(CREATEDBY);
  }
  
  public com.runwaysdk.system.metadata.MdDomain getEntityDomain()
  {
    if (getValue(ENTITYDOMAIN).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getEntityDomainMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.runwaysdk.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getKeyName()
  {
    return getValue(KEYNAME);
  }
  
  public void validateKeyName()
  {
    this.validateAttribute(KEYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getKeyNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(KEYNAME);
  }
  
  public void setKeyName(String value)
  {
    if(value == null)
    {
      setValue(KEYNAME, "");
    }
    else
    {
      setValue(KEYNAME, value);
    }
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTUPDATEDATE));
  }
  
  public void validateLastUpdateDate()
  {
    this.validateAttribute(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getLastUpdatedBy()
  {
    if (getValue(LASTUPDATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LASTUPDATEDBY));
    }
  }
  
  public void validateLastUpdatedBy()
  {
    this.validateAttribute(LASTUPDATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLastUpdatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(LASTUPDATEDBY);
  }
  
  public com.runwaysdk.system.Users getLockedBy()
  {
    if (getValue(LOCKEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Users.get(getValue(LOCKEDBY));
    }
  }
  
  public void validateLockedBy()
  {
    this.validateAttribute(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  public Integer getNumberContainers()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBERCONTAINERS));
  }
  
  public void validateNumberContainers()
  {
    this.validateAttribute(NUMBERCONTAINERS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNumberContainersMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(NUMBERCONTAINERS);
  }
  
  public void setNumberContainers(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBERCONTAINERS, "");
    }
    else
    {
      setValue(NUMBERCONTAINERS, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberDestroyed()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBERDESTROYED));
  }
  
  public void validateNumberDestroyed()
  {
    this.validateAttribute(NUMBERDESTROYED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNumberDestroyedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(NUMBERDESTROYED);
  }
  
  public void setNumberDestroyed(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBERDESTROYED, "");
    }
    else
    {
      setValue(NUMBERDESTROYED, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberImmatures()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBERIMMATURES));
  }
  
  public void validateNumberImmatures()
  {
    this.validateAttribute(NUMBERIMMATURES);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNumberImmaturesMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(NUMBERIMMATURES);
  }
  
  public void setNumberImmatures(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBERIMMATURES, "");
    }
    else
    {
      setValue(NUMBERIMMATURES, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberLarvae()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBERLARVAE));
  }
  
  public void validateNumberLarvae()
  {
    this.validateAttribute(NUMBERLARVAE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNumberLarvaeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(NUMBERLARVAE);
  }
  
  public void setNumberLarvae(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBERLARVAE, "");
    }
    else
    {
      setValue(NUMBERLARVAE, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberLarvaeCollected()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBERLARVAECOLLECTED));
  }
  
  public void validateNumberLarvaeCollected()
  {
    this.validateAttribute(NUMBERLARVAECOLLECTED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNumberLarvaeCollectedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(NUMBERLARVAECOLLECTED);
  }
  
  public void setNumberLarvaeCollected(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBERLARVAECOLLECTED, "");
    }
    else
    {
      setValue(NUMBERLARVAECOLLECTED, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberPupae()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBERPUPAE));
  }
  
  public void validateNumberPupae()
  {
    this.validateAttribute(NUMBERPUPAE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNumberPupaeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(NUMBERPUPAE);
  }
  
  public void setNumberPupae(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBERPUPAE, "");
    }
    else
    {
      setValue(NUMBERPUPAE, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberPupaeCollected()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBERPUPAECOLLECTED));
  }
  
  public void validateNumberPupaeCollected()
  {
    this.validateAttribute(NUMBERPUPAECOLLECTED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNumberPupaeCollectedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(NUMBERPUPAECOLLECTED);
  }
  
  public void setNumberPupaeCollected(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBERPUPAECOLLECTED, "");
    }
    else
    {
      setValue(NUMBERPUPAECOLLECTED, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberWithLarvicide()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBERWITHLARVICIDE));
  }
  
  public void validateNumberWithLarvicide()
  {
    this.validateAttribute(NUMBERWITHLARVICIDE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNumberWithLarvicideMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(NUMBERWITHLARVICIDE);
  }
  
  public void setNumberWithLarvicide(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBERWITHLARVICIDE, "");
    }
    else
    {
      setValue(NUMBERWITHLARVICIDE, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNumberWithWater()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NUMBERWITHWATER));
  }
  
  public void validateNumberWithWater()
  {
    this.validateAttribute(NUMBERWITHWATER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNumberWithWaterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(NUMBERWITHWATER);
  }
  
  public void setNumberWithWater(Integer value)
  {
    if(value == null)
    {
      setValue(NUMBERWITHWATER, "");
    }
    else
    {
      setValue(NUMBERWITHWATER, java.lang.Integer.toString(value));
    }
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (getValue(OWNER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(OWNER));
    }
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getId());
    }
  }
  
  public Long getSeq()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SEQ));
  }
  
  public void validateSeq()
  {
    this.validateAttribute(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(SEQ);
  }
  
  public String getSiteMaster()
  {
    return getValue(SITEMASTER);
  }
  
  public void validateSiteMaster()
  {
    this.validateAttribute(SITEMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSiteMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(SITEMASTER);
  }
  
  public String getType()
  {
    return getValue(TYPE);
  }
  
  public void validateType()
  {
    this.validateAttribute(TYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    return mdClassIF.definesAttribute(TYPE);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static CollectionContainerQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    CollectionContainerQuery query = new CollectionContainerQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public dss.vector.solutions.entomology.PremiseTaxon getParent()
  {
    return (dss.vector.solutions.entomology.PremiseTaxon) super.getParent();
  }
  
  public dss.vector.solutions.ontology.Term getChild()
  {
    return (dss.vector.solutions.ontology.Term) super.getChild();
  }
  
  public static CollectionContainer get(String id)
  {
    return (CollectionContainer) com.runwaysdk.business.Relationship.get(id);
  }
  
  public static CollectionContainer getByKey(String key)
  {
    return (CollectionContainer) com.runwaysdk.business.Relationship.get(CLASS, key);
  }
  
  public static CollectionContainer lock(java.lang.String id)
  {
    CollectionContainer _instance = CollectionContainer.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static CollectionContainer unlock(java.lang.String id)
  {
    CollectionContainer _instance = CollectionContainer.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
