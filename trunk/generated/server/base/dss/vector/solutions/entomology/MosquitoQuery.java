package dss.vector.solutions.entomology;

@com.terraframe.mojo.business.ClassSignature(hash = -210517157)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Mosquito.java
 *
 * @author Autogenerated by TerraFrame
 */
public  class MosquitoQuery extends dss.vector.solutions.entomology.TrueSpecieEntityQuery
 implements com.terraframe.mojo.generation.loader.Reloadable
{
private static final long serialVersionUID = -210517157;

  public MosquitoQuery(com.terraframe.mojo.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.terraframe.mojo.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.entomology.Mosquito.CLASS;
  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getGeneration()
  {
    return getGeneration(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getGeneration(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("generation");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.Mosquito.GENERATION, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getGeneration(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("generation");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.Mosquito.GENERATION, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.AttributeBoolean getIsofemale()
  {
    return getIsofemale(null);

  }
 
  public com.terraframe.mojo.query.AttributeBoolean getIsofemale(String alias)
  {
    return (com.terraframe.mojo.query.AttributeBoolean)this.getComponentQuery().attributeFactory(dss.vector.solutions.entomology.Mosquito.ISOFEMALE, "com.terraframe.mojo.system.metadata.MdAttributeBoolean", alias, null);

  }
 
  public com.terraframe.mojo.query.AttributeBoolean getIsofemale(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.AttributeBoolean)this.getComponentQuery().attributeFactory(dss.vector.solutions.entomology.Mosquito.ISOFEMALE, "com.terraframe.mojo.system.metadata.MdAttributeBoolean", alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex()
  {
    return getSex(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sex");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.Mosquito.SEX, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sex");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.entomology.Mosquito.SEX, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.AttributeMoment getTestDate()
  {
    return getTestDate(null);

  }
 
  public com.terraframe.mojo.query.AttributeMoment getTestDate(String alias)
  {
    return (com.terraframe.mojo.query.AttributeMoment)this.getComponentQuery().attributeFactory(dss.vector.solutions.entomology.Mosquito.TESTDATE, "com.terraframe.mojo.system.metadata.MdAttributeDate", alias, null);

  }
 
  public com.terraframe.mojo.query.AttributeMoment getTestDate(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.AttributeMoment)this.getComponentQuery().attributeFactory(dss.vector.solutions.entomology.Mosquito.TESTDATE, "com.terraframe.mojo.system.metadata.MdAttributeDate", alias, displayLabel);

  }
  protected com.terraframe.mojo.query.AttributeReference referenceFactory( com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.terraframe.mojo.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("generation")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sex")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.terraframe.mojo.query.OIterator<? extends Mosquito> getIterator()
  {
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.terraframe.mojo.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.terraframe.mojo.dataaccess.database.Database.query(sqlStmt);
    return new com.terraframe.mojo.business.BusinessIterator<Mosquito>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.terraframe.mojo.query.Condition collections()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionMosquito.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition collections(dss.vector.solutions.entomology.CollectionMosquitoQuery collectionMosquitoQuery)
  {
    return this.getBusinessQuery().isChildIn(collectionMosquitoQuery);
  }

  public com.terraframe.mojo.query.Condition collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionMosquito.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(abstractMosquitoCollectionQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery, dss.vector.solutions.entomology.CollectionMosquitoQuery collectionMosquitoQuery)
  {
    collectionMosquitoQuery.AND(collectionMosquitoQuery.hasParent(abstractMosquitoCollectionQuery));
    return this.getBusinessQuery().isChildIn(collectionMosquitoQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_collections()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionMosquito.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_collections(dss.vector.solutions.entomology.CollectionMosquitoQuery collectionMosquitoQuery)
  {
    return this.getBusinessQuery().isNotChildIn(collectionMosquitoQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionMosquito.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(abstractMosquitoCollectionQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery, dss.vector.solutions.entomology.CollectionMosquitoQuery collectionMosquitoQuery)
  {
    collectionMosquitoQuery.AND(collectionMosquitoQuery.hasParent(abstractMosquitoCollectionQuery));
    return this.getBusinessQuery().isNotChildIn(collectionMosquitoQuery);
  }


  public com.terraframe.mojo.query.Condition biochemicalResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition biochemicalResults(dss.vector.solutions.entomology.assay.BiochemicalTestResultQuery biochemicalTestResultQuery)
  {
    return this.getBusinessQuery().isParentIn(biochemicalTestResultQuery);
  }

  public com.terraframe.mojo.query.Condition biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.BiochemicalTestResultQuery biochemicalTestResultQuery)
  {
    biochemicalTestResultQuery.AND(biochemicalTestResultQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(biochemicalTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults(dss.vector.solutions.entomology.assay.BiochemicalTestResultQuery biochemicalTestResultQuery)
  {
    return this.getBusinessQuery().isNotParentIn(biochemicalTestResultQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.BiochemicalTestResultQuery biochemicalTestResultQuery)
  {
    biochemicalTestResultQuery.AND(biochemicalTestResultQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(biochemicalTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition infectivityResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition infectivityResults(dss.vector.solutions.entomology.assay.InfectivityTestResultQuery infectivityTestResultQuery)
  {
    return this.getBusinessQuery().isParentIn(infectivityTestResultQuery);
  }

  public com.terraframe.mojo.query.Condition infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.InfectivityTestResultQuery infectivityTestResultQuery)
  {
    infectivityTestResultQuery.AND(infectivityTestResultQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(infectivityTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults(dss.vector.solutions.entomology.assay.InfectivityTestResultQuery infectivityTestResultQuery)
  {
    return this.getBusinessQuery().isNotParentIn(infectivityTestResultQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.InfectivityTestResultQuery infectivityTestResultQuery)
  {
    infectivityTestResultQuery.AND(infectivityTestResultQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(infectivityTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition targetSiteResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition targetSiteResults(dss.vector.solutions.entomology.assay.TargetSiteTestResultQuery targetSiteTestResultQuery)
  {
    return this.getBusinessQuery().isParentIn(targetSiteTestResultQuery);
  }

  public com.terraframe.mojo.query.Condition targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.TargetSiteTestResultQuery targetSiteTestResultQuery)
  {
    targetSiteTestResultQuery.AND(targetSiteTestResultQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(targetSiteTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults(dss.vector.solutions.entomology.assay.TargetSiteTestResultQuery targetSiteTestResultQuery)
  {
    return this.getBusinessQuery().isNotParentIn(targetSiteTestResultQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.TargetSiteTestResultQuery targetSiteTestResultQuery)
  {
    targetSiteTestResultQuery.AND(targetSiteTestResultQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(targetSiteTestResultQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface MosquitoQueryReferenceIF extends com.terraframe.mojo.generation.loader.Reloadable, dss.vector.solutions.entomology.TrueSpecieEntityQuery.TrueSpecieEntityQueryReferenceIF
  {

    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getGeneration();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getGeneration(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getGeneration(String alias, String displayLabel);
    public com.terraframe.mojo.query.AttributeBoolean getIsofemale();
    public com.terraframe.mojo.query.AttributeBoolean getIsofemale(String alias);
    public com.terraframe.mojo.query.AttributeBoolean getIsofemale(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias, String displayLabel);
    public com.terraframe.mojo.query.AttributeMoment getTestDate();
    public com.terraframe.mojo.query.AttributeMoment getTestDate(String alias);
    public com.terraframe.mojo.query.AttributeMoment getTestDate(String alias, String displayLabel);

    public com.terraframe.mojo.query.BasicCondition EQ(dss.vector.solutions.entomology.Mosquito mosquito);

    public com.terraframe.mojo.query.BasicCondition NE(dss.vector.solutions.entomology.Mosquito mosquito);


  public com.terraframe.mojo.query.Condition biochemicalResults();

  public com.terraframe.mojo.query.Condition biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.BiochemicalTestResultQuery biochemicalTestResultQuery);


  public com.terraframe.mojo.query.Condition infectivityResults();

  public com.terraframe.mojo.query.Condition infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.InfectivityTestResultQuery infectivityTestResultQuery);


  public com.terraframe.mojo.query.Condition targetSiteResults();

  public com.terraframe.mojo.query.Condition targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.TargetSiteTestResultQuery targetSiteTestResultQuery);


  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults();

  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.BiochemicalTestResultQuery biochemicalTestResultQuery);


  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults();

  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.InfectivityTestResultQuery infectivityTestResultQuery);


  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults();

  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.TargetSiteTestResultQuery targetSiteTestResultQuery);


  public com.terraframe.mojo.query.Condition collections();
  public com.terraframe.mojo.query.Condition collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery);

  public com.terraframe.mojo.query.Condition collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery, dss.vector.solutions.entomology.CollectionMosquitoQuery collectionMosquitoQuery);


  public com.terraframe.mojo.query.Condition NOT_IN_collections();
  public com.terraframe.mojo.query.Condition NOT_IN_collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery);

  public com.terraframe.mojo.query.Condition NOT_IN_collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery, dss.vector.solutions.entomology.CollectionMosquitoQuery collectionMosquitoQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class MosquitoQueryReference extends dss.vector.solutions.entomology.TrueSpecieEntityQuery.TrueSpecieEntityQueryReference
 implements MosquitoQueryReferenceIF
, com.terraframe.mojo.generation.loader.Reloadable
  {
private static final long serialVersionUID = 419932409;

  public MosquitoQueryReference(com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.terraframe.mojo.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.terraframe.mojo.query.BasicCondition EQ(dss.vector.solutions.entomology.Mosquito mosquito)
    {
      return this.EQ(mosquito.getId());
    }

    public com.terraframe.mojo.query.BasicCondition NE(dss.vector.solutions.entomology.Mosquito mosquito)
    {
      return this.NE(mosquito.getId());
    }

  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getGeneration()
  {
    return getGeneration(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getGeneration(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.attributeFactory("generation", "com.terraframe.mojo.system.metadata.MdAttributeReference", alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getGeneration(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.attributeFactory("generation", "com.terraframe.mojo.system.metadata.MdAttributeReference", alias, displayLabel);

  }
  public com.terraframe.mojo.query.AttributeBoolean getIsofemale()
  {
    return getIsofemale(null);

  }
 
  public com.terraframe.mojo.query.AttributeBoolean getIsofemale(String alias)
  {
    return (com.terraframe.mojo.query.AttributeBoolean)this.attributeFactory("isofemale", "com.terraframe.mojo.system.metadata.MdAttributeBoolean", alias, null);

  }
 
  public com.terraframe.mojo.query.AttributeBoolean getIsofemale(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.AttributeBoolean)this.attributeFactory("isofemale", "com.terraframe.mojo.system.metadata.MdAttributeBoolean", alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex()
  {
    return getSex(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.attributeFactory("sex", "com.terraframe.mojo.system.metadata.MdAttributeReference", alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.attributeFactory("sex", "com.terraframe.mojo.system.metadata.MdAttributeReference", alias, displayLabel);

  }
  public com.terraframe.mojo.query.AttributeMoment getTestDate()
  {
    return getTestDate(null);

  }
 
  public com.terraframe.mojo.query.AttributeMoment getTestDate(String alias)
  {
    return (com.terraframe.mojo.query.AttributeMoment)this.attributeFactory("testDate", "com.terraframe.mojo.system.metadata.MdAttributeDate", alias, null);

  }
 
  public com.terraframe.mojo.query.AttributeMoment getTestDate(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.AttributeMoment)this.attributeFactory("testDate", "com.terraframe.mojo.system.metadata.MdAttributeDate", alias, displayLabel);

  }

  public com.terraframe.mojo.query.Condition biochemicalResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);

    return this.isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.BiochemicalTestResultQuery biochemicalTestResultQuery)
  {
    biochemicalTestResultQuery.AND(biochemicalTestResultQuery.hasChild(termQuery));
    return this.isParentIn(biochemicalTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition infectivityResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);

    return this.isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.InfectivityTestResultQuery infectivityTestResultQuery)
  {
    infectivityTestResultQuery.AND(infectivityTestResultQuery.hasChild(termQuery));
    return this.isParentIn(infectivityTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition targetSiteResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);

    return this.isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.TargetSiteTestResultQuery targetSiteTestResultQuery)
  {
    targetSiteTestResultQuery.AND(targetSiteTestResultQuery.hasChild(termQuery));
    return this.isParentIn(targetSiteTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.BiochemicalTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_biochemicalResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.BiochemicalTestResultQuery biochemicalTestResultQuery)
  {
    biochemicalTestResultQuery.AND(biochemicalTestResultQuery.hasChild(termQuery));
    return this.isNotParentIn(biochemicalTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.InfectivityTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_infectivityResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.InfectivityTestResultQuery infectivityTestResultQuery)
  {
    infectivityTestResultQuery.AND(infectivityTestResultQuery.hasChild(termQuery));
    return this.isNotParentIn(infectivityTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.assay.TargetSiteTestResult.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_targetSiteResults(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.entomology.assay.TargetSiteTestResultQuery targetSiteTestResultQuery)
  {
    targetSiteTestResultQuery.AND(targetSiteTestResultQuery.hasChild(termQuery));
    return this.isNotParentIn(targetSiteTestResultQuery);
  }


  public com.terraframe.mojo.query.Condition collections()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionMosquito.CLASS);

    return this.isChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionMosquito.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(abstractMosquitoCollectionQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery, dss.vector.solutions.entomology.CollectionMosquitoQuery collectionMosquitoQuery)
  {
    collectionMosquitoQuery.AND(collectionMosquitoQuery.hasParent(abstractMosquitoCollectionQuery));
    return this.isChildIn(collectionMosquitoQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_collections()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionMosquito.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionMosquito.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(abstractMosquitoCollectionQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_collections(dss.vector.solutions.entomology.AbstractMosquitoCollectionQuery abstractMosquitoCollectionQuery, dss.vector.solutions.entomology.CollectionMosquitoQuery collectionMosquitoQuery)
  {
    collectionMosquitoQuery.AND(collectionMosquitoQuery.hasParent(abstractMosquitoCollectionQuery));
    return this.isNotChildIn(collectionMosquitoQuery);
  }

  protected com.terraframe.mojo.query.AttributeReference referenceFactory( com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.terraframe.mojo.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("generation")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sex")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  }
}
