package dss.vector.solutions.general;

@com.runwaysdk.business.ClassSignature(hash = -200432596)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to YearValueException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class YearValueExceptionBase extends com.runwaysdk.business.SmartException implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.general.YearValueException";
  public static java.lang.String ID = "id";
  public static java.lang.String MAXYEAR = "maxYear";
  public static java.lang.String MINYEAR = "minYear";
  public static java.lang.String YEARVALUE = "yearValue";
  private static final long serialVersionUID = -200432596;
  
  public YearValueExceptionBase()
  {
    super();
  }
  
  public YearValueExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public YearValueExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public YearValueExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.YearValueException.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public Integer getMaxYear()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(MAXYEAR));
  }
  
  public void validateMaxYear()
  {
    this.validateAttribute(MAXYEAR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMaxYearMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.YearValueException.CLASS);
    return mdClassIF.definesAttribute(MAXYEAR);
  }
  
  public void setMaxYear(Integer value)
  {
    if(value == null)
    {
      setValue(MAXYEAR, "");
    }
    else
    {
      setValue(MAXYEAR, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getMinYear()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(MINYEAR));
  }
  
  public void validateMinYear()
  {
    this.validateAttribute(MINYEAR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMinYearMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.YearValueException.CLASS);
    return mdClassIF.definesAttribute(MINYEAR);
  }
  
  public void setMinYear(Integer value)
  {
    if(value == null)
    {
      setValue(MINYEAR, "");
    }
    else
    {
      setValue(MINYEAR, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getYearValue()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(YEARVALUE));
  }
  
  public void validateYearValue()
  {
    this.validateAttribute(YEARVALUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getYearValueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.YearValueException.CLASS);
    return mdClassIF.definesAttribute(YEARVALUE);
  }
  
  public void setYearValue(Integer value)
  {
    if(value == null)
    {
      setValue(YEARVALUE, "");
    }
    else
    {
      setValue(YEARVALUE, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    try
    {
      java.lang.String message = com.runwaysdk.util.LocalizeUtil.getTemplate("dss.vector.solutions.general.YearValueException", locale);
      return this.localize(locale, message);
    }
    catch (java.io.IOException e)
    {
      throw new com.runwaysdk.dataaccess.io.XMLException(e.getLocalizedMessage());
    }
    catch (org.xml.sax.SAXException e)
    {
      throw new com.runwaysdk.dataaccess.io.XMLException(e.getLocalizedMessage());
    }
    catch (javax.xml.parsers.ParserConfigurationException e)
    {
      throw new com.runwaysdk.dataaccess.io.XMLException(e.getLocalizedMessage());
    }
    catch (com.runwaysdk.util.LocalizeException e)
    {
      throw new com.runwaysdk.dataaccess.io.XMLException(e.getLocalizedMessage());
    }
  }
  
  protected java.lang.String localize(java.util.Locale locale, java.lang.String message)
  {
    message = super.localize(locale, message);
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{maxYear}", this.getMaxYear());
    message = replace(message, "{minYear}", this.getMinYear());
    message = replace(message, "{yearValue}", this.getYearValue());
    return message;
  }
  
}
