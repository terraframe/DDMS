package dss.vector.solutions.general;

@com.runwaysdk.business.ClassSignature(hash = 1498226149)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MalariaSeasonOverlapProblem.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MalariaSeasonOverlapProblemBase extends com.runwaysdk.business.Problem implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.general.MalariaSeasonOverlapProblem";
  public static java.lang.String ID = "id";
  public static java.lang.String OVERLAP = "overlap";
  private static final long serialVersionUID = 1498226149;
  
  public MalariaSeasonOverlapProblemBase()
  {
    super();
  }
  
  public MalariaSeasonOverlapProblemBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.MalariaSeasonOverlapProblem.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getOverlap()
  {
    return getValue(OVERLAP);
  }
  
  public void validateOverlap()
  {
    this.validateAttribute(OVERLAP);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOverlapMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.MalariaSeasonOverlapProblem.CLASS);
    return mdClassIF.definesAttribute(OVERLAP);
  }
  
  public void setOverlap(String value)
  {
    if(value == null)
    {
      setValue(OVERLAP, "");
    }
    else
    {
      setValue(OVERLAP, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{overlap}", this.getOverlap());
    return message;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
