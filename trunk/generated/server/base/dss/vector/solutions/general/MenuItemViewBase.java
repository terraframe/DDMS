/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.general;

@com.runwaysdk.business.ClassSignature(hash = -2083595153)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MenuItemView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MenuItemViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.general.MenuItemView";
  public static java.lang.String DISEASE = "disease";
  public static java.lang.String ID = "id";
  public static java.lang.String MENUITEMID = "menuItemId";
  public static java.lang.String TERMDISPLAY = "termDisplay";
  public static java.lang.String URLDISPLAY = "urlDisplay";
  private static final long serialVersionUID = -2083595153;
  
  public MenuItemViewBase()
  {
    super();
  }
  
  public dss.vector.solutions.general.Disease getDisease()
  {
    if (getValue(DISEASE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.general.Disease.get(getValue(DISEASE));
    }
  }
  
  public String getDiseaseId()
  {
    return getValue(DISEASE);
  }
  
  public void validateDisease()
  {
    this.validateAttribute(DISEASE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getDiseaseMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.MenuItemView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(DISEASE);
  }
  
  public void setDisease(dss.vector.solutions.general.Disease value)
  {
    if(value == null)
    {
      setValue(DISEASE, "");
    }
    else
    {
      setValue(DISEASE, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.MenuItemView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getMenuItemId()
  {
    return getValue(MENUITEMID);
  }
  
  public void validateMenuItemId()
  {
    this.validateAttribute(MENUITEMID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getMenuItemIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.MenuItemView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(MENUITEMID);
  }
  
  public void setMenuItemId(String value)
  {
    if(value == null)
    {
      setValue(MENUITEMID, "");
    }
    else
    {
      setValue(MENUITEMID, value);
    }
  }
  
  public String getTermDisplay()
  {
    return getValue(TERMDISPLAY);
  }
  
  public void validateTermDisplay()
  {
    this.validateAttribute(TERMDISPLAY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getTermDisplayMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.MenuItemView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(TERMDISPLAY);
  }
  
  public void setTermDisplay(String value)
  {
    if(value == null)
    {
      setValue(TERMDISPLAY, "");
    }
    else
    {
      setValue(TERMDISPLAY, value);
    }
  }
  
  public String getUrlDisplay()
  {
    return getValue(URLDISPLAY);
  }
  
  public void validateUrlDisplay()
  {
    this.validateAttribute(URLDISPLAY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getUrlDisplayMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.MenuItemView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(URLDISPLAY);
  }
  
  public void setUrlDisplay(String value)
  {
    if(value == null)
    {
      setValue(URLDISPLAY, "");
    }
    else
    {
      setValue(URLDISPLAY, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MenuItemView get(String id)
  {
    return (MenuItemView) com.runwaysdk.business.View.get(id);
  }
  
  public static dss.vector.solutions.general.MenuItemViewQuery getPage(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.general.MenuItemView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.general.MenuItemViewQuery getViewsForDisease()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.general.MenuItemView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
