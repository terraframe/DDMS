package dss.vector.solutions.general;

@com.runwaysdk.business.ClassSignature(hash = -580224752)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to OutbreakAlert.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class OutbreakAlertBase extends com.runwaysdk.business.Information implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.general.OutbreakAlert";
  public static java.lang.String ACTUALVALUE = "actualValue";
  public static java.lang.String ALERTTYPE = "alertType";
  public static java.lang.String EMAILFAILURE = "emailFailure";
  public static java.lang.String GEOENTITY = "geoEntity";
  public static java.lang.String ID = "id";
  public static java.lang.String THRESHOLDTYPE = "thresholdType";
  public static java.lang.String THRESHOLDVALUE = "thresholdValue";
  private static final long serialVersionUID = -580224752;
  
  public OutbreakAlertBase()
  {
    super();
  }
  
  public Double getActualValue()
  {
    return com.runwaysdk.constants.MdAttributeDoubleUtil.getTypeSafeValue(getValue(ACTUALVALUE));
  }
  
  public void validateActualValue()
  {
    this.validateAttribute(ACTUALVALUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getActualValueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.OutbreakAlert.CLASS);
    return mdClassIF.definesAttribute(ACTUALVALUE);
  }
  
  public void setActualValue(Double value)
  {
    if(value == null)
    {
      setValue(ACTUALVALUE, "");
    }
    else
    {
      setValue(ACTUALVALUE, java.lang.Double.toString(value));
    }
  }
  
  public String getAlertType()
  {
    return getValue(ALERTTYPE);
  }
  
  public void validateAlertType()
  {
    this.validateAttribute(ALERTTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAlertTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.OutbreakAlert.CLASS);
    return mdClassIF.definesAttribute(ALERTTYPE);
  }
  
  public void setAlertType(String value)
  {
    if(value == null)
    {
      setValue(ALERTTYPE, "");
    }
    else
    {
      setValue(ALERTTYPE, value);
    }
  }
  
  public Boolean getEmailFailure()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(EMAILFAILURE));
  }
  
  public void validateEmailFailure()
  {
    this.validateAttribute(EMAILFAILURE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getEmailFailureMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.OutbreakAlert.CLASS);
    return mdClassIF.definesAttribute(EMAILFAILURE);
  }
  
  public void setEmailFailure(Boolean value)
  {
    if(value == null)
    {
      setValue(EMAILFAILURE, "");
    }
    else
    {
      setValue(EMAILFAILURE, java.lang.Boolean.toString(value));
    }
  }
  
  public String getGeoEntity()
  {
    return getValue(GEOENTITY);
  }
  
  public void validateGeoEntity()
  {
    this.validateAttribute(GEOENTITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getGeoEntityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.OutbreakAlert.CLASS);
    return mdClassIF.definesAttribute(GEOENTITY);
  }
  
  public void setGeoEntity(String value)
  {
    if(value == null)
    {
      setValue(GEOENTITY, "");
    }
    else
    {
      setValue(GEOENTITY, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.OutbreakAlert.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getThresholdType()
  {
    return getValue(THRESHOLDTYPE);
  }
  
  public void validateThresholdType()
  {
    this.validateAttribute(THRESHOLDTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getThresholdTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.OutbreakAlert.CLASS);
    return mdClassIF.definesAttribute(THRESHOLDTYPE);
  }
  
  public void setThresholdType(String value)
  {
    if(value == null)
    {
      setValue(THRESHOLDTYPE, "");
    }
    else
    {
      setValue(THRESHOLDTYPE, value);
    }
  }
  
  public Double getThresholdValue()
  {
    return com.runwaysdk.constants.MdAttributeDoubleUtil.getTypeSafeValue(getValue(THRESHOLDVALUE));
  }
  
  public void validateThresholdValue()
  {
    this.validateAttribute(THRESHOLDVALUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getThresholdValueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.OutbreakAlert.CLASS);
    return mdClassIF.definesAttribute(THRESHOLDVALUE);
  }
  
  public void setThresholdValue(Double value)
  {
    if(value == null)
    {
      setValue(THRESHOLDVALUE, "");
    }
    else
    {
      setValue(THRESHOLDVALUE, java.lang.Double.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{actualValue}", this.getActualValue());
    message = replace(message, "{alertType}", this.getAlertType());
    message = replace(message, "{emailFailure}", this.getEmailFailure());
    message = replace(message, "{geoEntity}", this.getGeoEntity());
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{thresholdType}", this.getThresholdType());
    message = replace(message, "{thresholdValue}", this.getThresholdValue());
    return message;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
