package dss.vector.solutions;

@com.runwaysdk.business.ClassSignature(hash = -1281317121)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MDSSUserView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MDSSUserViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.MDSSUserView";
  public static java.lang.String FIRSTNAME = "firstName";
  public static java.lang.String ID = "id";
  public static java.lang.String LASTNAME = "lastName";
  public static java.lang.String PERSONID = "personId";
  public static java.lang.String ROLES = "roles";
  public static java.lang.String USERID = "userId";
  public static java.lang.String USERNAME = "username";
  private static final long serialVersionUID = -1281317121;
  
  public MDSSUserViewBase()
  {
    super();
  }
  
  public String getFirstName()
  {
    return getValue(FIRSTNAME);
  }
  
  public void validateFirstName()
  {
    this.validateAttribute(FIRSTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getFirstNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUserView.CLASS);
    return mdClassIF.definesAttribute(FIRSTNAME);
  }
  
  public void setFirstName(String value)
  {
    if(value == null)
    {
      setValue(FIRSTNAME, "");
    }
    else
    {
      setValue(FIRSTNAME, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUserView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getLastName()
  {
    return getValue(LASTNAME);
  }
  
  public void validateLastName()
  {
    this.validateAttribute(LASTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLastNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUserView.CLASS);
    return mdClassIF.definesAttribute(LASTNAME);
  }
  
  public void setLastName(String value)
  {
    if(value == null)
    {
      setValue(LASTNAME, "");
    }
    else
    {
      setValue(LASTNAME, value);
    }
  }
  
  public String getPersonId()
  {
    return getValue(PERSONID);
  }
  
  public void validatePersonId()
  {
    this.validateAttribute(PERSONID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPersonIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUserView.CLASS);
    return mdClassIF.definesAttribute(PERSONID);
  }
  
  public void setPersonId(String value)
  {
    if(value == null)
    {
      setValue(PERSONID, "");
    }
    else
    {
      setValue(PERSONID, value);
    }
  }
  
  public String getRoles()
  {
    return getValue(ROLES);
  }
  
  public void validateRoles()
  {
    this.validateAttribute(ROLES);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getRolesMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUserView.CLASS);
    return mdClassIF.definesAttribute(ROLES);
  }
  
  public void setRoles(String value)
  {
    if(value == null)
    {
      setValue(ROLES, "");
    }
    else
    {
      setValue(ROLES, value);
    }
  }
  
  public String getUserId()
  {
    return getValue(USERID);
  }
  
  public void validateUserId()
  {
    this.validateAttribute(USERID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUserIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUserView.CLASS);
    return mdClassIF.definesAttribute(USERID);
  }
  
  public void setUserId(String value)
  {
    if(value == null)
    {
      setValue(USERID, "");
    }
    else
    {
      setValue(USERID, value);
    }
  }
  
  public String getUsername()
  {
    return getValue(USERNAME);
  }
  
  public void validateUsername()
  {
    this.validateAttribute(USERNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUsernameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUserView.CLASS);
    return mdClassIF.definesAttribute(USERNAME);
  }
  
  public void setUsername(String value)
  {
    if(value == null)
    {
      setValue(USERNAME, "");
    }
    else
    {
      setValue(USERNAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MDSSUserView get(String id)
  {
    return (MDSSUserView) com.runwaysdk.business.View.get(id);
  }
  
  public static dss.vector.solutions.MDSSUserViewQuery getPage(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.MDSSUserView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
