package dss.vector.solutions;

@com.runwaysdk.business.ClassSignature(hash = -656346031)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to NotificationProblem.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class NotificationProblemBase extends com.runwaysdk.business.Problem implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.NotificationProblem";
  public static java.lang.String ATTRIBUTEDISPLAYLABEL = "attributeDisplayLabel";
  public static java.lang.String ATTRIBUTENAME = "attributeName";
  public static java.lang.String COMPONENTID = "componentId";
  public static java.lang.String DEFININGTYPE = "definingType";
  public static java.lang.String DEFININGTYPEDISPLAYLABEL = "definingTypeDisplayLabel";
  public static java.lang.String ID = "id";
  private static final long serialVersionUID = -656346031;
  
  public NotificationProblemBase()
  {
    super();
  }
  
  public NotificationProblemBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public String getAttributeDisplayLabel()
  {
    return getValue(ATTRIBUTEDISPLAYLABEL);
  }
  
  public void validateAttributeDisplayLabel()
  {
    this.validateAttribute(ATTRIBUTEDISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAttributeDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.NotificationProblem.CLASS);
    return mdClassIF.definesAttribute(ATTRIBUTEDISPLAYLABEL);
  }
  
  public void setAttributeDisplayLabel(String value)
  {
    if(value == null)
    {
      setValue(ATTRIBUTEDISPLAYLABEL, "");
    }
    else
    {
      setValue(ATTRIBUTEDISPLAYLABEL, value);
    }
  }
  
  public String getAttributeName()
  {
    return getValue(ATTRIBUTENAME);
  }
  
  public void validateAttributeName()
  {
    this.validateAttribute(ATTRIBUTENAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAttributeNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.NotificationProblem.CLASS);
    return mdClassIF.definesAttribute(ATTRIBUTENAME);
  }
  
  public void setAttributeName(String value)
  {
    if(value == null)
    {
      setValue(ATTRIBUTENAME, "");
    }
    else
    {
      setValue(ATTRIBUTENAME, value);
    }
  }
  
  public String getComponentId()
  {
    return getValue(COMPONENTID);
  }
  
  public void validateComponentId()
  {
    this.validateAttribute(COMPONENTID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getComponentIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.NotificationProblem.CLASS);
    return mdClassIF.definesAttribute(COMPONENTID);
  }
  
  public void setComponentId(String value)
  {
    if(value == null)
    {
      setValue(COMPONENTID, "");
    }
    else
    {
      setValue(COMPONENTID, value);
    }
  }
  
  public String getDefiningType()
  {
    return getValue(DEFININGTYPE);
  }
  
  public void validateDefiningType()
  {
    this.validateAttribute(DEFININGTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDefiningTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.NotificationProblem.CLASS);
    return mdClassIF.definesAttribute(DEFININGTYPE);
  }
  
  public void setDefiningType(String value)
  {
    if(value == null)
    {
      setValue(DEFININGTYPE, "");
    }
    else
    {
      setValue(DEFININGTYPE, value);
    }
  }
  
  public String getDefiningTypeDisplayLabel()
  {
    return getValue(DEFININGTYPEDISPLAYLABEL);
  }
  
  public void validateDefiningTypeDisplayLabel()
  {
    this.validateAttribute(DEFININGTYPEDISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDefiningTypeDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.NotificationProblem.CLASS);
    return mdClassIF.definesAttribute(DEFININGTYPEDISPLAYLABEL);
  }
  
  public void setDefiningTypeDisplayLabel(String value)
  {
    if(value == null)
    {
      setValue(DEFININGTYPEDISPLAYLABEL, "");
    }
    else
    {
      setValue(DEFININGTYPEDISPLAYLABEL, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.NotificationProblem.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    try
    {
      java.lang.String message = com.runwaysdk.util.LocalizeUtil.getTemplate("dss.vector.solutions.NotificationProblem", locale);
      return this.localize(locale, message);
    }
    catch (java.io.IOException e)
    {
      throw new com.runwaysdk.dataaccess.io.XMLException(e.getLocalizedMessage());
    }
    catch (org.xml.sax.SAXException e)
    {
      throw new com.runwaysdk.dataaccess.io.XMLException(e.getLocalizedMessage());
    }
    catch (javax.xml.parsers.ParserConfigurationException e)
    {
      throw new com.runwaysdk.dataaccess.io.XMLException(e.getLocalizedMessage());
    }
    catch (com.runwaysdk.util.LocalizeException e)
    {
      throw new com.runwaysdk.dataaccess.io.XMLException(e.getLocalizedMessage());
    }
  }
  
  protected java.lang.String localize(java.util.Locale locale, java.lang.String message)
  {
    message = super.localize(locale, message);
    message = replace(message, "{attributeDisplayLabel}", this.getAttributeDisplayLabel());
    message = replace(message, "{attributeName}", this.getAttributeName());
    message = replace(message, "{componentId}", this.getComponentId());
    message = replace(message, "{definingType}", this.getDefiningType());
    message = replace(message, "{definingTypeDisplayLabel}", this.getDefiningTypeDisplayLabel());
    message = replace(message, "{id}", this.getId());
    return message;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
