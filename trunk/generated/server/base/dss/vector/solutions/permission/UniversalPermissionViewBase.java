package dss.vector.solutions.permission;

@com.runwaysdk.business.ClassSignature(hash = -1308590634)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to UniversalPermissionView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class UniversalPermissionViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.permission.UniversalPermissionView";
  public static java.lang.String ID = "id";
  public static java.lang.String LABEL = "label";
  public static java.lang.String PERMISSION = "permission";
  public static java.lang.String UNIVERSALID = "universalId";
  private static final long serialVersionUID = -1308590634;
  
  public UniversalPermissionViewBase()
  {
    super();
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.permission.UniversalPermissionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getLabel()
  {
    return getValue(LABEL);
  }
  
  public void validateLabel()
  {
    this.validateAttribute(LABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.permission.UniversalPermissionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(LABEL);
  }
  
  public void setLabel(String value)
  {
    if(value == null)
    {
      setValue(LABEL, "");
    }
    else
    {
      setValue(LABEL, value);
    }
  }
  
  public Boolean getPermission()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PERMISSION));
  }
  
  public void validatePermission()
  {
    this.validateAttribute(PERMISSION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getPermissionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.permission.UniversalPermissionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(PERMISSION);
  }
  
  public void setPermission(Boolean value)
  {
    if(value == null)
    {
      setValue(PERMISSION, "");
    }
    else
    {
      setValue(PERMISSION, java.lang.Boolean.toString(value));
    }
  }
  
  public String getUniversalId()
  {
    return getValue(UNIVERSALID);
  }
  
  public void validateUniversalId()
  {
    this.validateAttribute(UNIVERSALID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getUniversalIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.permission.UniversalPermissionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(UNIVERSALID);
  }
  
  public void setUniversalId(String value)
  {
    if(value == null)
    {
      setValue(UNIVERSALID, "");
    }
    else
    {
      setValue(UNIVERSALID, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static UniversalPermissionView get(String id)
  {
    return (UniversalPermissionView) com.runwaysdk.business.View.get(id);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
