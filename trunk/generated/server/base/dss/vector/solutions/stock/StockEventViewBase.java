package dss.vector.solutions.stock;

@com.terraframe.mojo.business.ClassSignature(hash = 748302937)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to StockEventView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class StockEventViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.stock.StockEventView";
  public static java.lang.String AVAILABLESTOCK = "availableStock";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String COST = "cost";
  public static java.lang.String EVENTDATE = "eventDate";
  public static java.lang.String ID = "id";
  public static java.lang.String ITEM = "item";
  public static java.lang.String ITEMLABEL = "itemLabel";
  public static java.lang.String QUANTITY = "quantity";
  public static java.lang.String STAFF = "staff";
  public static java.lang.String STAFFLABEL = "staffLabel";
  public static java.lang.String STOCKDEPOT = "stockDepot";
  public static java.lang.String TRANSACTIONTYPE = "transactionType";
  private static final long serialVersionUID = 748302937;
  
  public StockEventViewBase()
  {
    super();
  }
  
  public Integer getAvailableStock()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(AVAILABLESTOCK));
  }
  
  public void validateAvailableStock()
  {
    this.validateAttribute(AVAILABLESTOCK);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAvailableStockMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(AVAILABLESTOCK);
  }
  
  public void setAvailableStock(Integer value)
  {
    if(value == null)
    {
      setValue(AVAILABLESTOCK, "");
    }
    else
    {
      setValue(AVAILABLESTOCK, java.lang.Integer.toString(value));
    }
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public java.math.BigDecimal getCost()
  {
    return com.terraframe.mojo.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(COST));
  }
  
  public void validateCost()
  {
    this.validateAttribute(COST);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getCostMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(COST);
  }
  
  public void setCost(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(COST, "");
    }
    else
    {
      setValue(COST, value.toString());
    }
  }
  
  public java.util.Date getEventDate()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(EVENTDATE));
  }
  
  public void validateEventDate()
  {
    this.validateAttribute(EVENTDATE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getEventDateMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(EVENTDATE);
  }
  
  public void setEventDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(EVENTDATE, "");
    }
    else
    {
      setValue(EVENTDATE, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.stock.StockItem getItem()
  {
    if (getValue(ITEM).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.stock.StockItem.get(getValue(ITEM));
    }
  }
  
  public void validateItem()
  {
    this.validateAttribute(ITEM);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getItemMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(ITEM);
  }
  
  public void setItem(dss.vector.solutions.stock.StockItem value)
  {
    if(value == null)
    {
      setValue(ITEM, "");
    }
    else
    {
      setValue(ITEM, value.getId());
    }
  }
  
  public String getItemLabel()
  {
    return getValue(ITEMLABEL);
  }
  
  public void validateItemLabel()
  {
    this.validateAttribute(ITEMLABEL);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getItemLabelMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(ITEMLABEL);
  }
  
  public void setItemLabel(String value)
  {
    if(value == null)
    {
      setValue(ITEMLABEL, "");
    }
    else
    {
      setValue(ITEMLABEL, value);
    }
  }
  
  public Integer getQuantity()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(QUANTITY));
  }
  
  public void validateQuantity()
  {
    this.validateAttribute(QUANTITY);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getQuantityMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(QUANTITY);
  }
  
  public void setQuantity(Integer value)
  {
    if(value == null)
    {
      setValue(QUANTITY, "");
    }
    else
    {
      setValue(QUANTITY, java.lang.Integer.toString(value));
    }
  }
  
  public dss.vector.solutions.stock.StockStaff getStaff()
  {
    if (getValue(STAFF).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.stock.StockStaff.get(getValue(STAFF));
    }
  }
  
  public void validateStaff()
  {
    this.validateAttribute(STAFF);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getStaffMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(STAFF);
  }
  
  public void setStaff(dss.vector.solutions.stock.StockStaff value)
  {
    if(value == null)
    {
      setValue(STAFF, "");
    }
    else
    {
      setValue(STAFF, value.getId());
    }
  }
  
  public String getStaffLabel()
  {
    return getValue(STAFFLABEL);
  }
  
  public void validateStaffLabel()
  {
    this.validateAttribute(STAFFLABEL);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getStaffLabelMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(STAFFLABEL);
  }
  
  public void setStaffLabel(String value)
  {
    if(value == null)
    {
      setValue(STAFFLABEL, "");
    }
    else
    {
      setValue(STAFFLABEL, value);
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getStockDepot()
  {
    if (getValue(STOCKDEPOT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(STOCKDEPOT));
    }
  }
  
  public void validateStockDepot()
  {
    this.validateAttribute(STOCKDEPOT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getStockDepotMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(STOCKDEPOT);
  }
  
  public void setStockDepot(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(STOCKDEPOT, "");
    }
    else
    {
      setValue(STOCKDEPOT, value.getId());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.stock.EventOption> getTransactionType()
  {
    return (java.util.List<dss.vector.solutions.stock.EventOption>) getEnumValues(TRANSACTIONTYPE);
  }
  
  public void addTransactionType(dss.vector.solutions.stock.EventOption value)
  {
    if(value != null)
    {
      addEnumItem(TRANSACTIONTYPE, value.getId());
    }
  }
  
  public void removeTransactionType(dss.vector.solutions.stock.EventOption value)
  {
    if(value != null)
    {
      removeEnumItem(TRANSACTIONTYPE, value.getId());
    }
  }
  
  public void clearTransactionType()
  {
    clearEnum(TRANSACTIONTYPE);
  }
  
  public void validateTransactionType()
  {
    this.validateAttribute(TRANSACTIONTYPE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getTransactionTypeMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.stock.StockEventView.CLASS);
    return mdClassIF.definesAttribute(TRANSACTIONTYPE);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static StockEventView get(String id)
  {
    return (StockEventView) com.terraframe.mojo.business.View.get(id);
  }
  
  public static dss.vector.solutions.stock.StockEventView[] applyAll(dss.vector.solutions.stock.StockEventView[] views)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.stock.StockEventView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.stock.StockEventView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    StockEventView _instance = StockEventView.get(id);
    _instance.deleteConcrete();
  }
  
  public static dss.vector.solutions.stock.StockEventViewQuery getPage(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber, java.lang.String geoId, java.lang.String item, java.util.Date startDate, java.util.Date endDate)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.stock.StockEventView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.stock.StockEventView[] getViews(java.lang.String geoId, dss.vector.solutions.ontology.Term item, java.util.Date date, dss.vector.solutions.stock.EventOption transactionType)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.stock.StockEventView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
