package dss.vector.solutions.geo;

@com.runwaysdk.business.ClassSignature(hash = 160675755)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoField.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class GeoFieldBase extends com.runwaysdk.business.Business implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.geo.GeoField";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CREATEDBY = "createdBy";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String FILTER = "filter";
  public static java.lang.String GEOATTRIBUTE = "geoAttribute";
  public static java.lang.String ID = "id";
  public static java.lang.String ISPOLITICALHIERARCHY = "isPoliticalHierarchy";
  public static java.lang.String ISPOPULATIONHIERARCHY = "isPopulationHierarchy";
  public static java.lang.String ISSPRAYHIERARCHY = "isSprayHierarchy";
  public static java.lang.String ISUNDERSYSTEMROOT = "isUnderSystemRoot";
  public static java.lang.String ISURBANHIERARCHY = "isUrbanHierarchy";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String TYPE = "type";
  private static final long serialVersionUID = 160675755;
  
  public GeoFieldBase()
  {
    super();
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getCreatedBy()
  {
    if (getValue(CREATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(CREATEDBY));
    }
  }
  
  public String getCreatedById()
  {
    return getValue(CREATEDBY);
  }
  
  public void validateCreatedBy()
  {
    this.validateAttribute(CREATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getCreatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(CREATEDBY);
  }
  
  public com.runwaysdk.system.metadata.MdDomain getEntityDomain()
  {
    if (getValue(ENTITYDOMAIN).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
  }
  
  public String getEntityDomainId()
  {
    return getValue(ENTITYDOMAIN);
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getEntityDomainMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.runwaysdk.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getId());
    }
  }
  
  public dss.vector.solutions.geo.GeoHierarchy getFilter()
  {
    if (getValue(FILTER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.GeoHierarchy.get(getValue(FILTER));
    }
  }
  
  public String getFilterId()
  {
    return getValue(FILTER);
  }
  
  public void validateFilter()
  {
    this.validateAttribute(FILTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getFilterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(FILTER);
  }
  
  public void setFilter(dss.vector.solutions.geo.GeoHierarchy value)
  {
    if(value == null)
    {
      setValue(FILTER, "");
    }
    else
    {
      setValue(FILTER, value.getId());
    }
  }
  
  public com.runwaysdk.system.metadata.MdAttributeReference getGeoAttribute()
  {
    if (getValue(GEOATTRIBUTE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdAttributeReference.get(getValue(GEOATTRIBUTE));
    }
  }
  
  public String getGeoAttributeId()
  {
    return getValue(GEOATTRIBUTE);
  }
  
  public void validateGeoAttribute()
  {
    this.validateAttribute(GEOATTRIBUTE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getGeoAttributeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(GEOATTRIBUTE);
  }
  
  public void setGeoAttribute(com.runwaysdk.system.metadata.MdAttributeReference value)
  {
    if(value == null)
    {
      setValue(GEOATTRIBUTE, "");
    }
    else
    {
      setValue(GEOATTRIBUTE, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public Boolean getIsPoliticalHierarchy()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISPOLITICALHIERARCHY));
  }
  
  public void validateIsPoliticalHierarchy()
  {
    this.validateAttribute(ISPOLITICALHIERARCHY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsPoliticalHierarchyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISPOLITICALHIERARCHY);
  }
  
  public void setIsPoliticalHierarchy(Boolean value)
  {
    if(value == null)
    {
      setValue(ISPOLITICALHIERARCHY, "");
    }
    else
    {
      setValue(ISPOLITICALHIERARCHY, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getIsPopulationHierarchy()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISPOPULATIONHIERARCHY));
  }
  
  public void validateIsPopulationHierarchy()
  {
    this.validateAttribute(ISPOPULATIONHIERARCHY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsPopulationHierarchyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISPOPULATIONHIERARCHY);
  }
  
  public void setIsPopulationHierarchy(Boolean value)
  {
    if(value == null)
    {
      setValue(ISPOPULATIONHIERARCHY, "");
    }
    else
    {
      setValue(ISPOPULATIONHIERARCHY, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getIsSprayHierarchy()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISSPRAYHIERARCHY));
  }
  
  public void validateIsSprayHierarchy()
  {
    this.validateAttribute(ISSPRAYHIERARCHY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsSprayHierarchyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISSPRAYHIERARCHY);
  }
  
  public void setIsSprayHierarchy(Boolean value)
  {
    if(value == null)
    {
      setValue(ISSPRAYHIERARCHY, "");
    }
    else
    {
      setValue(ISSPRAYHIERARCHY, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getIsUnderSystemRoot()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISUNDERSYSTEMROOT));
  }
  
  public void validateIsUnderSystemRoot()
  {
    this.validateAttribute(ISUNDERSYSTEMROOT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsUnderSystemRootMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISUNDERSYSTEMROOT);
  }
  
  public void setIsUnderSystemRoot(Boolean value)
  {
    if(value == null)
    {
      setValue(ISUNDERSYSTEMROOT, "");
    }
    else
    {
      setValue(ISUNDERSYSTEMROOT, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getIsUrbanHierarchy()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISURBANHIERARCHY));
  }
  
  public void validateIsUrbanHierarchy()
  {
    this.validateAttribute(ISURBANHIERARCHY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsUrbanHierarchyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISURBANHIERARCHY);
  }
  
  public void setIsUrbanHierarchy(Boolean value)
  {
    if(value == null)
    {
      setValue(ISURBANHIERARCHY, "");
    }
    else
    {
      setValue(ISURBANHIERARCHY, java.lang.Boolean.toString(value));
    }
  }
  
  public String getKeyName()
  {
    return getValue(KEYNAME);
  }
  
  public void validateKeyName()
  {
    this.validateAttribute(KEYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getKeyNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(KEYNAME);
  }
  
  public void setKeyName(String value)
  {
    if(value == null)
    {
      setValue(KEYNAME, "");
    }
    else
    {
      setValue(KEYNAME, value);
    }
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTUPDATEDATE));
  }
  
  public void validateLastUpdateDate()
  {
    this.validateAttribute(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getLastUpdatedBy()
  {
    if (getValue(LASTUPDATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LASTUPDATEDBY));
    }
  }
  
  public String getLastUpdatedById()
  {
    return getValue(LASTUPDATEDBY);
  }
  
  public void validateLastUpdatedBy()
  {
    this.validateAttribute(LASTUPDATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLastUpdatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LASTUPDATEDBY);
  }
  
  public com.runwaysdk.system.SingleActor getLockedBy()
  {
    if (getValue(LOCKEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LOCKEDBY));
    }
  }
  
  public String getLockedById()
  {
    return getValue(LOCKEDBY);
  }
  
  public void validateLockedBy()
  {
    this.validateAttribute(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (getValue(OWNER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(OWNER));
    }
  }
  
  public String getOwnerId()
  {
    return getValue(OWNER);
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getId());
    }
  }
  
  public Long getSeq()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SEQ));
  }
  
  public void validateSeq()
  {
    this.validateAttribute(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public String getSiteMaster()
  {
    return getValue(SITEMASTER);
  }
  
  public void validateSiteMaster()
  {
    this.validateAttribute(SITEMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSiteMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SITEMASTER);
  }
  
  public String getType()
  {
    return getValue(TYPE);
  }
  
  public void validateType()
  {
    this.validateAttribute(TYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.GeoField.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TYPE);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static GeoFieldQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    GeoFieldQuery query = new GeoFieldQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public dss.vector.solutions.geo.ExtraFieldUniversal addGeoHierarchies(dss.vector.solutions.geo.GeoHierarchy geoHierarchy)
  {
    return (dss.vector.solutions.geo.ExtraFieldUniversal) addChild(geoHierarchy, dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
  }
  
  public void removeGeoHierarchies(dss.vector.solutions.geo.GeoHierarchy geoHierarchy)
  {
    removeAllChildren(geoHierarchy, dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.geo.GeoHierarchy> getAllGeoHierarchies()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.geo.GeoHierarchy>) getChildren(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.geo.ExtraFieldUniversal> getAllGeoHierarchiesRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.geo.ExtraFieldUniversal>) getChildRelationships(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.geo.ExtraFieldUniversal getGeoHierarchiesRel(dss.vector.solutions.geo.GeoHierarchy geoHierarchy)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.geo.ExtraFieldUniversal> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.geo.ExtraFieldUniversal>) getRelationshipsWithChild(geoHierarchy, dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static GeoField get(String id)
  {
    return (GeoField) com.runwaysdk.business.Business.get(id);
  }
  
  public static GeoField getByKey(String key)
  {
    return (GeoField) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public java.lang.String[] getExtraUniversals()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.geo.GeoField.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String[] getExtraUniversals(java.lang.String id)
  {
    GeoField _instance = GeoField.get(id);
    return _instance.getExtraUniversals();
  }
  
  public static dss.vector.solutions.geo.GeoHierarchyView[] getFieldUniversals()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.geo.GeoField.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public java.lang.String getFilterType()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.geo.GeoField.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String getFilterType(java.lang.String id)
  {
    GeoField _instance = GeoField.get(id);
    return _instance.getFilterType();
  }
  
  public static dss.vector.solutions.geo.GeoField getGeoField(java.lang.String klass, java.lang.String name)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.geo.GeoField.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.geo.GeoField getGeoFieldForMdWebGeo(java.lang.String mdWebGeoId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.geo.GeoField.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static GeoField lock(java.lang.String id)
  {
    GeoField _instance = GeoField.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static GeoField unlock(java.lang.String id)
  {
    GeoField _instance = GeoField.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
