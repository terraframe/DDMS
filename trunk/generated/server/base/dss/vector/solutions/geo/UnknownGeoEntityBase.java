package dss.vector.solutions.geo;

@com.terraframe.mojo.business.ClassSignature(hash = 1542616543)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to UnknownGeoEntity.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class UnknownGeoEntityBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.geo.UnknownGeoEntity";
  public static java.lang.String ENTITYNAME = "entityName";
  public static java.lang.String ENTITYTYPE = "entityType";
  public static java.lang.String ID = "id";
  public static java.lang.String KNOWNHIERARCHY = "knownHierarchy";
  public static java.lang.String SIBLINGS = "siblings";
  public static java.lang.String SYNONYMS = "synonyms";
  private static final long serialVersionUID = 1542616543;
  
  public UnknownGeoEntityBase()
  {
    super();
  }
  
  public String getEntityName()
  {
    return getValue(ENTITYNAME);
  }
  
  public void validateEntityName()
  {
    this.validateAttribute(ENTITYNAME);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getEntityNameMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.UnknownGeoEntity.CLASS);
    return mdClassIF.definesAttribute(ENTITYNAME);
  }
  
  public void setEntityName(String value)
  {
    if(value == null)
    {
      setValue(ENTITYNAME, "");
    }
    else
    {
      setValue(ENTITYNAME, value);
    }
  }
  
  public String getEntityType()
  {
    return getValue(ENTITYTYPE);
  }
  
  public void validateEntityType()
  {
    this.validateAttribute(ENTITYTYPE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getEntityTypeMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.UnknownGeoEntity.CLASS);
    return mdClassIF.definesAttribute(ENTITYTYPE);
  }
  
  public void setEntityType(String value)
  {
    if(value == null)
    {
      setValue(ENTITYTYPE, "");
    }
    else
    {
      setValue(ENTITYTYPE, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.UnknownGeoEntity.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getKnownHierarchy()
  {
    return getValue(KNOWNHIERARCHY);
  }
  
  public void validateKnownHierarchy()
  {
    this.validateAttribute(KNOWNHIERARCHY);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getKnownHierarchyMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.UnknownGeoEntity.CLASS);
    return mdClassIF.definesAttribute(KNOWNHIERARCHY);
  }
  
  public void setKnownHierarchy(String value)
  {
    if(value == null)
    {
      setValue(KNOWNHIERARCHY, "");
    }
    else
    {
      setValue(KNOWNHIERARCHY, value);
    }
  }
  
  public String getSiblings()
  {
    return getValue(SIBLINGS);
  }
  
  public void validateSiblings()
  {
    this.validateAttribute(SIBLINGS);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSiblingsMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.UnknownGeoEntity.CLASS);
    return mdClassIF.definesAttribute(SIBLINGS);
  }
  
  public void setSiblings(String value)
  {
    if(value == null)
    {
      setValue(SIBLINGS, "");
    }
    else
    {
      setValue(SIBLINGS, value);
    }
  }
  
  public String getSynonyms()
  {
    return getValue(SYNONYMS);
  }
  
  public void validateSynonyms()
  {
    this.validateAttribute(SYNONYMS);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSynonymsMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.UnknownGeoEntity.CLASS);
    return mdClassIF.definesAttribute(SYNONYMS);
  }
  
  public void setSynonyms(String value)
  {
    if(value == null)
    {
      setValue(SYNONYMS, "");
    }
    else
    {
      setValue(SYNONYMS, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static UnknownGeoEntity get(String id)
  {
    return (UnknownGeoEntity) com.terraframe.mojo.business.View.get(id);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
