/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.geo;

@com.runwaysdk.business.ClassSignature(hash = 3023599)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoHierarchy.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class GeoHierarchyQuery extends com.runwaysdk.query.GeneratedBusinessQuery
 implements com.runwaysdk.generation.loader.Reloadable
{

  public GeoHierarchyQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public GeoHierarchyQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.geo.GeoHierarchy.CLASS;
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass()
  {
    return getGeoEntityClass(null);

  }
 
  public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS);

    return (com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS);

    return (com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getPolitical()
  {
    return getPolitical(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPolitical(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.POLITICAL, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPolitical(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.POLITICAL, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getPopulationAllowed()
  {
    return getPopulationAllowed(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.POPULATIONALLOWED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.POPULATIONALLOWED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed()
  {
    return getSprayTargetAllowed(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.SPRAYTARGETALLOWED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.SPRAYTARGETALLOWED, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm()
  {
    return getTerm(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.TERM);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.TERM, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.geo.GeoHierarchy.TERM);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.geo.GeoHierarchy.TERM, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getUrban()
  {
    return getUrban(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getUrban(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.URBAN, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getUrban(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.URBAN, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getViewCreated()
  {
    return getViewCreated(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.VIEWCREATED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.geo.GeoHierarchy.VIEWCREATED, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS)) 
    {
       return new com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.TERM)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends GeoHierarchy> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<GeoHierarchy>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition allowedInGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition allowedInGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoHierarchyQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoHierarchyQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(geoHierarchyQuery));
    return this.getBusinessQuery().isChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(geoHierarchyQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isNotChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoHierarchyQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoHierarchyQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(geoHierarchyQuery));
    return this.getBusinessQuery().isNotChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(geoHierarchyQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition geoFields()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoFields()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoFields(dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    return this.getBusinessQuery().isChildIn(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoFields(dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoFieldQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoFieldQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    extraFieldUniversalQuery.AND(extraFieldUniversalQuery.hasParent(geoFieldQuery));
    return this.getBusinessQuery().isChildIn(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    extraFieldUniversalQuery.AND(extraFieldUniversalQuery.hasParent(geoFieldQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(extraFieldUniversalQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoFields()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoFields(dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    return this.getBusinessQuery().isNotChildIn(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields(dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoFieldQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoFieldQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    extraFieldUniversalQuery.AND(extraFieldUniversalQuery.hasParent(geoFieldQuery));
    return this.getBusinessQuery().isNotChildIn(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    extraFieldUniversalQuery.AND(extraFieldUniversalQuery.hasParent(geoFieldQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(extraFieldUniversalQuery);
  }


  public com.runwaysdk.query.Condition mappableClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_mappableClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition mappableClass(dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    return this.getBusinessQuery().isChildIn(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_mappableClass(dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mappableClassQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mappableClassQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    classUniversalQuery.AND(classUniversalQuery.hasParent(mappableClassQuery));
    return this.getBusinessQuery().isChildIn(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    classUniversalQuery.AND(classUniversalQuery.hasParent(mappableClassQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(classUniversalQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_mappableClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    return this.getBusinessQuery().isNotChildIn(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mappableClassQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mappableClassQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    classUniversalQuery.AND(classUniversalQuery.hasParent(mappableClassQuery));
    return this.getBusinessQuery().isNotChildIn(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    classUniversalQuery.AND(classUniversalQuery.hasParent(mappableClassQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(classUniversalQuery);
  }


  public com.runwaysdk.query.Condition acceptsGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition acceptsGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoHierarchyQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoHierarchyQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(geoHierarchyQuery));
    return this.getBusinessQuery().isParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(geoHierarchyQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isNotParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoHierarchyQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoHierarchyQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(geoHierarchyQuery));
    return this.getBusinessQuery().isNotParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(geoHierarchyQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(allowedInQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface GeoHierarchyQueryReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass();
    public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias);
    public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getPolitical();
    public com.runwaysdk.query.SelectableBoolean getPolitical(String alias);
    public com.runwaysdk.query.SelectableBoolean getPolitical(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getPopulationAllowed();
    public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias);
    public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed();
    public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias);
    public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getUrban();
    public com.runwaysdk.query.SelectableBoolean getUrban(String alias);
    public com.runwaysdk.query.SelectableBoolean getUrban(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getViewCreated();
    public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias);
    public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.geo.GeoHierarchy geoHierarchy);

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.geo.GeoHierarchy geoHierarchy);


  public com.runwaysdk.query.Condition acceptsGeoEntity();

  public com.runwaysdk.query.Condition acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery);

  public com.runwaysdk.query.Condition acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity();

  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery);

  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity();

  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery);

  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition allowedInGeoEntity();
  public com.runwaysdk.query.Condition allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery);

  public com.runwaysdk.query.Condition allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity();
  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery);

  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition geoFields();
  public com.runwaysdk.query.Condition geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery);

  public com.runwaysdk.query.Condition geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery);


  public com.runwaysdk.query.Condition SUBSELECT_geoFields();
  public com.runwaysdk.query.Condition SUBSELECT_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery);

  public com.runwaysdk.query.Condition SUBSELECT_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery);


  public com.runwaysdk.query.Condition mappableClass();
  public com.runwaysdk.query.Condition mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery);

  public com.runwaysdk.query.Condition mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery);


  public com.runwaysdk.query.Condition SUBSELECT_mappableClass();
  public com.runwaysdk.query.Condition SUBSELECT_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery);

  public com.runwaysdk.query.Condition SUBSELECT_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery);


  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity();
  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery);

  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery);


  public com.runwaysdk.query.Condition NOT_IN_geoFields();
  public com.runwaysdk.query.Condition NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery);

  public com.runwaysdk.query.Condition NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery);


  public com.runwaysdk.query.Condition NOT_IN_mappableClass();
  public com.runwaysdk.query.Condition NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery);

  public com.runwaysdk.query.Condition NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class GeoHierarchyQueryReference extends com.runwaysdk.query.AttributeReference
 implements GeoHierarchyQueryReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {

  public GeoHierarchyQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.geo.GeoHierarchy geoHierarchy)
    {
      if(geoHierarchy == null) return this.EQ((java.lang.String)null);
      return this.EQ(geoHierarchy.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.geo.GeoHierarchy geoHierarchy)
    {
      if(geoHierarchy == null) return this.NE((java.lang.String)null);
      return this.NE(geoHierarchy.getId());
    }

  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.geo.GeoHierarchy.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.geo.GeoHierarchy.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass()
  {
    return getGeoEntityClass(null);

  }
 
  public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias)
  {
    return (com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getPolitical()
  {
    return getPolitical(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPolitical(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.POLITICAL, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPolitical(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.POLITICAL, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getPopulationAllowed()
  {
    return getPopulationAllowed(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.POPULATIONALLOWED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.POPULATIONALLOWED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.geo.GeoHierarchy.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.geo.GeoHierarchy.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed()
  {
    return getSprayTargetAllowed(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.SPRAYTARGETALLOWED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.SPRAYTARGETALLOWED, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm()
  {
    return getTerm(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.TERM, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.TERM,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getUrban()
  {
    return getUrban(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getUrban(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.URBAN, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getUrban(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.URBAN, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getViewCreated()
  {
    return getViewCreated(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.VIEWCREATED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.VIEWCREATED, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition acceptsGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition acceptsGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.isParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.isParentIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoHierarchyQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoHierarchyQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(geoHierarchyQuery));
    return this.isParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(geoHierarchyQuery));
    return this.isParentIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.isNotParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.isNotParentIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoHierarchyQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(geoHierarchyQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(geoHierarchyQuery));
    return this.isNotParentIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_acceptsGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasChild(geoHierarchyQuery));
    return this.isNotParentIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition allowedInGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition allowedInGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.isChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.isChildIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoHierarchyQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoHierarchyQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(geoHierarchyQuery));
    return this.isChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(geoHierarchyQuery));
    return this.isChildIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition geoFields()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_geoFields()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoFields(dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    return this.isChildIn(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoFields(dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    return this.isChildIn_SUBSELECT(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoFieldQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoFieldQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    extraFieldUniversalQuery.AND(extraFieldUniversalQuery.hasParent(geoFieldQuery));
    return this.isChildIn(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    extraFieldUniversalQuery.AND(extraFieldUniversalQuery.hasParent(geoFieldQuery));
    return this.isChildIn_SUBSELECT(extraFieldUniversalQuery);
  }


  public com.runwaysdk.query.Condition mappableClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_mappableClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition mappableClass(dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    return this.isChildIn(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_mappableClass(dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    return this.isChildIn_SUBSELECT(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mappableClassQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mappableClassQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    classUniversalQuery.AND(classUniversalQuery.hasParent(mappableClassQuery));
    return this.isChildIn(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    classUniversalQuery.AND(classUniversalQuery.hasParent(mappableClassQuery));
    return this.isChildIn_SUBSELECT(classUniversalQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.isNotChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    return this.isNotChildIn_SUBSELECT(allowedInQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoHierarchyQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.AllowedIn.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoHierarchyQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(geoHierarchyQuery));
    return this.isNotChildIn(allowedInQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_allowedInGeoEntity(dss.vector.solutions.geo.GeoHierarchyQuery geoHierarchyQuery, dss.vector.solutions.geo.AllowedInQuery allowedInQuery)
  {
    allowedInQuery.AND(allowedInQuery.hasParent(geoHierarchyQuery));
    return this.isNotChildIn_SUBSELECT(allowedInQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_geoFields()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoFields(dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    return this.isNotChildIn(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields(dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    return this.isNotChildIn_SUBSELECT(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoFieldQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.geo.ExtraFieldUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(geoFieldQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    extraFieldUniversalQuery.AND(extraFieldUniversalQuery.hasParent(geoFieldQuery));
    return this.isNotChildIn(extraFieldUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_geoFields(dss.vector.solutions.geo.GeoFieldQuery geoFieldQuery, dss.vector.solutions.geo.ExtraFieldUniversalQuery extraFieldUniversalQuery)
  {
    extraFieldUniversalQuery.AND(extraFieldUniversalQuery.hasParent(geoFieldQuery));
    return this.isNotChildIn_SUBSELECT(extraFieldUniversalQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_mappableClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    return this.isNotChildIn(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    return this.isNotChildIn_SUBSELECT(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mappableClassQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.kaleidoscope.ClassUniversal.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(mappableClassQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    classUniversalQuery.AND(classUniversalQuery.hasParent(mappableClassQuery));
    return this.isNotChildIn(classUniversalQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_mappableClass(dss.vector.solutions.kaleidoscope.MappableClassQuery mappableClassQuery, dss.vector.solutions.kaleidoscope.ClassUniversalQuery classUniversalQuery)
  {
    classUniversalQuery.AND(classUniversalQuery.hasParent(mappableClassQuery));
    return this.isNotChildIn_SUBSELECT(classUniversalQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS)) 
    {
       return new com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.TERM)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface GeoHierarchyQueryMultiReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass();
    public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias);
    public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getPolitical();
    public com.runwaysdk.query.SelectableBoolean getPolitical(String alias);
    public com.runwaysdk.query.SelectableBoolean getPolitical(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getPopulationAllowed();
    public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias);
    public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed();
    public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias);
    public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getUrban();
    public com.runwaysdk.query.SelectableBoolean getUrban(String alias);
    public com.runwaysdk.query.SelectableBoolean getUrban(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getViewCreated();
    public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias);
    public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy);
    public com.runwaysdk.query.Condition notContainsAny(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy);
    public com.runwaysdk.query.Condition containsAll(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy);
    public com.runwaysdk.query.Condition notContainsAll(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy);
    public com.runwaysdk.query.Condition containsExactly(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class GeoHierarchyQueryMultiReference extends com.runwaysdk.query.AttributeMultiReference
 implements GeoHierarchyQueryMultiReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {

  public GeoHierarchyQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy)  {

      String[] itemIdArray = new String[geoHierarchy.length]; 

      for (int i=0; i<geoHierarchy.length; i++)
      {
        itemIdArray[i] = geoHierarchy[i].getId();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy)  {

      String[] itemIdArray = new String[geoHierarchy.length]; 

      for (int i=0; i<geoHierarchy.length; i++)
      {
        itemIdArray[i] = geoHierarchy[i].getId();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy)  {

      String[] itemIdArray = new String[geoHierarchy.length]; 

      for (int i=0; i<geoHierarchy.length; i++)
      {
        itemIdArray[i] = geoHierarchy[i].getId();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy)  {

      String[] itemIdArray = new String[geoHierarchy.length]; 

      for (int i=0; i<geoHierarchy.length; i++)
      {
        itemIdArray[i] = geoHierarchy[i].getId();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(dss.vector.solutions.geo.GeoHierarchy ... geoHierarchy)  {

      String[] itemIdArray = new String[geoHierarchy.length]; 

      for (int i=0; i<geoHierarchy.length; i++)
      {
        itemIdArray[i] = geoHierarchy[i].getId();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.geo.GeoHierarchy.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.geo.GeoHierarchy.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass()
  {
    return getGeoEntityClass(null);

  }
 
  public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias)
  {
    return (com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF getGeoEntityClass(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getPolitical()
  {
    return getPolitical(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPolitical(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.POLITICAL, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPolitical(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.POLITICAL, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getPopulationAllowed()
  {
    return getPopulationAllowed(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.POPULATIONALLOWED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPopulationAllowed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.POPULATIONALLOWED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.geo.GeoHierarchy.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.geo.GeoHierarchy.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed()
  {
    return getSprayTargetAllowed(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.SPRAYTARGETALLOWED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getSprayTargetAllowed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.SPRAYTARGETALLOWED, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm()
  {
    return getTerm(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.TERM, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTerm(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.geo.GeoHierarchy.TERM,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.geo.GeoHierarchy.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getUrban()
  {
    return getUrban(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getUrban(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.URBAN, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getUrban(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.URBAN, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getViewCreated()
  {
    return getViewCreated(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.VIEWCREATED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getViewCreated(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.geo.GeoHierarchy.VIEWCREATED, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.geo.GeoHierarchy.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.GEOENTITYCLASS)) 
    {
       return new com.runwaysdk.system.metadata.MdBusinessQuery.MdBusinessQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.geo.GeoHierarchy.TERM)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
