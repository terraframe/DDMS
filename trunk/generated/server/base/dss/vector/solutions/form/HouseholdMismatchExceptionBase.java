package dss.vector.solutions.form;

@com.runwaysdk.business.ClassSignature(hash = -764492690)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to HouseholdMismatchException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class HouseholdMismatchExceptionBase extends com.runwaysdk.business.SmartException implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.form.HouseholdMismatchException";
  public static java.lang.String HOUSEHOLDID = "householdId";
  public static java.lang.String ID = "id";
  public static java.lang.String NETID = "netId";
  public static java.lang.String PERSONID = "personId";
  private static final long serialVersionUID = -764492690;
  
  public HouseholdMismatchExceptionBase()
  {
    super();
  }
  
  public HouseholdMismatchExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public HouseholdMismatchExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public HouseholdMismatchExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getHouseholdId()
  {
    return getValue(HOUSEHOLDID);
  }
  
  public void validateHouseholdId()
  {
    this.validateAttribute(HOUSEHOLDID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getHouseholdIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.form.HouseholdMismatchException.CLASS);
    return mdClassIF.definesAttribute(HOUSEHOLDID);
  }
  
  public void setHouseholdId(String value)
  {
    if(value == null)
    {
      setValue(HOUSEHOLDID, "");
    }
    else
    {
      setValue(HOUSEHOLDID, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.form.HouseholdMismatchException.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getNetId()
  {
    return getValue(NETID);
  }
  
  public void validateNetId()
  {
    this.validateAttribute(NETID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNetIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.form.HouseholdMismatchException.CLASS);
    return mdClassIF.definesAttribute(NETID);
  }
  
  public void setNetId(String value)
  {
    if(value == null)
    {
      setValue(NETID, "");
    }
    else
    {
      setValue(NETID, value);
    }
  }
  
  public String getPersonId()
  {
    return getValue(PERSONID);
  }
  
  public void validatePersonId()
  {
    this.validateAttribute(PERSONID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPersonIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.form.HouseholdMismatchException.CLASS);
    return mdClassIF.definesAttribute(PERSONID);
  }
  
  public void setPersonId(String value)
  {
    if(value == null)
    {
      setValue(PERSONID, "");
    }
    else
    {
      setValue(PERSONID, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{householdId}", this.getHouseholdId());
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{netId}", this.getNetId());
    message = replace(message, "{personId}", this.getPersonId());
    return message;
  }
  
}
