/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.export;

@com.runwaysdk.business.ClassSignature(hash = 1294309737)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to InsufficientPatientDataException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class InsufficientPatientDataExceptionBase extends com.runwaysdk.business.SmartException implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.export.InsufficientPatientDataException";
  public static java.lang.String DOBLABEL = "dobLabel";
  public static java.lang.String FIRSTNAMELABEL = "firstNameLabel";
  public static java.lang.String ID = "id";
  public static java.lang.String IDENTIFIERLABEL = "identifierLabel";
  public static java.lang.String LASTNAMELABEL = "lastNameLabel";
  public static java.lang.String SEXLABEL = "sexLabel";
  public static java.lang.String TYPELABEL = "typeLabel";
  private static final long serialVersionUID = 1294309737;
  
  public InsufficientPatientDataExceptionBase()
  {
    super();
  }
  
  public InsufficientPatientDataExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public InsufficientPatientDataExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public InsufficientPatientDataExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getDobLabel()
  {
    return getValue(DOBLABEL);
  }
  
  public void validateDobLabel()
  {
    this.validateAttribute(DOBLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getDobLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.InsufficientPatientDataException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(DOBLABEL);
  }
  
  public void setDobLabel(String value)
  {
    if(value == null)
    {
      setValue(DOBLABEL, "");
    }
    else
    {
      setValue(DOBLABEL, value);
    }
  }
  
  public String getFirstNameLabel()
  {
    return getValue(FIRSTNAMELABEL);
  }
  
  public void validateFirstNameLabel()
  {
    this.validateAttribute(FIRSTNAMELABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getFirstNameLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.InsufficientPatientDataException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(FIRSTNAMELABEL);
  }
  
  public void setFirstNameLabel(String value)
  {
    if(value == null)
    {
      setValue(FIRSTNAMELABEL, "");
    }
    else
    {
      setValue(FIRSTNAMELABEL, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.InsufficientPatientDataException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getIdentifierLabel()
  {
    return getValue(IDENTIFIERLABEL);
  }
  
  public void validateIdentifierLabel()
  {
    this.validateAttribute(IDENTIFIERLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdentifierLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.InsufficientPatientDataException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(IDENTIFIERLABEL);
  }
  
  public void setIdentifierLabel(String value)
  {
    if(value == null)
    {
      setValue(IDENTIFIERLABEL, "");
    }
    else
    {
      setValue(IDENTIFIERLABEL, value);
    }
  }
  
  public String getLastNameLabel()
  {
    return getValue(LASTNAMELABEL);
  }
  
  public void validateLastNameLabel()
  {
    this.validateAttribute(LASTNAMELABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getLastNameLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.InsufficientPatientDataException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(LASTNAMELABEL);
  }
  
  public void setLastNameLabel(String value)
  {
    if(value == null)
    {
      setValue(LASTNAMELABEL, "");
    }
    else
    {
      setValue(LASTNAMELABEL, value);
    }
  }
  
  public String getSexLabel()
  {
    return getValue(SEXLABEL);
  }
  
  public void validateSexLabel()
  {
    this.validateAttribute(SEXLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSexLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.InsufficientPatientDataException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SEXLABEL);
  }
  
  public void setSexLabel(String value)
  {
    if(value == null)
    {
      setValue(SEXLABEL, "");
    }
    else
    {
      setValue(SEXLABEL, value);
    }
  }
  
  public String getTypeLabel()
  {
    return getValue(TYPELABEL);
  }
  
  public void validateTypeLabel()
  {
    this.validateAttribute(TYPELABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTypeLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.InsufficientPatientDataException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TYPELABEL);
  }
  
  public void setTypeLabel(String value)
  {
    if(value == null)
    {
      setValue(TYPELABEL, "");
    }
    else
    {
      setValue(TYPELABEL, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{dobLabel}", this.getDobLabel());
    message = replace(message, "{firstNameLabel}", this.getFirstNameLabel());
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{identifierLabel}", this.getIdentifierLabel());
    message = replace(message, "{lastNameLabel}", this.getLastNameLabel());
    message = replace(message, "{sexLabel}", this.getSexLabel());
    message = replace(message, "{typeLabel}", this.getTypeLabel());
    return message;
  }
  
}
