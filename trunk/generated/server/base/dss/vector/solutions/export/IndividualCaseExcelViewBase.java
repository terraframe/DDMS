package dss.vector.solutions.export;

@com.runwaysdk.business.ClassSignature(hash = -1076795779)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to IndividualCaseExcelView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class IndividualCaseExcelViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.export.IndividualCaseExcelView";
  public static java.lang.String ACTIVELYDETECTED = "activelyDetected";
  public static java.lang.String ADMISSIONDATE = "admissionDate";
  public static java.lang.String AGE = "age";
  public static java.lang.String ANAEMIAPATIENT = "anaemiaPatient";
  public static java.lang.String CASEIDENTIFIER = "caseIdentifier";
  public static java.lang.String CASEREPORTDATE = "caseReportDate";
  public static java.lang.String CLASSIFICATION = "classification";
  public static java.lang.String CONFIRMEDDIAGNOSIS = "confirmedDiagnosis";
  public static java.lang.String CONFIRMEDDIAGNOSISDATE = "confirmedDiagnosisDate";
  public static java.lang.String DATEOFBIRTH = "dateOfBirth";
  public static java.lang.String DATEOFDEATH = "dateOfDeath";
  public static java.lang.String DETECTEDBY = "detectedBy";
  public static java.lang.String DIAGNOSIS = "diagnosis";
  public static java.lang.String DIAGNOSISDATE = "diagnosisDate";
  public static java.lang.String DIAGNOSISTYPE = "diagnosisType";
  public static java.lang.String DIEDINFACILITY = "diedInFacility";
  public static java.lang.String FACILITYVISIT = "facilityVisit";
  public static java.lang.String FIRSTNAME = "firstName";
  public static java.lang.String HEALTHFACILITY = "healthFacility";
  public static java.lang.String HEMORRHAGICONSET = "hemorrhagicOnset";
  public static java.lang.String ID = "id";
  public static java.lang.String IDENTIFIER = "identifier";
  public static java.lang.String LABTEST = "labTest";
  public static java.lang.String LABTESTDATE = "labTestDate";
  public static java.lang.String LASTNAME = "lastName";
  public static java.lang.String MALARIATYPE = "malariaType";
  public static java.lang.String ORIGIN = "origin";
  public static java.lang.String OTHERSETTLEMENTS = "otherSettlements";
  public static java.lang.String PATIENTCATEGORY = "patientCategory";
  public static java.lang.String PHYSICIANDATEOFBIRTH = "physicianDateOfBirth";
  public static java.lang.String PHYSICIANFIRSTNAME = "physicianFirstName";
  public static java.lang.String PHYSICIANIDENTIFIER = "physicianIdentifier";
  public static java.lang.String PHYSICIANLASTNAME = "physicianLastName";
  public static java.lang.String PHYSICIANRESIDENCE = "physicianResidence";
  public static java.lang.String PHYSICIANSEX = "physicianSex";
  public static java.lang.String PHYSICIANWORKPLACE = "physicianWorkplace";
  public static java.lang.String PLASMALEAKAGEONSET = "plasmaLeakageOnset";
  public static java.lang.String PREGNANT = "pregnant";
  public static java.lang.String PRIMARYINFECTION = "primaryInfection";
  public static java.lang.String PROBABLESOURCE = "probableSource";
  public static java.lang.String PROPERLYRELEASE = "properlyRelease";
  public static java.lang.String REFERRALREASON = "referralReason";
  public static java.lang.String REFERREDFROM = "referredFrom";
  public static java.lang.String REFERREDTO = "referredTo";
  public static java.lang.String RELEASEDATE = "releaseDate";
  public static java.lang.String RESIDENCE = "residence";
  public static java.lang.String SAMPLETYPE = "sampleType";
  public static java.lang.String SEX = "sex";
  public static java.lang.String SYMPTOMCOMMENTS = "symptomComments";
  public static java.lang.String SYMPTOMONSET = "symptomOnset";
  public static java.lang.String TESTRESULT = "testResult";
  public static java.lang.String TESTSAMPLEDATE = "testSampleDate";
  public static java.lang.String TREATMENT = "treatment";
  public static java.lang.String TREATMENTMETHOD = "treatmentMethod";
  public static java.lang.String TREATMENTSTARTDATE = "treatmentStartDate";
  public static java.lang.String WORKPLACE = "workplace";
  private static final long serialVersionUID = -1076795779;
  
  public IndividualCaseExcelViewBase()
  {
    super();
  }
  
  public Boolean getActivelyDetected()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ACTIVELYDETECTED));
  }
  
  public void validateActivelyDetected()
  {
    this.validateAttribute(ACTIVELYDETECTED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getActivelyDetectedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(ACTIVELYDETECTED);
  }
  
  public void setActivelyDetected(Boolean value)
  {
    if(value == null)
    {
      setValue(ACTIVELYDETECTED, "");
    }
    else
    {
      setValue(ACTIVELYDETECTED, java.lang.Boolean.toString(value));
    }
  }
  
  public java.util.Date getAdmissionDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(ADMISSIONDATE));
  }
  
  public void validateAdmissionDate()
  {
    this.validateAttribute(ADMISSIONDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAdmissionDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(ADMISSIONDATE);
  }
  
  public void setAdmissionDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(ADMISSIONDATE, "");
    }
    else
    {
      setValue(ADMISSIONDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public Integer getAge()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(AGE));
  }
  
  public void validateAge()
  {
    this.validateAttribute(AGE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAgeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(AGE);
  }
  
  public void setAge(Integer value)
  {
    if(value == null)
    {
      setValue(AGE, "");
    }
    else
    {
      setValue(AGE, java.lang.Integer.toString(value));
    }
  }
  
  public Boolean getAnaemiaPatient()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ANAEMIAPATIENT));
  }
  
  public void validateAnaemiaPatient()
  {
    this.validateAttribute(ANAEMIAPATIENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAnaemiaPatientMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(ANAEMIAPATIENT);
  }
  
  public void setAnaemiaPatient(Boolean value)
  {
    if(value == null)
    {
      setValue(ANAEMIAPATIENT, "");
    }
    else
    {
      setValue(ANAEMIAPATIENT, java.lang.Boolean.toString(value));
    }
  }
  
  public String getCaseIdentifier()
  {
    return getValue(CASEIDENTIFIER);
  }
  
  public void validateCaseIdentifier()
  {
    this.validateAttribute(CASEIDENTIFIER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCaseIdentifierMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(CASEIDENTIFIER);
  }
  
  public void setCaseIdentifier(String value)
  {
    if(value == null)
    {
      setValue(CASEIDENTIFIER, "");
    }
    else
    {
      setValue(CASEIDENTIFIER, value);
    }
  }
  
  public java.util.Date getCaseReportDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(CASEREPORTDATE));
  }
  
  public void validateCaseReportDate()
  {
    this.validateAttribute(CASEREPORTDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCaseReportDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(CASEREPORTDATE);
  }
  
  public void setCaseReportDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(CASEREPORTDATE, "");
    }
    else
    {
      setValue(CASEREPORTDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getClassification()
  {
    return getValue(CLASSIFICATION);
  }
  
  public void validateClassification()
  {
    this.validateAttribute(CLASSIFICATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getClassificationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(CLASSIFICATION);
  }
  
  public void setClassification(String value)
  {
    if(value == null)
    {
      setValue(CLASSIFICATION, "");
    }
    else
    {
      setValue(CLASSIFICATION, value);
    }
  }
  
  public String getConfirmedDiagnosis()
  {
    return getValue(CONFIRMEDDIAGNOSIS);
  }
  
  public void validateConfirmedDiagnosis()
  {
    this.validateAttribute(CONFIRMEDDIAGNOSIS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConfirmedDiagnosisMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(CONFIRMEDDIAGNOSIS);
  }
  
  public void setConfirmedDiagnosis(String value)
  {
    if(value == null)
    {
      setValue(CONFIRMEDDIAGNOSIS, "");
    }
    else
    {
      setValue(CONFIRMEDDIAGNOSIS, value);
    }
  }
  
  public java.util.Date getConfirmedDiagnosisDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(CONFIRMEDDIAGNOSISDATE));
  }
  
  public void validateConfirmedDiagnosisDate()
  {
    this.validateAttribute(CONFIRMEDDIAGNOSISDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConfirmedDiagnosisDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(CONFIRMEDDIAGNOSISDATE);
  }
  
  public void setConfirmedDiagnosisDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(CONFIRMEDDIAGNOSISDATE, "");
    }
    else
    {
      setValue(CONFIRMEDDIAGNOSISDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public java.util.Date getDateOfBirth()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(DATEOFBIRTH));
  }
  
  public void validateDateOfBirth()
  {
    this.validateAttribute(DATEOFBIRTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDateOfBirthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(DATEOFBIRTH);
  }
  
  public void setDateOfBirth(java.util.Date value)
  {
    if(value == null)
    {
      setValue(DATEOFBIRTH, "");
    }
    else
    {
      setValue(DATEOFBIRTH, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public java.util.Date getDateOfDeath()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(DATEOFDEATH));
  }
  
  public void validateDateOfDeath()
  {
    this.validateAttribute(DATEOFDEATH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDateOfDeathMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(DATEOFDEATH);
  }
  
  public void setDateOfDeath(java.util.Date value)
  {
    if(value == null)
    {
      setValue(DATEOFDEATH, "");
    }
    else
    {
      setValue(DATEOFDEATH, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getDetectedBy()
  {
    return getValue(DETECTEDBY);
  }
  
  public void validateDetectedBy()
  {
    this.validateAttribute(DETECTEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDetectedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(DETECTEDBY);
  }
  
  public void setDetectedBy(String value)
  {
    if(value == null)
    {
      setValue(DETECTEDBY, "");
    }
    else
    {
      setValue(DETECTEDBY, value);
    }
  }
  
  public String getDiagnosis()
  {
    return getValue(DIAGNOSIS);
  }
  
  public void validateDiagnosis()
  {
    this.validateAttribute(DIAGNOSIS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDiagnosisMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(DIAGNOSIS);
  }
  
  public void setDiagnosis(String value)
  {
    if(value == null)
    {
      setValue(DIAGNOSIS, "");
    }
    else
    {
      setValue(DIAGNOSIS, value);
    }
  }
  
  public java.util.Date getDiagnosisDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(DIAGNOSISDATE));
  }
  
  public void validateDiagnosisDate()
  {
    this.validateAttribute(DIAGNOSISDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDiagnosisDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(DIAGNOSISDATE);
  }
  
  public void setDiagnosisDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(DIAGNOSISDATE, "");
    }
    else
    {
      setValue(DIAGNOSISDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getDiagnosisType()
  {
    return getValue(DIAGNOSISTYPE);
  }
  
  public void validateDiagnosisType()
  {
    this.validateAttribute(DIAGNOSISTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDiagnosisTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(DIAGNOSISTYPE);
  }
  
  public void setDiagnosisType(String value)
  {
    if(value == null)
    {
      setValue(DIAGNOSISTYPE, "");
    }
    else
    {
      setValue(DIAGNOSISTYPE, value);
    }
  }
  
  public Boolean getDiedInFacility()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(DIEDINFACILITY));
  }
  
  public void validateDiedInFacility()
  {
    this.validateAttribute(DIEDINFACILITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDiedInFacilityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(DIEDINFACILITY);
  }
  
  public void setDiedInFacility(Boolean value)
  {
    if(value == null)
    {
      setValue(DIEDINFACILITY, "");
    }
    else
    {
      setValue(DIEDINFACILITY, java.lang.Boolean.toString(value));
    }
  }
  
  public java.util.Date getFacilityVisit()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(FACILITYVISIT));
  }
  
  public void validateFacilityVisit()
  {
    this.validateAttribute(FACILITYVISIT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getFacilityVisitMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(FACILITYVISIT);
  }
  
  public void setFacilityVisit(java.util.Date value)
  {
    if(value == null)
    {
      setValue(FACILITYVISIT, "");
    }
    else
    {
      setValue(FACILITYVISIT, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getFirstName()
  {
    return getValue(FIRSTNAME);
  }
  
  public void validateFirstName()
  {
    this.validateAttribute(FIRSTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getFirstNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(FIRSTNAME);
  }
  
  public void setFirstName(String value)
  {
    if(value == null)
    {
      setValue(FIRSTNAME, "");
    }
    else
    {
      setValue(FIRSTNAME, value);
    }
  }
  
  public dss.vector.solutions.geo.generated.HealthFacility getHealthFacility()
  {
    if (getValue(HEALTHFACILITY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.HealthFacility.get(getValue(HEALTHFACILITY));
    }
  }
  
  public void validateHealthFacility()
  {
    this.validateAttribute(HEALTHFACILITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getHealthFacilityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(HEALTHFACILITY);
  }
  
  public void setHealthFacility(dss.vector.solutions.geo.generated.HealthFacility value)
  {
    if(value == null)
    {
      setValue(HEALTHFACILITY, "");
    }
    else
    {
      setValue(HEALTHFACILITY, value.getId());
    }
  }
  
  public java.util.Date getHemorrhagicOnset()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(HEMORRHAGICONSET));
  }
  
  public void validateHemorrhagicOnset()
  {
    this.validateAttribute(HEMORRHAGICONSET);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getHemorrhagicOnsetMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(HEMORRHAGICONSET);
  }
  
  public void setHemorrhagicOnset(java.util.Date value)
  {
    if(value == null)
    {
      setValue(HEMORRHAGICONSET, "");
    }
    else
    {
      setValue(HEMORRHAGICONSET, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getIdentifier()
  {
    return getValue(IDENTIFIER);
  }
  
  public void validateIdentifier()
  {
    this.validateAttribute(IDENTIFIER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdentifierMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(IDENTIFIER);
  }
  
  public void setIdentifier(String value)
  {
    if(value == null)
    {
      setValue(IDENTIFIER, "");
    }
    else
    {
      setValue(IDENTIFIER, value);
    }
  }
  
  public String getLabTest()
  {
    return getValue(LABTEST);
  }
  
  public void validateLabTest()
  {
    this.validateAttribute(LABTEST);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLabTestMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(LABTEST);
  }
  
  public void setLabTest(String value)
  {
    if(value == null)
    {
      setValue(LABTEST, "");
    }
    else
    {
      setValue(LABTEST, value);
    }
  }
  
  public java.util.Date getLabTestDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(LABTESTDATE));
  }
  
  public void validateLabTestDate()
  {
    this.validateAttribute(LABTESTDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLabTestDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(LABTESTDATE);
  }
  
  public void setLabTestDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(LABTESTDATE, "");
    }
    else
    {
      setValue(LABTESTDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getLastName()
  {
    return getValue(LASTNAME);
  }
  
  public void validateLastName()
  {
    this.validateAttribute(LASTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLastNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(LASTNAME);
  }
  
  public void setLastName(String value)
  {
    if(value == null)
    {
      setValue(LASTNAME, "");
    }
    else
    {
      setValue(LASTNAME, value);
    }
  }
  
  public String getMalariaType()
  {
    return getValue(MALARIATYPE);
  }
  
  public void validateMalariaType()
  {
    this.validateAttribute(MALARIATYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMalariaTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(MALARIATYPE);
  }
  
  public void setMalariaType(String value)
  {
    if(value == null)
    {
      setValue(MALARIATYPE, "");
    }
    else
    {
      setValue(MALARIATYPE, value);
    }
  }
  
  public String getOrigin()
  {
    return getValue(ORIGIN);
  }
  
  public void validateOrigin()
  {
    this.validateAttribute(ORIGIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOriginMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(ORIGIN);
  }
  
  public void setOrigin(String value)
  {
    if(value == null)
    {
      setValue(ORIGIN, "");
    }
    else
    {
      setValue(ORIGIN, value);
    }
  }
  
  public String getOtherSettlements()
  {
    return getValue(OTHERSETTLEMENTS);
  }
  
  public void validateOtherSettlements()
  {
    this.validateAttribute(OTHERSETTLEMENTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOtherSettlementsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(OTHERSETTLEMENTS);
  }
  
  public void setOtherSettlements(String value)
  {
    if(value == null)
    {
      setValue(OTHERSETTLEMENTS, "");
    }
    else
    {
      setValue(OTHERSETTLEMENTS, value);
    }
  }
  
  public String getPatientCategory()
  {
    return getValue(PATIENTCATEGORY);
  }
  
  public void validatePatientCategory()
  {
    this.validateAttribute(PATIENTCATEGORY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPatientCategoryMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PATIENTCATEGORY);
  }
  
  public void setPatientCategory(String value)
  {
    if(value == null)
    {
      setValue(PATIENTCATEGORY, "");
    }
    else
    {
      setValue(PATIENTCATEGORY, value);
    }
  }
  
  public java.util.Date getPhysicianDateOfBirth()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(PHYSICIANDATEOFBIRTH));
  }
  
  public void validatePhysicianDateOfBirth()
  {
    this.validateAttribute(PHYSICIANDATEOFBIRTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPhysicianDateOfBirthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PHYSICIANDATEOFBIRTH);
  }
  
  public void setPhysicianDateOfBirth(java.util.Date value)
  {
    if(value == null)
    {
      setValue(PHYSICIANDATEOFBIRTH, "");
    }
    else
    {
      setValue(PHYSICIANDATEOFBIRTH, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getPhysicianFirstName()
  {
    return getValue(PHYSICIANFIRSTNAME);
  }
  
  public void validatePhysicianFirstName()
  {
    this.validateAttribute(PHYSICIANFIRSTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPhysicianFirstNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PHYSICIANFIRSTNAME);
  }
  
  public void setPhysicianFirstName(String value)
  {
    if(value == null)
    {
      setValue(PHYSICIANFIRSTNAME, "");
    }
    else
    {
      setValue(PHYSICIANFIRSTNAME, value);
    }
  }
  
  public String getPhysicianIdentifier()
  {
    return getValue(PHYSICIANIDENTIFIER);
  }
  
  public void validatePhysicianIdentifier()
  {
    this.validateAttribute(PHYSICIANIDENTIFIER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPhysicianIdentifierMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PHYSICIANIDENTIFIER);
  }
  
  public void setPhysicianIdentifier(String value)
  {
    if(value == null)
    {
      setValue(PHYSICIANIDENTIFIER, "");
    }
    else
    {
      setValue(PHYSICIANIDENTIFIER, value);
    }
  }
  
  public String getPhysicianLastName()
  {
    return getValue(PHYSICIANLASTNAME);
  }
  
  public void validatePhysicianLastName()
  {
    this.validateAttribute(PHYSICIANLASTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPhysicianLastNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PHYSICIANLASTNAME);
  }
  
  public void setPhysicianLastName(String value)
  {
    if(value == null)
    {
      setValue(PHYSICIANLASTNAME, "");
    }
    else
    {
      setValue(PHYSICIANLASTNAME, value);
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getPhysicianResidence()
  {
    if (getValue(PHYSICIANRESIDENCE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(PHYSICIANRESIDENCE));
    }
  }
  
  public void validatePhysicianResidence()
  {
    this.validateAttribute(PHYSICIANRESIDENCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPhysicianResidenceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PHYSICIANRESIDENCE);
  }
  
  public void setPhysicianResidence(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(PHYSICIANRESIDENCE, "");
    }
    else
    {
      setValue(PHYSICIANRESIDENCE, value.getId());
    }
  }
  
  public String getPhysicianSex()
  {
    return getValue(PHYSICIANSEX);
  }
  
  public void validatePhysicianSex()
  {
    this.validateAttribute(PHYSICIANSEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPhysicianSexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PHYSICIANSEX);
  }
  
  public void setPhysicianSex(String value)
  {
    if(value == null)
    {
      setValue(PHYSICIANSEX, "");
    }
    else
    {
      setValue(PHYSICIANSEX, value);
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getPhysicianWorkplace()
  {
    if (getValue(PHYSICIANWORKPLACE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(PHYSICIANWORKPLACE));
    }
  }
  
  public void validatePhysicianWorkplace()
  {
    this.validateAttribute(PHYSICIANWORKPLACE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPhysicianWorkplaceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PHYSICIANWORKPLACE);
  }
  
  public void setPhysicianWorkplace(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(PHYSICIANWORKPLACE, "");
    }
    else
    {
      setValue(PHYSICIANWORKPLACE, value.getId());
    }
  }
  
  public java.util.Date getPlasmaLeakageOnset()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(PLASMALEAKAGEONSET));
  }
  
  public void validatePlasmaLeakageOnset()
  {
    this.validateAttribute(PLASMALEAKAGEONSET);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPlasmaLeakageOnsetMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PLASMALEAKAGEONSET);
  }
  
  public void setPlasmaLeakageOnset(java.util.Date value)
  {
    if(value == null)
    {
      setValue(PLASMALEAKAGEONSET, "");
    }
    else
    {
      setValue(PLASMALEAKAGEONSET, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public Boolean getPregnant()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PREGNANT));
  }
  
  public void validatePregnant()
  {
    this.validateAttribute(PREGNANT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPregnantMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PREGNANT);
  }
  
  public void setPregnant(Boolean value)
  {
    if(value == null)
    {
      setValue(PREGNANT, "");
    }
    else
    {
      setValue(PREGNANT, java.lang.Boolean.toString(value));
    }
  }
  
  public String getPrimaryInfection()
  {
    return getValue(PRIMARYINFECTION);
  }
  
  public void validatePrimaryInfection()
  {
    this.validateAttribute(PRIMARYINFECTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPrimaryInfectionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PRIMARYINFECTION);
  }
  
  public void setPrimaryInfection(String value)
  {
    if(value == null)
    {
      setValue(PRIMARYINFECTION, "");
    }
    else
    {
      setValue(PRIMARYINFECTION, value);
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getProbableSource()
  {
    if (getValue(PROBABLESOURCE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(PROBABLESOURCE));
    }
  }
  
  public void validateProbableSource()
  {
    this.validateAttribute(PROBABLESOURCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getProbableSourceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PROBABLESOURCE);
  }
  
  public void setProbableSource(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(PROBABLESOURCE, "");
    }
    else
    {
      setValue(PROBABLESOURCE, value.getId());
    }
  }
  
  public Boolean getProperlyRelease()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PROPERLYRELEASE));
  }
  
  public void validateProperlyRelease()
  {
    this.validateAttribute(PROPERLYRELEASE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getProperlyReleaseMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(PROPERLYRELEASE);
  }
  
  public void setProperlyRelease(Boolean value)
  {
    if(value == null)
    {
      setValue(PROPERLYRELEASE, "");
    }
    else
    {
      setValue(PROPERLYRELEASE, java.lang.Boolean.toString(value));
    }
  }
  
  public String getReferralReason()
  {
    return getValue(REFERRALREASON);
  }
  
  public void validateReferralReason()
  {
    this.validateAttribute(REFERRALREASON);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getReferralReasonMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(REFERRALREASON);
  }
  
  public void setReferralReason(String value)
  {
    if(value == null)
    {
      setValue(REFERRALREASON, "");
    }
    else
    {
      setValue(REFERRALREASON, value);
    }
  }
  
  public Boolean getReferredFrom()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(REFERREDFROM));
  }
  
  public void validateReferredFrom()
  {
    this.validateAttribute(REFERREDFROM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getReferredFromMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(REFERREDFROM);
  }
  
  public void setReferredFrom(Boolean value)
  {
    if(value == null)
    {
      setValue(REFERREDFROM, "");
    }
    else
    {
      setValue(REFERREDFROM, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getReferredTo()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(REFERREDTO));
  }
  
  public void validateReferredTo()
  {
    this.validateAttribute(REFERREDTO);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getReferredToMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(REFERREDTO);
  }
  
  public void setReferredTo(Boolean value)
  {
    if(value == null)
    {
      setValue(REFERREDTO, "");
    }
    else
    {
      setValue(REFERREDTO, java.lang.Boolean.toString(value));
    }
  }
  
  public java.util.Date getReleaseDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(RELEASEDATE));
  }
  
  public void validateReleaseDate()
  {
    this.validateAttribute(RELEASEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getReleaseDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(RELEASEDATE);
  }
  
  public void setReleaseDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(RELEASEDATE, "");
    }
    else
    {
      setValue(RELEASEDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getResidence()
  {
    if (getValue(RESIDENCE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(RESIDENCE));
    }
  }
  
  public void validateResidence()
  {
    this.validateAttribute(RESIDENCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getResidenceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(RESIDENCE);
  }
  
  public void setResidence(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(RESIDENCE, "");
    }
    else
    {
      setValue(RESIDENCE, value.getId());
    }
  }
  
  public String getSampleType()
  {
    return getValue(SAMPLETYPE);
  }
  
  public void validateSampleType()
  {
    this.validateAttribute(SAMPLETYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSampleTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(SAMPLETYPE);
  }
  
  public void setSampleType(String value)
  {
    if(value == null)
    {
      setValue(SAMPLETYPE, "");
    }
    else
    {
      setValue(SAMPLETYPE, value);
    }
  }
  
  public String getSex()
  {
    return getValue(SEX);
  }
  
  public void validateSex()
  {
    this.validateAttribute(SEX);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSexMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(SEX);
  }
  
  public void setSex(String value)
  {
    if(value == null)
    {
      setValue(SEX, "");
    }
    else
    {
      setValue(SEX, value);
    }
  }
  
  public String getSymptomComments()
  {
    return getValue(SYMPTOMCOMMENTS);
  }
  
  public void validateSymptomComments()
  {
    this.validateAttribute(SYMPTOMCOMMENTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSymptomCommentsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(SYMPTOMCOMMENTS);
  }
  
  public void setSymptomComments(String value)
  {
    if(value == null)
    {
      setValue(SYMPTOMCOMMENTS, "");
    }
    else
    {
      setValue(SYMPTOMCOMMENTS, value);
    }
  }
  
  public java.util.Date getSymptomOnset()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(SYMPTOMONSET));
  }
  
  public void validateSymptomOnset()
  {
    this.validateAttribute(SYMPTOMONSET);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSymptomOnsetMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(SYMPTOMONSET);
  }
  
  public void setSymptomOnset(java.util.Date value)
  {
    if(value == null)
    {
      setValue(SYMPTOMONSET, "");
    }
    else
    {
      setValue(SYMPTOMONSET, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getTestResult()
  {
    return getValue(TESTRESULT);
  }
  
  public void validateTestResult()
  {
    this.validateAttribute(TESTRESULT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestResultMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(TESTRESULT);
  }
  
  public void setTestResult(String value)
  {
    if(value == null)
    {
      setValue(TESTRESULT, "");
    }
    else
    {
      setValue(TESTRESULT, value);
    }
  }
  
  public java.util.Date getTestSampleDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(TESTSAMPLEDATE));
  }
  
  public void validateTestSampleDate()
  {
    this.validateAttribute(TESTSAMPLEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTestSampleDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(TESTSAMPLEDATE);
  }
  
  public void setTestSampleDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(TESTSAMPLEDATE, "");
    }
    else
    {
      setValue(TESTSAMPLEDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getTreatment()
  {
    return getValue(TREATMENT);
  }
  
  public void validateTreatment()
  {
    this.validateAttribute(TREATMENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTreatmentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(TREATMENT);
  }
  
  public void setTreatment(String value)
  {
    if(value == null)
    {
      setValue(TREATMENT, "");
    }
    else
    {
      setValue(TREATMENT, value);
    }
  }
  
  public String getTreatmentMethod()
  {
    return getValue(TREATMENTMETHOD);
  }
  
  public void validateTreatmentMethod()
  {
    this.validateAttribute(TREATMENTMETHOD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTreatmentMethodMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(TREATMENTMETHOD);
  }
  
  public void setTreatmentMethod(String value)
  {
    if(value == null)
    {
      setValue(TREATMENTMETHOD, "");
    }
    else
    {
      setValue(TREATMENTMETHOD, value);
    }
  }
  
  public java.util.Date getTreatmentStartDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(TREATMENTSTARTDATE));
  }
  
  public void validateTreatmentStartDate()
  {
    this.validateAttribute(TREATMENTSTARTDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTreatmentStartDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(TREATMENTSTARTDATE);
  }
  
  public void setTreatmentStartDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(TREATMENTSTARTDATE, "");
    }
    else
    {
      setValue(TREATMENTSTARTDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getWorkplace()
  {
    if (getValue(WORKPLACE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(WORKPLACE));
    }
  }
  
  public void validateWorkplace()
  {
    this.validateAttribute(WORKPLACE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getWorkplaceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.IndividualCaseExcelView.CLASS);
    return mdClassIF.definesAttribute(WORKPLACE);
  }
  
  public void setWorkplace(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(WORKPLACE, "");
    }
    else
    {
      setValue(WORKPLACE, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static IndividualCaseExcelView get(String id)
  {
    return (IndividualCaseExcelView) com.runwaysdk.business.View.get(id);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
