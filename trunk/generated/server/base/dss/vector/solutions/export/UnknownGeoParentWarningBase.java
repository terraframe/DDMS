/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.export;

@com.runwaysdk.business.ClassSignature(hash = 2046101108)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to UnknownGeoParentWarning.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class UnknownGeoParentWarningBase extends com.runwaysdk.business.Warning implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.export.UnknownGeoParentWarning";
  public static java.lang.String CHILDNAME = "childName";
  public static java.lang.String DEFAULTPARENT = "defaultParent";
  public static java.lang.String ID = "id";
  public static java.lang.String PARENTNAME = "parentName";
  public static java.lang.String PARENTTYPE = "parentType";
  private static final long serialVersionUID = 2046101108;
  
  public UnknownGeoParentWarningBase()
  {
    super();
  }
  
  public String getChildName()
  {
    return getValue(CHILDNAME);
  }
  
  public void validateChildName()
  {
    this.validateAttribute(CHILDNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getChildNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.UnknownGeoParentWarning.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CHILDNAME);
  }
  
  public void setChildName(String value)
  {
    if(value == null)
    {
      setValue(CHILDNAME, "");
    }
    else
    {
      setValue(CHILDNAME, value);
    }
  }
  
  public String getDefaultParent()
  {
    return getValue(DEFAULTPARENT);
  }
  
  public void validateDefaultParent()
  {
    this.validateAttribute(DEFAULTPARENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getDefaultParentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.UnknownGeoParentWarning.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(DEFAULTPARENT);
  }
  
  public void setDefaultParent(String value)
  {
    if(value == null)
    {
      setValue(DEFAULTPARENT, "");
    }
    else
    {
      setValue(DEFAULTPARENT, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.UnknownGeoParentWarning.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getParentName()
  {
    return getValue(PARENTNAME);
  }
  
  public void validateParentName()
  {
    this.validateAttribute(PARENTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getParentNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.UnknownGeoParentWarning.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(PARENTNAME);
  }
  
  public void setParentName(String value)
  {
    if(value == null)
    {
      setValue(PARENTNAME, "");
    }
    else
    {
      setValue(PARENTNAME, value);
    }
  }
  
  public String getParentType()
  {
    return getValue(PARENTTYPE);
  }
  
  public void validateParentType()
  {
    this.validateAttribute(PARENTTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getParentTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.export.UnknownGeoParentWarning.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(PARENTTYPE);
  }
  
  public void setParentType(String value)
  {
    if(value == null)
    {
      setValue(PARENTTYPE, "");
    }
    else
    {
      setValue(PARENTTYPE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{childName}", this.getChildName());
    message = replace(message, "{defaultParent}", this.getDefaultParent());
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{parentName}", this.getParentName());
    message = replace(message, "{parentType}", this.getParentType());
    return message;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
