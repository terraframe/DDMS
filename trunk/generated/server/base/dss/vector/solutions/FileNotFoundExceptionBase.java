package dss.vector.solutions;

@com.runwaysdk.business.ClassSignature(hash = -966955496)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to FileNotFoundException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class FileNotFoundExceptionBase extends com.runwaysdk.business.SmartException implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.FileNotFoundException";
  public static java.lang.String ID = "id";
  public static java.lang.String NAME = "name";
  public static java.lang.String PATH = "path";
  private static final long serialVersionUID = -966955496;
  
  public FileNotFoundExceptionBase()
  {
    super();
  }
  
  public FileNotFoundExceptionBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public FileNotFoundExceptionBase(java.lang.String developerMessage, java.lang.Throwable cause)
  {
    super(developerMessage, cause);
  }
  
  public FileNotFoundExceptionBase(java.lang.Throwable cause)
  {
    super(cause);
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.FileNotFoundException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getName()
  {
    return getValue(NAME);
  }
  
  public void validateName()
  {
    this.validateAttribute(NAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.FileNotFoundException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(NAME);
  }
  
  public void setName(String value)
  {
    if(value == null)
    {
      setValue(NAME, "");
    }
    else
    {
      setValue(NAME, value);
    }
  }
  
  public String getPath()
  {
    return getValue(PATH);
  }
  
  public void validatePath()
  {
    this.validateAttribute(PATH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getPathMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.FileNotFoundException.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(PATH);
  }
  
  public void setPath(String value)
  {
    if(value == null)
    {
      setValue(PATH, "");
    }
    else
    {
      setValue(PATH, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{id}", this.getId());
    message = replace(message, "{name}", this.getName());
    message = replace(message, "{path}", this.getPath());
    return message;
  }
  
}
