package dss.vector.solutions.intervention.monitor;

@com.runwaysdk.business.ClassSignature(hash = -1799403352)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ControlInterventionView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ControlInterventionViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.intervention.monitor.ControlInterventionView";
  public static java.lang.String AGGREGATEDPREMISEUNIVERSAL = "aggregatedPremiseUniversal";
  public static java.lang.String COMMENTS = "comments";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String ENDDATE = "endDate";
  public static java.lang.String GEOENTITY = "geoEntity";
  public static java.lang.String ID = "id";
  public static java.lang.String INDIVIDULPREMISEUNIVERSAL = "individulPremiseUniversal";
  public static java.lang.String PERSONINTERVENTION = "personIntervention";
  public static java.lang.String STARTDATE = "startDate";
  private static final long serialVersionUID = -1799403352;
  
  public ControlInterventionViewBase()
  {
    super();
  }
  
  public dss.vector.solutions.geo.GeoHierarchy getAggregatedPremiseUniversal()
  {
    if (getValue(AGGREGATEDPREMISEUNIVERSAL).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.GeoHierarchy.get(getValue(AGGREGATEDPREMISEUNIVERSAL));
    }
  }
  
  public void validateAggregatedPremiseUniversal()
  {
    this.validateAttribute(AGGREGATEDPREMISEUNIVERSAL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAggregatedPremiseUniversalMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ControlInterventionView.CLASS);
    return mdClassIF.definesAttribute(AGGREGATEDPREMISEUNIVERSAL);
  }
  
  public void setAggregatedPremiseUniversal(dss.vector.solutions.geo.GeoHierarchy value)
  {
    if(value == null)
    {
      setValue(AGGREGATEDPREMISEUNIVERSAL, "");
    }
    else
    {
      setValue(AGGREGATEDPREMISEUNIVERSAL, value.getId());
    }
  }
  
  public String getComments()
  {
    return getValue(COMMENTS);
  }
  
  public void validateComments()
  {
    this.validateAttribute(COMMENTS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCommentsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ControlInterventionView.CLASS);
    return mdClassIF.definesAttribute(COMMENTS);
  }
  
  public void setComments(String value)
  {
    if(value == null)
    {
      setValue(COMMENTS, "");
    }
    else
    {
      setValue(COMMENTS, value);
    }
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ControlInterventionView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public java.util.Date getEndDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(ENDDATE));
  }
  
  public void validateEndDate()
  {
    this.validateAttribute(ENDDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getEndDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ControlInterventionView.CLASS);
    return mdClassIF.definesAttribute(ENDDATE);
  }
  
  public void setEndDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(ENDDATE, "");
    }
    else
    {
      setValue(ENDDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getGeoEntity()
  {
    if (getValue(GEOENTITY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(GEOENTITY));
    }
  }
  
  public void validateGeoEntity()
  {
    this.validateAttribute(GEOENTITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getGeoEntityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ControlInterventionView.CLASS);
    return mdClassIF.definesAttribute(GEOENTITY);
  }
  
  public void setGeoEntity(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(GEOENTITY, "");
    }
    else
    {
      setValue(GEOENTITY, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ControlInterventionView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.geo.GeoHierarchy getIndividulPremiseUniversal()
  {
    if (getValue(INDIVIDULPREMISEUNIVERSAL).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.GeoHierarchy.get(getValue(INDIVIDULPREMISEUNIVERSAL));
    }
  }
  
  public void validateIndividulPremiseUniversal()
  {
    this.validateAttribute(INDIVIDULPREMISEUNIVERSAL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIndividulPremiseUniversalMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ControlInterventionView.CLASS);
    return mdClassIF.definesAttribute(INDIVIDULPREMISEUNIVERSAL);
  }
  
  public void setIndividulPremiseUniversal(dss.vector.solutions.geo.GeoHierarchy value)
  {
    if(value == null)
    {
      setValue(INDIVIDULPREMISEUNIVERSAL, "");
    }
    else
    {
      setValue(INDIVIDULPREMISEUNIVERSAL, value.getId());
    }
  }
  
  public String getPersonIntervention()
  {
    return getValue(PERSONINTERVENTION);
  }
  
  public void validatePersonIntervention()
  {
    this.validateAttribute(PERSONINTERVENTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPersonInterventionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ControlInterventionView.CLASS);
    return mdClassIF.definesAttribute(PERSONINTERVENTION);
  }
  
  public void setPersonIntervention(String value)
  {
    if(value == null)
    {
      setValue(PERSONINTERVENTION, "");
    }
    else
    {
      setValue(PERSONINTERVENTION, value);
    }
  }
  
  public java.util.Date getStartDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(STARTDATE));
  }
  
  public void validateStartDate()
  {
    this.validateAttribute(STARTDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getStartDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.ControlInterventionView.CLASS);
    return mdClassIF.definesAttribute(STARTDATE);
  }
  
  public void setStartDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(STARTDATE, "");
    }
    else
    {
      setValue(STARTDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ControlInterventionView get(String id)
  {
    return (ControlInterventionView) com.runwaysdk.business.View.get(id);
  }
  
  public dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView[] applyWithAggregatedPremiseViews(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView[] premises, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonView[][] reasons, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodView[][] methods)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView[] applyWithAggregatedPremiseViews(java.lang.String id, dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView[] premises, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonView[][] reasons, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodView[][] methods)
  {
    ControlInterventionView _instance = ControlInterventionView.get(id);
    return _instance.applyWithAggregatedPremiseViews(premises, reasons, methods);
  }
  
  public dss.vector.solutions.intervention.monitor.IndividualPremiseVisitView[] applyWithIndividualPremiseViews(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitView[] premises, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodView[][] methods)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.intervention.monitor.IndividualPremiseVisitView[] applyWithIndividualPremiseViews(java.lang.String id, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitView[] premises, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodView[][] methods)
  {
    ControlInterventionView _instance = ControlInterventionView.get(id);
    return _instance.applyWithIndividualPremiseViews(premises, methods);
  }
  
  public dss.vector.solutions.intervention.monitor.PersonInterventionView[] applyWithPersonInterventionViews(dss.vector.solutions.intervention.monitor.PersonInterventionView[] premises, dss.vector.solutions.intervention.monitor.PersonInterventionMethodView[][] methods)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.intervention.monitor.PersonInterventionView[] applyWithPersonInterventionViews(java.lang.String id, dss.vector.solutions.intervention.monitor.PersonInterventionView[] premises, dss.vector.solutions.intervention.monitor.PersonInterventionMethodView[][] methods)
  {
    ControlInterventionView _instance = ControlInterventionView.get(id);
    return _instance.applyWithPersonInterventionViews(premises, methods);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    ControlInterventionView _instance = ControlInterventionView.get(id);
    _instance.deleteConcrete();
  }
  
  public dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView[] getAggregatedPremiseViews()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView[] getAggregatedPremiseViews(java.lang.String id)
  {
    ControlInterventionView _instance = ControlInterventionView.get(id);
    return _instance.getAggregatedPremiseViews();
  }
  
  public dss.vector.solutions.intervention.monitor.IndividualPremiseVisitView[] getIndividualPremiseViews()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.intervention.monitor.IndividualPremiseVisitView[] getIndividualPremiseViews(java.lang.String id)
  {
    ControlInterventionView _instance = ControlInterventionView.get(id);
    return _instance.getIndividualPremiseViews();
  }
  
  public static dss.vector.solutions.intervention.monitor.ControlInterventionView getIntervention(dss.vector.solutions.intervention.monitor.ControlInterventionView dto)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.intervention.monitor.ControlInterventionViewQuery getMostRecent()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.intervention.monitor.PersonInterventionView[] getPersonInterventionViews()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.intervention.monitor.PersonInterventionView[] getPersonInterventionViews(java.lang.String id)
  {
    ControlInterventionView _instance = ControlInterventionView.get(id);
    return _instance.getPersonInterventionViews();
  }
  
  public static dss.vector.solutions.intervention.monitor.ControlInterventionViewQuery search(dss.vector.solutions.intervention.monitor.ControlInterventionView criteria, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.ControlInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
