package dss.vector.solutions.intervention.monitor;

@com.runwaysdk.business.ClassSignature(hash = -2142287199)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to IndividualInstance.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class IndividualInstanceQuery extends com.runwaysdk.query.GeneratedBusinessQuery
 implements com.runwaysdk.generation.loader.Reloadable
{

  public IndividualInstanceQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public IndividualInstanceQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.intervention.monitor.IndividualInstance.CLASS;
  }
  public com.runwaysdk.query.SelectableBoolean getActivelyDetected()
  {
    return getActivelyDetected(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.ACTIVELYDETECTED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.ACTIVELYDETECTED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getAdmissionDate()
  {
    return getAdmissionDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.ADMISSIONDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.ADMISSIONDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient()
  {
    return getAnaemiaPatient(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.ANAEMIAPATIENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.ANAEMIAPATIENT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getCaseIdentifier()
  {
    return getCaseIdentifier(null);

  }
 
  public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.CASEIDENTIFIER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.CASEIDENTIFIER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification()
  {
    return getClassification(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis()
  {
    return getConfirmedDiagnosis(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate()
  {
    return getConfirmedDiagnosisDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSISDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSISDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getDateOfDeath()
  {
    return getDateOfDeath(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.DATEOFDEATH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.DATEOFDEATH, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy()
  {
    return getDetectedBy(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis()
  {
    return getDiagnosis(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType()
  {
    return getDiagnosisType(null);

  }
 
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE);

    return (dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE);

    return (dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getDiedInFacility()
  {
    return getDiedInFacility(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIEDINFACILITY, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIEDINFACILITY, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getFacilityVisit()
  {
    return getFacilityVisit(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.FACILITYVISIT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.FACILITYVISIT, alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility()
  {
    return getHealthFacility(null);

  }
 
  public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY);

    return (dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY);

    return (dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.ID, alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase()
  {
    return getIndividualCase(null);

  }
 
  public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE);

    return (dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE);

    return (dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.KEYNAME, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest()
  {
    return getLabTest(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLabTestDate()
  {
    return getLabTestDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTESTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTESTDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType()
  {
    return getMalariaType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory()
  {
    return getPatientCategory(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician()
  {
    return getPhysician(null);

  }
 
  public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN);

    return (dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN);

    return (dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getPregnant()
  {
    return getPregnant(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPregnant(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.PREGNANT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPregnant(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.PREGNANT, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection()
  {
    return getPrimaryInfection(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getProperlyRelease()
  {
    return getProperlyRelease(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.PROPERLYRELEASE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.PROPERLYRELEASE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason()
  {
    return getReferralReason(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getReferredFrom()
  {
    return getReferredFrom(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDFROM, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDFROM, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getReferredTo()
  {
    return getReferredTo(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDTO, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDTO, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getReleaseDate()
  {
    return getReleaseDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.RELEASEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.RELEASEDATE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType()
  {
    return getSampleType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.SITEMASTER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom()
  {
    return getSymptom(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSymptomComments()
  {
    return getSymptomComments(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSymptomComments(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOMCOMMENTS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSymptomComments(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOMCOMMENTS, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult()
  {
    return getTestResult(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getTestSampleDate()
  {
    return getTestSampleDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTSAMPLEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTSAMPLEDATE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment()
  {
    return getTreatment(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod()
  {
    return getTreatmentMethod(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD);

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getTreatmentStartDate()
  {
    return getTreatmentStartDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTSTARTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTSTARTDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.IndividualInstance.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY)) 
    {
       return new dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE)) 
    {
       return new dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN)) 
    {
       return new dss.vector.solutions.PhysicianQuery.PhysicianQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeEnumeration enumerationFactory( com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  String mdEnumerationTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF masterListMdBusinessIF, String masterListTalbeAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE)) 
    {
       return new dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQuery((com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends IndividualInstance> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<IndividualInstance>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition symptoms()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_symptoms()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition symptoms(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.getBusinessQuery().isParentIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_symptoms(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition symptoms(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_symptoms(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(individualCaseSymptomQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_symptoms()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_symptoms(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.getBusinessQuery().isNotParentIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(individualCaseSymptomQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface IndividualInstanceQueryReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableBoolean getActivelyDetected();
    public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias);
    public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getAdmissionDate();
    public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias);
    public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient();
    public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias);
    public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getCaseIdentifier();
    public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias);
    public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate();
    public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias);
    public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getDateOfDeath();
    public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias);
    public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias, String displayLabel);
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType();
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias);
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getDiedInFacility();
    public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias);
    public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getFacilityVisit();
    public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias);
    public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias, String displayLabel);
    public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility();
    public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias);
    public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase();
    public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias);
    public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLabTestDate();
    public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias, String displayLabel);
    public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician();
    public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias);
    public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getPregnant();
    public com.runwaysdk.query.SelectableBoolean getPregnant(String alias);
    public com.runwaysdk.query.SelectableBoolean getPregnant(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getProperlyRelease();
    public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias);
    public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getReferredFrom();
    public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias);
    public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getReferredTo();
    public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias);
    public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getReleaseDate();
    public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias);
    public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSymptomComments();
    public com.runwaysdk.query.SelectableChar getSymptomComments(String alias);
    public com.runwaysdk.query.SelectableChar getSymptomComments(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getTestSampleDate();
    public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias);
    public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getTreatmentStartDate();
    public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias);
    public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.intervention.monitor.IndividualInstance individualInstance);

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.intervention.monitor.IndividualInstance individualInstance);


  public com.runwaysdk.query.Condition symptoms();

  public com.runwaysdk.query.Condition symptoms(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery);


  public com.runwaysdk.query.Condition SUBSELECT_symptoms();

  public com.runwaysdk.query.Condition SUBSELECT_symptoms(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery);


  public com.runwaysdk.query.Condition NOT_IN_symptoms();

  public com.runwaysdk.query.Condition NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class IndividualInstanceQueryReference extends com.runwaysdk.query.AttributeReference
 implements IndividualInstanceQueryReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {

  public IndividualInstanceQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.intervention.monitor.IndividualInstance individualInstance)
    {
      if(individualInstance == null) return this.EQ((java.lang.String)null);
      return this.EQ(individualInstance.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.intervention.monitor.IndividualInstance individualInstance)
    {
      if(individualInstance == null) return this.NE((java.lang.String)null);
      return this.NE(individualInstance.getId());
    }

  public com.runwaysdk.query.SelectableBoolean getActivelyDetected()
  {
    return getActivelyDetected(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ACTIVELYDETECTED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ACTIVELYDETECTED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getAdmissionDate()
  {
    return getAdmissionDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ADMISSIONDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ADMISSIONDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient()
  {
    return getAnaemiaPatient(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ANAEMIAPATIENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ANAEMIAPATIENT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getCaseIdentifier()
  {
    return getCaseIdentifier(null);

  }
 
  public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CASEIDENTIFIER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CASEIDENTIFIER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification()
  {
    return getClassification(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis()
  {
    return getConfirmedDiagnosis(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate()
  {
    return getConfirmedDiagnosisDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSISDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSISDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getDateOfDeath()
  {
    return getDateOfDeath(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DATEOFDEATH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DATEOFDEATH, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy()
  {
    return getDetectedBy(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis()
  {
    return getDiagnosis(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS,  alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType()
  {
    return getDiagnosisType(null);

  }
 
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias)
  {
    return (dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias, String displayLabel)
  {
    return (dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getDiedInFacility()
  {
    return getDiedInFacility(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIEDINFACILITY, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIEDINFACILITY, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getFacilityVisit()
  {
    return getFacilityVisit(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.FACILITYVISIT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.FACILITYVISIT, alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility()
  {
    return getHealthFacility(null);

  }
 
  public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias)
  {
    return (dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias, String displayLabel)
  {
    return (dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ID, alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase()
  {
    return getIndividualCase(null);

  }
 
  public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias)
  {
    return (dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias, String displayLabel)
  {
    return (dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.KEYNAME, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest()
  {
    return getLabTest(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLabTestDate()
  {
    return getLabTestDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTESTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTESTDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType()
  {
    return getMalariaType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory()
  {
    return getPatientCategory(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY,  alias, displayLabel);

  }
  public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician()
  {
    return getPhysician(null);

  }
 
  public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias)
  {
    return (dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN, alias, null);

  }
 
  public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias, String displayLabel)
  {
    return (dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getPregnant()
  {
    return getPregnant(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPregnant(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PREGNANT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPregnant(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PREGNANT, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection()
  {
    return getPrimaryInfection(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getProperlyRelease()
  {
    return getProperlyRelease(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PROPERLYRELEASE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PROPERLYRELEASE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason()
  {
    return getReferralReason(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getReferredFrom()
  {
    return getReferredFrom(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDFROM, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDFROM, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getReferredTo()
  {
    return getReferredTo(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDTO, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDTO, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getReleaseDate()
  {
    return getReleaseDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.RELEASEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.RELEASEDATE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType()
  {
    return getSampleType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SITEMASTER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom()
  {
    return getSymptom(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSymptomComments()
  {
    return getSymptomComments(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSymptomComments(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOMCOMMENTS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSymptomComments(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOMCOMMENTS, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult()
  {
    return getTestResult(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getTestSampleDate()
  {
    return getTestSampleDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTSAMPLEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTSAMPLEDATE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment()
  {
    return getTreatment(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod()
  {
    return getTreatmentMethod(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getTreatmentStartDate()
  {
    return getTreatmentStartDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTSTARTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTSTARTDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TYPE, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition symptoms()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_symptoms()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition symptoms(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.isParentIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_symptoms(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.isParentIn_SUBSELECT(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition symptoms(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_symptoms(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasChild(termQuery));
    return this.isParentIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasChild(termQuery));
    return this.isParentIn_SUBSELECT(individualCaseSymptomQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_symptoms()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_symptoms(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.isNotParentIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.isNotParentIn_SUBSELECT(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasChild(termQuery));
    return this.isNotParentIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_symptoms(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasChild(termQuery));
    return this.isNotParentIn_SUBSELECT(individualCaseSymptomQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY)) 
    {
       return new dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE)) 
    {
       return new dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN)) 
    {
       return new dss.vector.solutions.PhysicianQuery.PhysicianQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeEnumeration enumerationFactory( com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  String mdEnumerationTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF masterListMdBusinessIF, String masterListTalbeAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE)) 
    {
       return new dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQuery((com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface IndividualInstanceQueryMultiReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableBoolean getActivelyDetected();
    public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias);
    public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getAdmissionDate();
    public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias);
    public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient();
    public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias);
    public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getCaseIdentifier();
    public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias);
    public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate();
    public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias);
    public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getDateOfDeath();
    public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias);
    public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias, String displayLabel);
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType();
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias);
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getDiedInFacility();
    public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias);
    public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getFacilityVisit();
    public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias);
    public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias, String displayLabel);
    public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility();
    public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias);
    public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase();
    public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias);
    public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLabTestDate();
    public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias, String displayLabel);
    public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician();
    public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias);
    public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getPregnant();
    public com.runwaysdk.query.SelectableBoolean getPregnant(String alias);
    public com.runwaysdk.query.SelectableBoolean getPregnant(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getProperlyRelease();
    public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias);
    public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getReferredFrom();
    public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias);
    public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getReferredTo();
    public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias);
    public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getReleaseDate();
    public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias);
    public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSymptomComments();
    public com.runwaysdk.query.SelectableChar getSymptomComments(String alias);
    public com.runwaysdk.query.SelectableChar getSymptomComments(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getTestSampleDate();
    public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias);
    public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getTreatmentStartDate();
    public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias);
    public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance);
    public com.runwaysdk.query.Condition notContainsAny(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance);
    public com.runwaysdk.query.Condition containsAll(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance);
    public com.runwaysdk.query.Condition notContainsAll(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance);
    public com.runwaysdk.query.Condition containsExactly(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class IndividualInstanceQueryMultiReference extends com.runwaysdk.query.AttributeMultiReference
 implements IndividualInstanceQueryMultiReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {

  public IndividualInstanceQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance)  {

      String[] itemIdArray = new String[individualInstance.length]; 

      for (int i=0; i<individualInstance.length; i++)
      {
        itemIdArray[i] = individualInstance[i].getId();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance)  {

      String[] itemIdArray = new String[individualInstance.length]; 

      for (int i=0; i<individualInstance.length; i++)
      {
        itemIdArray[i] = individualInstance[i].getId();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance)  {

      String[] itemIdArray = new String[individualInstance.length]; 

      for (int i=0; i<individualInstance.length; i++)
      {
        itemIdArray[i] = individualInstance[i].getId();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance)  {

      String[] itemIdArray = new String[individualInstance.length]; 

      for (int i=0; i<individualInstance.length; i++)
      {
        itemIdArray[i] = individualInstance[i].getId();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(dss.vector.solutions.intervention.monitor.IndividualInstance ... individualInstance)  {

      String[] itemIdArray = new String[individualInstance.length]; 

      for (int i=0; i<individualInstance.length; i++)
      {
        itemIdArray[i] = individualInstance[i].getId();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableBoolean getActivelyDetected()
  {
    return getActivelyDetected(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ACTIVELYDETECTED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getActivelyDetected(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ACTIVELYDETECTED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getAdmissionDate()
  {
    return getAdmissionDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ADMISSIONDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getAdmissionDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ADMISSIONDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient()
  {
    return getAnaemiaPatient(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ANAEMIAPATIENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getAnaemiaPatient(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ANAEMIAPATIENT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getCaseIdentifier()
  {
    return getCaseIdentifier(null);

  }
 
  public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CASEIDENTIFIER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getCaseIdentifier(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CASEIDENTIFIER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification()
  {
    return getClassification(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getClassification(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis()
  {
    return getConfirmedDiagnosis(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getConfirmedDiagnosis(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate()
  {
    return getConfirmedDiagnosisDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSISDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getConfirmedDiagnosisDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSISDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getDateOfDeath()
  {
    return getDateOfDeath(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DATEOFDEATH, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getDateOfDeath(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DATEOFDEATH, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy()
  {
    return getDetectedBy(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDetectedBy(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis()
  {
    return getDiagnosis(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getDiagnosis(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS,  alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType()
  {
    return getDiagnosisType(null);

  }
 
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias)
  {
    return (dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF getDiagnosisType(String alias, String displayLabel)
  {
    return (dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQueryIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getDiedInFacility()
  {
    return getDiedInFacility(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIEDINFACILITY, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getDiedInFacility(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.DIEDINFACILITY, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getFacilityVisit()
  {
    return getFacilityVisit(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.FACILITYVISIT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getFacilityVisit(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.FACILITYVISIT, alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility()
  {
    return getHealthFacility(null);

  }
 
  public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias)
  {
    return (dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF getHealthFacility(String alias, String displayLabel)
  {
    return (dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.ID, alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase()
  {
    return getIndividualCase(null);

  }
 
  public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias)
  {
    return (dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF getIndividualCase(String alias, String displayLabel)
  {
    return (dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.KEYNAME, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest()
  {
    return getLabTest(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getLabTest(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLabTestDate()
  {
    return getLabTestDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTESTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLabTestDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTESTDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType()
  {
    return getMalariaType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaType(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory()
  {
    return getPatientCategory(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPatientCategory(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY,  alias, displayLabel);

  }
  public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician()
  {
    return getPhysician(null);

  }
 
  public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias)
  {
    return (dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN, alias, null);

  }
 
  public dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF getPhysician(String alias, String displayLabel)
  {
    return (dss.vector.solutions.PhysicianQuery.PhysicianQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getPregnant()
  {
    return getPregnant(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPregnant(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PREGNANT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getPregnant(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PREGNANT, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection()
  {
    return getPrimaryInfection(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPrimaryInfection(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getProperlyRelease()
  {
    return getProperlyRelease(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PROPERLYRELEASE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getProperlyRelease(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.PROPERLYRELEASE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason()
  {
    return getReferralReason(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getReferralReason(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getReferredFrom()
  {
    return getReferredFrom(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDFROM, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredFrom(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDFROM, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getReferredTo()
  {
    return getReferredTo(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDTO, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getReferredTo(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERREDTO, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getReleaseDate()
  {
    return getReleaseDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.RELEASEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getReleaseDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.RELEASEDATE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType()
  {
    return getSampleType(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSampleType(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SITEMASTER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom()
  {
    return getSymptom(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSymptom(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSymptomComments()
  {
    return getSymptomComments(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSymptomComments(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOMCOMMENTS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSymptomComments(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOMCOMMENTS, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult()
  {
    return getTestResult(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTestResult(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getTestSampleDate()
  {
    return getTestSampleDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTSAMPLEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTestSampleDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTSAMPLEDATE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment()
  {
    return getTreatment(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatment(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod()
  {
    return getTreatmentMethod(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getTreatmentMethod(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getTreatmentStartDate()
  {
    return getTreatmentStartDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTSTARTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getTreatmentStartDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTSTARTDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.IndividualInstance.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.CLASSIFICATION)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.CONFIRMEDDIAGNOSIS)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.DETECTEDBY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSIS)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.HEALTHFACILITY)) 
    {
       return new dss.vector.solutions.geo.generated.HealthFacilityQuery.HealthFacilityQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.INDIVIDUALCASE)) 
    {
       return new dss.vector.solutions.intervention.monitor.IndividualCaseQuery.IndividualCaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.LABTEST)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.MALARIATYPE)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.PATIENTCATEGORY)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.PHYSICIAN)) 
    {
       return new dss.vector.solutions.PhysicianQuery.PhysicianQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.PRIMARYINFECTION)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.REFERRALREASON)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.SAMPLETYPE)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.SYMPTOM)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.TESTRESULT)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENT)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.TREATMENTMETHOD)) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeEnumeration enumerationFactory( com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  String mdEnumerationTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF masterListMdBusinessIF, String masterListTalbeAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.intervention.monitor.IndividualInstance.DIAGNOSISTYPE)) 
    {
       return new dss.vector.solutions.intervention.monitor.DiagnosisTypeMasterQuery.DiagnosisTypeQuery((com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
