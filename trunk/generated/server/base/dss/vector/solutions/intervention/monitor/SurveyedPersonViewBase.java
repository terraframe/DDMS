package dss.vector.solutions.intervention.monitor;

@com.terraframe.mojo.business.ClassSignature(hash = -635381253)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SurveyedPersonView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class SurveyedPersonViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.intervention.monitor.SurveyedPersonView";
  public static java.lang.String AGE = "age";
  public static java.lang.String ANAEMIATREATMENT = "anaemiaTreatment";
  public static java.lang.String BLOODSLIDEDETAIL = "bloodslideDetail";
  public static java.lang.String BLOODSLIDEREASON = "bloodslideReason";
  public static java.lang.String BLOODSLIDERESULT = "bloodslideResult";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String DISPLAYLOCATIONS = "displayLocations";
  public static java.lang.String DISPLAYTREATMENTS = "displayTreatments";
  public static java.lang.String DOB = "dob";
  public static java.lang.String FEVER = "fever";
  public static java.lang.String HAEMOGLOBIN = "haemoglobin";
  public static java.lang.String HAEMOGLOBINMEASURED = "haemoglobinMeasured";
  public static java.lang.String HEADOFHOUSEHOLD = "headOfHousehold";
  public static java.lang.String HOUSEHOLD = "household";
  public static java.lang.String ID = "id";
  public static java.lang.String IMMUNECOMPROMISED = "immuneCompromised";
  public static java.lang.String IRON = "iron";
  public static java.lang.String MALARIA = "malaria";
  public static java.lang.String MALARIACONFORMATIONTECHNIQUE = "malariaConformationTechnique";
  public static java.lang.String PAYMENT = "payment";
  public static java.lang.String PERFORMEDBLOODSLIDE = "performedBloodslide";
  public static java.lang.String PERFORMEDRDT = "performedRDT";
  public static java.lang.String PERSONID = "personId";
  public static java.lang.String PREGNANT = "pregnant";
  public static java.lang.String RDTDETAIL = "rdtDetail";
  public static java.lang.String RDTRESULT = "rdtResult";
  public static java.lang.String RDTTREATMENT = "rdtTreatment";
  public static java.lang.String SEX = "sex";
  public static java.lang.String SLEPTUNDERNET = "sleptUnderNet";
  private static final long serialVersionUID = -635381253;
  
  public SurveyedPersonViewBase()
  {
    super();
  }
  
  public Integer getAge()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(AGE));
  }
  
  public void validateAge()
  {
    this.validateAttribute(AGE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAgeMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(AGE);
  }
  
  public void setAge(Integer value)
  {
    if(value == null)
    {
      setValue(AGE, "");
    }
    else
    {
      setValue(AGE, java.lang.Integer.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getAnaemiaTreatment()
  {
    if (getValue(ANAEMIATREATMENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(ANAEMIATREATMENT));
    }
  }
  
  public void validateAnaemiaTreatment()
  {
    this.validateAttribute(ANAEMIATREATMENT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAnaemiaTreatmentMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(ANAEMIATREATMENT);
  }
  
  public void setAnaemiaTreatment(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(ANAEMIATREATMENT, "");
    }
    else
    {
      setValue(ANAEMIATREATMENT, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getBloodslideDetail()
  {
    if (getValue(BLOODSLIDEDETAIL).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(BLOODSLIDEDETAIL));
    }
  }
  
  public void validateBloodslideDetail()
  {
    this.validateAttribute(BLOODSLIDEDETAIL);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBloodslideDetailMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(BLOODSLIDEDETAIL);
  }
  
  public void setBloodslideDetail(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(BLOODSLIDEDETAIL, "");
    }
    else
    {
      setValue(BLOODSLIDEDETAIL, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getBloodslideReason()
  {
    if (getValue(BLOODSLIDEREASON).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(BLOODSLIDEREASON));
    }
  }
  
  public void validateBloodslideReason()
  {
    this.validateAttribute(BLOODSLIDEREASON);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBloodslideReasonMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(BLOODSLIDEREASON);
  }
  
  public void setBloodslideReason(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(BLOODSLIDEREASON, "");
    }
    else
    {
      setValue(BLOODSLIDEREASON, value.getId());
    }
  }
  
  public Boolean getBloodslideResult()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(BLOODSLIDERESULT));
  }
  
  public void validateBloodslideResult()
  {
    this.validateAttribute(BLOODSLIDERESULT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBloodslideResultMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(BLOODSLIDERESULT);
  }
  
  public void setBloodslideResult(Boolean value)
  {
    if(value == null)
    {
      setValue(BLOODSLIDERESULT, "");
    }
    else
    {
      setValue(BLOODSLIDERESULT, java.lang.Boolean.toString(value));
    }
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public dss.vector.solutions.ontology.Term getDisplayLocations()
  {
    if (getValue(DISPLAYLOCATIONS).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(DISPLAYLOCATIONS));
    }
  }
  
  public void validateDisplayLocations()
  {
    this.validateAttribute(DISPLAYLOCATIONS);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getDisplayLocationsMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(DISPLAYLOCATIONS);
  }
  
  public void setDisplayLocations(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(DISPLAYLOCATIONS, "");
    }
    else
    {
      setValue(DISPLAYLOCATIONS, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getDisplayTreatments()
  {
    if (getValue(DISPLAYTREATMENTS).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(DISPLAYTREATMENTS));
    }
  }
  
  public void validateDisplayTreatments()
  {
    this.validateAttribute(DISPLAYTREATMENTS);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getDisplayTreatmentsMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(DISPLAYTREATMENTS);
  }
  
  public void setDisplayTreatments(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(DISPLAYTREATMENTS, "");
    }
    else
    {
      setValue(DISPLAYTREATMENTS, value.getId());
    }
  }
  
  public java.util.Date getDob()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(DOB));
  }
  
  public void validateDob()
  {
    this.validateAttribute(DOB);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getDobMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(DOB);
  }
  
  public void setDob(java.util.Date value)
  {
    if(value == null)
    {
      setValue(DOB, "");
    }
    else
    {
      setValue(DOB, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.Response> getFever()
  {
    return (java.util.List<dss.vector.solutions.Response>) getEnumValues(FEVER);
  }
  
  public void addFever(dss.vector.solutions.Response value)
  {
    if(value != null)
    {
      addEnumItem(FEVER, value.getId());
    }
  }
  
  public void removeFever(dss.vector.solutions.Response value)
  {
    if(value != null)
    {
      removeEnumItem(FEVER, value.getId());
    }
  }
  
  public void clearFever()
  {
    clearEnum(FEVER);
  }
  
  public void validateFever()
  {
    this.validateAttribute(FEVER);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getFeverMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(FEVER);
  }
  
  public java.math.BigDecimal getHaemoglobin()
  {
    return com.terraframe.mojo.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(HAEMOGLOBIN));
  }
  
  public void validateHaemoglobin()
  {
    this.validateAttribute(HAEMOGLOBIN);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getHaemoglobinMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(HAEMOGLOBIN);
  }
  
  public void setHaemoglobin(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(HAEMOGLOBIN, "");
    }
    else
    {
      setValue(HAEMOGLOBIN, value.toString());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.RefusedResponse> getHaemoglobinMeasured()
  {
    return (java.util.List<dss.vector.solutions.RefusedResponse>) getEnumValues(HAEMOGLOBINMEASURED);
  }
  
  public void addHaemoglobinMeasured(dss.vector.solutions.RefusedResponse value)
  {
    if(value != null)
    {
      addEnumItem(HAEMOGLOBINMEASURED, value.getId());
    }
  }
  
  public void removeHaemoglobinMeasured(dss.vector.solutions.RefusedResponse value)
  {
    if(value != null)
    {
      removeEnumItem(HAEMOGLOBINMEASURED, value.getId());
    }
  }
  
  public void clearHaemoglobinMeasured()
  {
    clearEnum(HAEMOGLOBINMEASURED);
  }
  
  public void validateHaemoglobinMeasured()
  {
    this.validateAttribute(HAEMOGLOBINMEASURED);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getHaemoglobinMeasuredMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(HAEMOGLOBINMEASURED);
  }
  
  public dss.vector.solutions.ontology.Term getHeadOfHousehold()
  {
    if (getValue(HEADOFHOUSEHOLD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(HEADOFHOUSEHOLD));
    }
  }
  
  public void validateHeadOfHousehold()
  {
    this.validateAttribute(HEADOFHOUSEHOLD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getHeadOfHouseholdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(HEADOFHOUSEHOLD);
  }
  
  public void setHeadOfHousehold(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(HEADOFHOUSEHOLD, "");
    }
    else
    {
      setValue(HEADOFHOUSEHOLD, value.getId());
    }
  }
  
  public dss.vector.solutions.intervention.monitor.Household getHousehold()
  {
    if (getValue(HOUSEHOLD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.intervention.monitor.Household.get(getValue(HOUSEHOLD));
    }
  }
  
  public void validateHousehold()
  {
    this.validateAttribute(HOUSEHOLD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getHouseholdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(HOUSEHOLD);
  }
  
  public void setHousehold(dss.vector.solutions.intervention.monitor.Household value)
  {
    if(value == null)
    {
      setValue(HOUSEHOLD, "");
    }
    else
    {
      setValue(HOUSEHOLD, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.ontology.Term getImmuneCompromised()
  {
    if (getValue(IMMUNECOMPROMISED).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(IMMUNECOMPROMISED));
    }
  }
  
  public void validateImmuneCompromised()
  {
    this.validateAttribute(IMMUNECOMPROMISED);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getImmuneCompromisedMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(IMMUNECOMPROMISED);
  }
  
  public void setImmuneCompromised(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(IMMUNECOMPROMISED, "");
    }
    else
    {
      setValue(IMMUNECOMPROMISED, value.getId());
    }
  }
  
  public Boolean getIron()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(IRON));
  }
  
  public void validateIron()
  {
    this.validateAttribute(IRON);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIronMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(IRON);
  }
  
  public void setIron(Boolean value)
  {
    if(value == null)
    {
      setValue(IRON, "");
    }
    else
    {
      setValue(IRON, java.lang.Boolean.toString(value));
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.Response> getMalaria()
  {
    return (java.util.List<dss.vector.solutions.Response>) getEnumValues(MALARIA);
  }
  
  public void addMalaria(dss.vector.solutions.Response value)
  {
    if(value != null)
    {
      addEnumItem(MALARIA, value.getId());
    }
  }
  
  public void removeMalaria(dss.vector.solutions.Response value)
  {
    if(value != null)
    {
      removeEnumItem(MALARIA, value.getId());
    }
  }
  
  public void clearMalaria()
  {
    clearEnum(MALARIA);
  }
  
  public void validateMalaria()
  {
    this.validateAttribute(MALARIA);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMalariaMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(MALARIA);
  }
  
  public dss.vector.solutions.ontology.Term getMalariaConformationTechnique()
  {
    if (getValue(MALARIACONFORMATIONTECHNIQUE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(MALARIACONFORMATIONTECHNIQUE));
    }
  }
  
  public void validateMalariaConformationTechnique()
  {
    this.validateAttribute(MALARIACONFORMATIONTECHNIQUE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMalariaConformationTechniqueMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(MALARIACONFORMATIONTECHNIQUE);
  }
  
  public void setMalariaConformationTechnique(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(MALARIACONFORMATIONTECHNIQUE, "");
    }
    else
    {
      setValue(MALARIACONFORMATIONTECHNIQUE, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getPayment()
  {
    if (getValue(PAYMENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(PAYMENT));
    }
  }
  
  public void validatePayment()
  {
    this.validateAttribute(PAYMENT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPaymentMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(PAYMENT);
  }
  
  public void setPayment(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(PAYMENT, "");
    }
    else
    {
      setValue(PAYMENT, value.getId());
    }
  }
  
  public Boolean getPerformedBloodslide()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PERFORMEDBLOODSLIDE));
  }
  
  public void validatePerformedBloodslide()
  {
    this.validateAttribute(PERFORMEDBLOODSLIDE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPerformedBloodslideMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(PERFORMEDBLOODSLIDE);
  }
  
  public void setPerformedBloodslide(Boolean value)
  {
    if(value == null)
    {
      setValue(PERFORMEDBLOODSLIDE, "");
    }
    else
    {
      setValue(PERFORMEDBLOODSLIDE, java.lang.Boolean.toString(value));
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.RefusedResponse> getPerformedRDT()
  {
    return (java.util.List<dss.vector.solutions.RefusedResponse>) getEnumValues(PERFORMEDRDT);
  }
  
  public void addPerformedRDT(dss.vector.solutions.RefusedResponse value)
  {
    if(value != null)
    {
      addEnumItem(PERFORMEDRDT, value.getId());
    }
  }
  
  public void removePerformedRDT(dss.vector.solutions.RefusedResponse value)
  {
    if(value != null)
    {
      removeEnumItem(PERFORMEDRDT, value.getId());
    }
  }
  
  public void clearPerformedRDT()
  {
    clearEnum(PERFORMEDRDT);
  }
  
  public void validatePerformedRDT()
  {
    this.validateAttribute(PERFORMEDRDT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPerformedRDTMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(PERFORMEDRDT);
  }
  
  public String getPersonId()
  {
    return getValue(PERSONID);
  }
  
  public void validatePersonId()
  {
    this.validateAttribute(PERSONID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPersonIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(PERSONID);
  }
  
  public void setPersonId(String value)
  {
    if(value == null)
    {
      setValue(PERSONID, "");
    }
    else
    {
      setValue(PERSONID, value);
    }
  }
  
  public Boolean getPregnant()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PREGNANT));
  }
  
  public void validatePregnant()
  {
    this.validateAttribute(PREGNANT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPregnantMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(PREGNANT);
  }
  
  public void setPregnant(Boolean value)
  {
    if(value == null)
    {
      setValue(PREGNANT, "");
    }
    else
    {
      setValue(PREGNANT, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getRdtDetail()
  {
    if (getValue(RDTDETAIL).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(RDTDETAIL));
    }
  }
  
  public void validateRdtDetail()
  {
    this.validateAttribute(RDTDETAIL);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getRdtDetailMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(RDTDETAIL);
  }
  
  public void setRdtDetail(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(RDTDETAIL, "");
    }
    else
    {
      setValue(RDTDETAIL, value.getId());
    }
  }
  
  public Boolean getRdtResult()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(RDTRESULT));
  }
  
  public void validateRdtResult()
  {
    this.validateAttribute(RDTRESULT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getRdtResultMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(RDTRESULT);
  }
  
  public void setRdtResult(Boolean value)
  {
    if(value == null)
    {
      setValue(RDTRESULT, "");
    }
    else
    {
      setValue(RDTRESULT, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getRdtTreatment()
  {
    if (getValue(RDTTREATMENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(RDTTREATMENT));
    }
  }
  
  public void validateRdtTreatment()
  {
    this.validateAttribute(RDTTREATMENT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getRdtTreatmentMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(RDTTREATMENT);
  }
  
  public void setRdtTreatment(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(RDTTREATMENT, "");
    }
    else
    {
      setValue(RDTTREATMENT, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getSex()
  {
    if (getValue(SEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(SEX));
    }
  }
  
  public void validateSex()
  {
    this.validateAttribute(SEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(SEX);
  }
  
  public void setSex(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(SEX, "");
    }
    else
    {
      setValue(SEX, value.getId());
    }
  }
  
  public dss.vector.solutions.intervention.monitor.ITNInstance getSleptUnderNet()
  {
    if (getValue(SLEPTUNDERNET).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.intervention.monitor.ITNInstance.get(getValue(SLEPTUNDERNET));
    }
  }
  
  public void validateSleptUnderNet()
  {
    this.validateAttribute(SLEPTUNDERNET);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSleptUnderNetMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.SurveyedPersonView.CLASS);
    return mdClassIF.definesAttribute(SLEPTUNDERNET);
  }
  
  public void setSleptUnderNet(dss.vector.solutions.intervention.monitor.ITNInstance value)
  {
    if(value == null)
    {
      setValue(SLEPTUNDERNET, "");
    }
    else
    {
      setValue(SLEPTUNDERNET, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static SurveyedPersonView get(String id)
  {
    return (SurveyedPersonView) com.terraframe.mojo.business.View.get(id);
  }
  
  public void applyAll(dss.vector.solutions.ontology.Term[] locations, dss.vector.solutions.ontology.Term[] treatments)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.SurveyedPersonView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void applyAll(java.lang.String id, dss.vector.solutions.ontology.Term[] locations, dss.vector.solutions.ontology.Term[] treatments)
  {
    SurveyedPersonView _instance = SurveyedPersonView.get(id);
    _instance.applyAll(locations, treatments);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.SurveyedPersonView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    SurveyedPersonView _instance = SurveyedPersonView.get(id);
    _instance.deleteConcrete();
  }
  
  public dss.vector.solutions.ontology.Term[] getLocations()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.SurveyedPersonView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.ontology.Term[] getLocations(java.lang.String id)
  {
    SurveyedPersonView _instance = SurveyedPersonView.get(id);
    return _instance.getLocations();
  }
  
  public dss.vector.solutions.ontology.Term[] getTreatments()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.SurveyedPersonView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.ontology.Term[] getTreatments(java.lang.String id)
  {
    SurveyedPersonView _instance = SurveyedPersonView.get(id);
    return _instance.getTreatments();
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
