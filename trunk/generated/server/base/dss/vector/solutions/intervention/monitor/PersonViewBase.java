package dss.vector.solutions.intervention.monitor;

@com.terraframe.mojo.business.ClassSignature(hash = -1059125484)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to PersonView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class PersonViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.intervention.monitor.PersonView";
  public static java.lang.String AGE = "age";
  public static java.lang.String ANAEMIATREATMENT = "anaemiaTreatment";
  public static java.lang.String BLOODSLIDE = "bloodslide";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String DOB = "dob";
  public static java.lang.String FEVER = "fever";
  public static java.lang.String FEVERTREATMENT = "feverTreatment";
  public static java.lang.String HAEMOGLOBIN = "haemoglobin";
  public static java.lang.String HAEMOGLOBINMEASURED = "haemoglobinMeasured";
  public static java.lang.String HOUSEHOLD = "household";
  public static java.lang.String ID = "id";
  public static java.lang.String IRON = "iron";
  public static java.lang.String MALARIA = "malaria";
  public static java.lang.String MALARIATREATMENT = "malariaTreatment";
  public static java.lang.String PAYMENT = "payment";
  public static java.lang.String PERFORMEDRDT = "performedRDT";
  public static java.lang.String PERSONID = "personId";
  public static java.lang.String PREGNANT = "pregnant";
  public static java.lang.String RDTRESULT = "rDTResult";
  public static java.lang.String RDTTREATMENT = "rdtTreatment";
  public static java.lang.String SEX = "sex";
  public static java.lang.String SLEPTUNDERNET = "sleptUnderNet";
  private static final long serialVersionUID = -1059125484;
  
  public PersonViewBase()
  {
    super();
  }
  
  public Integer getAge()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(AGE));
  }
  
  public void validateAge()
  {
    this.validateAttribute(AGE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAgeMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(AGE);
  }
  
  public void setAge(Integer value)
  {
    if(value == null)
    {
      setValue(AGE, "");
    }
    else
    {
      setValue(AGE, java.lang.Integer.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getAnaemiaTreatment()
  {
    if (getValue(ANAEMIATREATMENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(ANAEMIATREATMENT));
    }
  }
  
  public void validateAnaemiaTreatment()
  {
    this.validateAttribute(ANAEMIATREATMENT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAnaemiaTreatmentMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(ANAEMIATREATMENT);
  }
  
  public void setAnaemiaTreatment(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(ANAEMIATREATMENT, "");
    }
    else
    {
      setValue(ANAEMIATREATMENT, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getBloodslide()
  {
    if (getValue(BLOODSLIDE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(BLOODSLIDE));
    }
  }
  
  public void validateBloodslide()
  {
    this.validateAttribute(BLOODSLIDE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBloodslideMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(BLOODSLIDE);
  }
  
  public void setBloodslide(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(BLOODSLIDE, "");
    }
    else
    {
      setValue(BLOODSLIDE, value.getId());
    }
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public java.util.Date getDob()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(DOB));
  }
  
  public void validateDob()
  {
    this.validateAttribute(DOB);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getDobMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(DOB);
  }
  
  public void setDob(java.util.Date value)
  {
    if(value == null)
    {
      setValue(DOB, "");
    }
    else
    {
      setValue(DOB, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getFever()
  {
    if (getValue(FEVER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(FEVER));
    }
  }
  
  public void validateFever()
  {
    this.validateAttribute(FEVER);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getFeverMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(FEVER);
  }
  
  public void setFever(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(FEVER, "");
    }
    else
    {
      setValue(FEVER, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getFeverTreatment()
  {
    if (getValue(FEVERTREATMENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(FEVERTREATMENT));
    }
  }
  
  public void validateFeverTreatment()
  {
    this.validateAttribute(FEVERTREATMENT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getFeverTreatmentMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(FEVERTREATMENT);
  }
  
  public void setFeverTreatment(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(FEVERTREATMENT, "");
    }
    else
    {
      setValue(FEVERTREATMENT, value.getId());
    }
  }
  
  public java.math.BigDecimal getHaemoglobin()
  {
    return com.terraframe.mojo.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(HAEMOGLOBIN));
  }
  
  public void validateHaemoglobin()
  {
    this.validateAttribute(HAEMOGLOBIN);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getHaemoglobinMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(HAEMOGLOBIN);
  }
  
  public void setHaemoglobin(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(HAEMOGLOBIN, "");
    }
    else
    {
      setValue(HAEMOGLOBIN, value.toString());
    }
  }
  
  public Boolean getHaemoglobinMeasured()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(HAEMOGLOBINMEASURED));
  }
  
  public void validateHaemoglobinMeasured()
  {
    this.validateAttribute(HAEMOGLOBINMEASURED);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getHaemoglobinMeasuredMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(HAEMOGLOBINMEASURED);
  }
  
  public void setHaemoglobinMeasured(Boolean value)
  {
    if(value == null)
    {
      setValue(HAEMOGLOBINMEASURED, "");
    }
    else
    {
      setValue(HAEMOGLOBINMEASURED, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.intervention.monitor.Household getHousehold()
  {
    if (getValue(HOUSEHOLD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.intervention.monitor.Household.get(getValue(HOUSEHOLD));
    }
  }
  
  public void validateHousehold()
  {
    this.validateAttribute(HOUSEHOLD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getHouseholdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(HOUSEHOLD);
  }
  
  public void setHousehold(dss.vector.solutions.intervention.monitor.Household value)
  {
    if(value == null)
    {
      setValue(HOUSEHOLD, "");
    }
    else
    {
      setValue(HOUSEHOLD, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public Boolean getIron()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(IRON));
  }
  
  public void validateIron()
  {
    this.validateAttribute(IRON);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIronMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(IRON);
  }
  
  public void setIron(Boolean value)
  {
    if(value == null)
    {
      setValue(IRON, "");
    }
    else
    {
      setValue(IRON, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getMalaria()
  {
    if (getValue(MALARIA).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(MALARIA));
    }
  }
  
  public void validateMalaria()
  {
    this.validateAttribute(MALARIA);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMalariaMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(MALARIA);
  }
  
  public void setMalaria(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(MALARIA, "");
    }
    else
    {
      setValue(MALARIA, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getMalariaTreatment()
  {
    if (getValue(MALARIATREATMENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(MALARIATREATMENT));
    }
  }
  
  public void validateMalariaTreatment()
  {
    this.validateAttribute(MALARIATREATMENT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMalariaTreatmentMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(MALARIATREATMENT);
  }
  
  public void setMalariaTreatment(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(MALARIATREATMENT, "");
    }
    else
    {
      setValue(MALARIATREATMENT, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getPayment()
  {
    if (getValue(PAYMENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(PAYMENT));
    }
  }
  
  public void validatePayment()
  {
    this.validateAttribute(PAYMENT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPaymentMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(PAYMENT);
  }
  
  public void setPayment(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(PAYMENT, "");
    }
    else
    {
      setValue(PAYMENT, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getPerformedRDT()
  {
    if (getValue(PERFORMEDRDT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(PERFORMEDRDT));
    }
  }
  
  public void validatePerformedRDT()
  {
    this.validateAttribute(PERFORMEDRDT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPerformedRDTMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(PERFORMEDRDT);
  }
  
  public void setPerformedRDT(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(PERFORMEDRDT, "");
    }
    else
    {
      setValue(PERFORMEDRDT, value.getId());
    }
  }
  
  public String getPersonId()
  {
    return getValue(PERSONID);
  }
  
  public void validatePersonId()
  {
    this.validateAttribute(PERSONID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPersonIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(PERSONID);
  }
  
  public void setPersonId(String value)
  {
    if(value == null)
    {
      setValue(PERSONID, "");
    }
    else
    {
      setValue(PERSONID, value);
    }
  }
  
  public Boolean getPregnant()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PREGNANT));
  }
  
  public void validatePregnant()
  {
    this.validateAttribute(PREGNANT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPregnantMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(PREGNANT);
  }
  
  public void setPregnant(Boolean value)
  {
    if(value == null)
    {
      setValue(PREGNANT, "");
    }
    else
    {
      setValue(PREGNANT, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getRDTResult()
  {
    if (getValue(RDTRESULT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(RDTRESULT));
    }
  }
  
  public void validateRDTResult()
  {
    this.validateAttribute(RDTRESULT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getRDTResultMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(RDTRESULT);
  }
  
  public void setRDTResult(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(RDTRESULT, "");
    }
    else
    {
      setValue(RDTRESULT, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getRdtTreatment()
  {
    if (getValue(RDTTREATMENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(RDTTREATMENT));
    }
  }
  
  public void validateRdtTreatment()
  {
    this.validateAttribute(RDTTREATMENT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getRdtTreatmentMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(RDTTREATMENT);
  }
  
  public void setRdtTreatment(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(RDTTREATMENT, "");
    }
    else
    {
      setValue(RDTTREATMENT, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getSex()
  {
    if (getValue(SEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(SEX));
    }
  }
  
  public void validateSex()
  {
    this.validateAttribute(SEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(SEX);
  }
  
  public void setSex(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(SEX, "");
    }
    else
    {
      setValue(SEX, value.getId());
    }
  }
  
  public Boolean getSleptUnderNet()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(SLEPTUNDERNET));
  }
  
  public void validateSleptUnderNet()
  {
    this.validateAttribute(SLEPTUNDERNET);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSleptUnderNetMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.PersonView.CLASS);
    return mdClassIF.definesAttribute(SLEPTUNDERNET);
  }
  
  public void setSleptUnderNet(Boolean value)
  {
    if(value == null)
    {
      setValue(SLEPTUNDERNET, "");
    }
    else
    {
      setValue(SLEPTUNDERNET, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static PersonView get(String id)
  {
    return (PersonView) com.terraframe.mojo.business.View.get(id);
  }
  
  public void applyAll(dss.vector.solutions.ontology.Term[] results)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.PersonView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void applyAll(java.lang.String id, dss.vector.solutions.ontology.Term[] results)
  {
    PersonView _instance = PersonView.get(id);
    _instance.applyAll(results);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.PersonView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    PersonView _instance = PersonView.get(id);
    _instance.deleteConcrete();
  }
  
  public dss.vector.solutions.ontology.Term[] getRDTResults()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.PersonView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.ontology.Term[] getRDTResults(java.lang.String id)
  {
    PersonView _instance = PersonView.get(id);
    return _instance.getRDTResults();
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
