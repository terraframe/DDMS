package dss.vector.solutions.intervention.monitor;

@com.runwaysdk.business.ClassSignature(hash = 2143513924)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to InsecticideInterventionView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class InsecticideInterventionViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.intervention.monitor.InsecticideInterventionView";
  public static java.lang.String ACTIVEINGREDIENT = "activeIngredient";
  public static java.lang.String CONCENTRATIONQUALIFIER = "concentrationQualifier";
  public static java.lang.String CONCENTRATIONQUANTIFIER = "concentrationQuantifier";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String ID = "id";
  public static java.lang.String INSECTICIDE = "insecticide";
  public static java.lang.String INTERVENTION = "intervention";
  public static java.lang.String INTERVENTIONMETHOD = "interventionMethod";
  public static java.lang.String QUANTITY = "quantity";
  public static java.lang.String UNIT = "unit";
  private static final long serialVersionUID = 2143513924;
  
  public InsecticideInterventionViewBase()
  {
    super();
  }
  
  public String getActiveIngredient()
  {
    return getValue(ACTIVEINGREDIENT);
  }
  
  public void validateActiveIngredient()
  {
    this.validateAttribute(ACTIVEINGREDIENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getActiveIngredientMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(ACTIVEINGREDIENT);
  }
  
  public void setActiveIngredient(String value)
  {
    if(value == null)
    {
      setValue(ACTIVEINGREDIENT, "");
    }
    else
    {
      setValue(ACTIVEINGREDIENT, value);
    }
  }
  
  public String getConcentrationQualifier()
  {
    return getValue(CONCENTRATIONQUALIFIER);
  }
  
  public void validateConcentrationQualifier()
  {
    this.validateAttribute(CONCENTRATIONQUALIFIER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConcentrationQualifierMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(CONCENTRATIONQUALIFIER);
  }
  
  public void setConcentrationQualifier(String value)
  {
    if(value == null)
    {
      setValue(CONCENTRATIONQUALIFIER, "");
    }
    else
    {
      setValue(CONCENTRATIONQUALIFIER, value);
    }
  }
  
  public java.math.BigDecimal getConcentrationQuantifier()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(CONCENTRATIONQUANTIFIER));
  }
  
  public void validateConcentrationQuantifier()
  {
    this.validateAttribute(CONCENTRATIONQUANTIFIER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConcentrationQuantifierMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(CONCENTRATIONQUANTIFIER);
  }
  
  public void setConcentrationQuantifier(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(CONCENTRATIONQUANTIFIER, "");
    }
    else
    {
      setValue(CONCENTRATIONQUANTIFIER, value.toString());
    }
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.irs.InsecticideBrand getInsecticide()
  {
    if (getValue(INSECTICIDE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.InsecticideBrand.get(getValue(INSECTICIDE));
    }
  }
  
  public void validateInsecticide()
  {
    this.validateAttribute(INSECTICIDE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getInsecticideMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(INSECTICIDE);
  }
  
  public void setInsecticide(dss.vector.solutions.irs.InsecticideBrand value)
  {
    if(value == null)
    {
      setValue(INSECTICIDE, "");
    }
    else
    {
      setValue(INSECTICIDE, value.getId());
    }
  }
  
  public dss.vector.solutions.intervention.monitor.ControlIntervention getIntervention()
  {
    if (getValue(INTERVENTION).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.intervention.monitor.ControlIntervention.get(getValue(INTERVENTION));
    }
  }
  
  public void validateIntervention()
  {
    this.validateAttribute(INTERVENTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getInterventionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(INTERVENTION);
  }
  
  public void setIntervention(dss.vector.solutions.intervention.monitor.ControlIntervention value)
  {
    if(value == null)
    {
      setValue(INTERVENTION, "");
    }
    else
    {
      setValue(INTERVENTION, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getInterventionMethod()
  {
    if (getValue(INTERVENTIONMETHOD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(INTERVENTIONMETHOD));
    }
  }
  
  public void validateInterventionMethod()
  {
    this.validateAttribute(INTERVENTIONMETHOD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getInterventionMethodMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(INTERVENTIONMETHOD);
  }
  
  public void setInterventionMethod(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(INTERVENTIONMETHOD, "");
    }
    else
    {
      setValue(INTERVENTIONMETHOD, value.getId());
    }
  }
  
  public Integer getQuantity()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(QUANTITY));
  }
  
  public void validateQuantity()
  {
    this.validateAttribute(QUANTITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getQuantityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(QUANTITY);
  }
  
  public void setQuantity(Integer value)
  {
    if(value == null)
    {
      setValue(QUANTITY, "");
    }
    else
    {
      setValue(QUANTITY, java.lang.Integer.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getUnit()
  {
    if (getValue(UNIT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(UNIT));
    }
  }
  
  public void validateUnit()
  {
    this.validateAttribute(UNIT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getUnitMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.InsecticideInterventionView.CLASS);
    return mdClassIF.definesAttribute(UNIT);
  }
  
  public void setUnit(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(UNIT, "");
    }
    else
    {
      setValue(UNIT, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static InsecticideInterventionView get(String id)
  {
    return (InsecticideInterventionView) com.runwaysdk.business.View.get(id);
  }
  
  public dss.vector.solutions.irs.InsecticideBrandView getInsecticideView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.InsecticideInterventionView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.InsecticideBrandView getInsecticideView(java.lang.String id)
  {
    InsecticideInterventionView _instance = InsecticideInterventionView.get(id);
    return _instance.getInsecticideView();
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
