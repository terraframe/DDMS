package dss.vector.solutions.intervention.monitor;

@com.runwaysdk.business.ClassSignature(hash = 1570707152)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to IndividualIPTCaseView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class IndividualIPTCaseViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.intervention.monitor.IndividualIPTCaseView";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String FACILITY = "facility";
  public static java.lang.String FACILITYNAME = "facilityName";
  public static java.lang.String ID = "id";
  public static java.lang.String PATIENT = "patient";
  public static java.lang.String RESIDENTIALLOCATION = "residentialLocation";
  public static java.lang.String SERVICEDATE = "serviceDate";
  private static final long serialVersionUID = 1570707152;
  
  public IndividualIPTCaseViewBase()
  {
    super();
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public String getFacility()
  {
    return getValue(FACILITY);
  }
  
  public void validateFacility()
  {
    this.validateAttribute(FACILITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getFacilityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.CLASS);
    return mdClassIF.definesAttribute(FACILITY);
  }
  
  public void setFacility(String value)
  {
    if(value == null)
    {
      setValue(FACILITY, "");
    }
    else
    {
      setValue(FACILITY, value);
    }
  }
  
  public String getFacilityName()
  {
    return getValue(FACILITYNAME);
  }
  
  public void validateFacilityName()
  {
    this.validateAttribute(FACILITYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getFacilityNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.CLASS);
    return mdClassIF.definesAttribute(FACILITYNAME);
  }
  
  public void setFacilityName(String value)
  {
    if(value == null)
    {
      setValue(FACILITYNAME, "");
    }
    else
    {
      setValue(FACILITYNAME, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.Person getPatient()
  {
    if (getValue(PATIENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.Person.get(getValue(PATIENT));
    }
  }
  
  public void validatePatient()
  {
    this.validateAttribute(PATIENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPatientMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.CLASS);
    return mdClassIF.definesAttribute(PATIENT);
  }
  
  public void setPatient(dss.vector.solutions.Person value)
  {
    if(value == null)
    {
      setValue(PATIENT, "");
    }
    else
    {
      setValue(PATIENT, value.getId());
    }
  }
  
  public String getResidentialLocation()
  {
    return getValue(RESIDENTIALLOCATION);
  }
  
  public void validateResidentialLocation()
  {
    this.validateAttribute(RESIDENTIALLOCATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getResidentialLocationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.CLASS);
    return mdClassIF.definesAttribute(RESIDENTIALLOCATION);
  }
  
  public void setResidentialLocation(String value)
  {
    if(value == null)
    {
      setValue(RESIDENTIALLOCATION, "");
    }
    else
    {
      setValue(RESIDENTIALLOCATION, value);
    }
  }
  
  public java.util.Date getServiceDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(SERVICEDATE));
  }
  
  public void validateServiceDate()
  {
    this.validateAttribute(SERVICEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getServiceDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.CLASS);
    return mdClassIF.definesAttribute(SERVICEDATE);
  }
  
  public void setServiceDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(SERVICEDATE, "");
    }
    else
    {
      setValue(SERVICEDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static IndividualIPTCaseView get(String id)
  {
    return (IndividualIPTCaseView) com.runwaysdk.business.View.get(id);
  }
  
  public void applyWithInstance(dss.vector.solutions.intervention.monitor.IndividualIPTView instance)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void applyWithInstance(java.lang.String id, dss.vector.solutions.intervention.monitor.IndividualIPTView instance)
  {
    IndividualIPTCaseView _instance = IndividualIPTCaseView.get(id);
    _instance.applyWithInstance(instance);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    IndividualIPTCaseView _instance = IndividualIPTCaseView.get(id);
    _instance.deleteConcrete();
  }
  
  public static dss.vector.solutions.intervention.monitor.IndividualIPTCaseViewQuery getPage(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.PersonView getPatientView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.PersonView getPatientView(java.lang.String id)
  {
    IndividualIPTCaseView _instance = IndividualIPTCaseView.get(id);
    return _instance.getPatientView();
  }
  
  public static dss.vector.solutions.intervention.monitor.IndividualIPTCaseView[] searchCases(java.util.Date serviceDate, java.lang.String patientId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.intervention.monitor.IndividualIPTCaseView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
