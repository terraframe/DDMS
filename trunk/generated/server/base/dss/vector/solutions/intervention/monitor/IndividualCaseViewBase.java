package dss.vector.solutions.intervention.monitor;

@com.runwaysdk.business.ClassSignature(hash = -738166906)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to IndividualCaseView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class IndividualCaseViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.intervention.monitor.IndividualCaseView";
  public static java.lang.String AGE = "age";
  public static java.lang.String CASEENTRYDATE = "caseEntryDate";
  public static java.lang.String CASEREPORTDATE = "caseReportDate";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String DIAGNOSISDATE = "diagnosisDate";
  public static java.lang.String ID = "id";
  public static java.lang.String PATIENT = "patient";
  public static java.lang.String PROBABLESOURCE = "probableSource";
  public static java.lang.String PROBABLESOURCETEXT = "probableSourceText";
  public static java.lang.String RESIDENCE = "residence";
  public static java.lang.String RESIDENCETEXT = "residenceText";
  public static java.lang.String WORKPLACE = "workplace";
  public static java.lang.String WORKPLACETEXT = "workplaceText";
  private static final long serialVersionUID = -738166906;
  
  public IndividualCaseViewBase()
  {
    super();
  }
  
  public Integer getAge()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(AGE));
  }
  
  public void validateAge()
  {
    this.validateAttribute(AGE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAgeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(AGE);
  }
  
  public void setAge(Integer value)
  {
    if(value == null)
    {
      setValue(AGE, "");
    }
    else
    {
      setValue(AGE, java.lang.Integer.toString(value));
    }
  }
  
  public java.util.Date getCaseEntryDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(CASEENTRYDATE));
  }
  
  public void validateCaseEntryDate()
  {
    this.validateAttribute(CASEENTRYDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCaseEntryDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(CASEENTRYDATE);
  }
  
  public void setCaseEntryDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(CASEENTRYDATE, "");
    }
    else
    {
      setValue(CASEENTRYDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public java.util.Date getCaseReportDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(CASEREPORTDATE));
  }
  
  public void validateCaseReportDate()
  {
    this.validateAttribute(CASEREPORTDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCaseReportDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(CASEREPORTDATE);
  }
  
  public void setCaseReportDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(CASEREPORTDATE, "");
    }
    else
    {
      setValue(CASEREPORTDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public java.util.Date getDiagnosisDate()
  {
    return com.runwaysdk.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(DIAGNOSISDATE));
  }
  
  public void validateDiagnosisDate()
  {
    this.validateAttribute(DIAGNOSISDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDiagnosisDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(DIAGNOSISDATE);
  }
  
  public void setDiagnosisDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(DIAGNOSISDATE, "");
    }
    else
    {
      setValue(DIAGNOSISDATE, new java.text.SimpleDateFormat(com.runwaysdk.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.Patient getPatient()
  {
    if (getValue(PATIENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.Patient.get(getValue(PATIENT));
    }
  }
  
  public void validatePatient()
  {
    this.validateAttribute(PATIENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPatientMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(PATIENT);
  }
  
  public void setPatient(dss.vector.solutions.Patient value)
  {
    if(value == null)
    {
      setValue(PATIENT, "");
    }
    else
    {
      setValue(PATIENT, value.getId());
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getProbableSource()
  {
    if (getValue(PROBABLESOURCE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(PROBABLESOURCE));
    }
  }
  
  public void validateProbableSource()
  {
    this.validateAttribute(PROBABLESOURCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getProbableSourceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(PROBABLESOURCE);
  }
  
  public void setProbableSource(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(PROBABLESOURCE, "");
    }
    else
    {
      setValue(PROBABLESOURCE, value.getId());
    }
  }
  
  public String getProbableSourceText()
  {
    return getValue(PROBABLESOURCETEXT);
  }
  
  public void validateProbableSourceText()
  {
    this.validateAttribute(PROBABLESOURCETEXT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getProbableSourceTextMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(PROBABLESOURCETEXT);
  }
  
  public void setProbableSourceText(String value)
  {
    if(value == null)
    {
      setValue(PROBABLESOURCETEXT, "");
    }
    else
    {
      setValue(PROBABLESOURCETEXT, value);
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getResidence()
  {
    if (getValue(RESIDENCE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(RESIDENCE));
    }
  }
  
  public void validateResidence()
  {
    this.validateAttribute(RESIDENCE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getResidenceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(RESIDENCE);
  }
  
  public void setResidence(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(RESIDENCE, "");
    }
    else
    {
      setValue(RESIDENCE, value.getId());
    }
  }
  
  public String getResidenceText()
  {
    return getValue(RESIDENCETEXT);
  }
  
  public void validateResidenceText()
  {
    this.validateAttribute(RESIDENCETEXT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getResidenceTextMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(RESIDENCETEXT);
  }
  
  public void setResidenceText(String value)
  {
    if(value == null)
    {
      setValue(RESIDENCETEXT, "");
    }
    else
    {
      setValue(RESIDENCETEXT, value);
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getWorkplace()
  {
    if (getValue(WORKPLACE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(WORKPLACE));
    }
  }
  
  public void validateWorkplace()
  {
    this.validateAttribute(WORKPLACE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getWorkplaceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(WORKPLACE);
  }
  
  public void setWorkplace(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(WORKPLACE, "");
    }
    else
    {
      setValue(WORKPLACE, value.getId());
    }
  }
  
  public String getWorkplaceText()
  {
    return getValue(WORKPLACETEXT);
  }
  
  public void validateWorkplaceText()
  {
    this.validateAttribute(WORKPLACETEXT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getWorkplaceTextMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.IndividualCaseView.CLASS);
    return mdClassIF.definesAttribute(WORKPLACETEXT);
  }
  
  public void setWorkplaceText(String value)
  {
    if(value == null)
    {
      setValue(WORKPLACETEXT, "");
    }
    else
    {
      setValue(WORKPLACETEXT, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static IndividualCaseView get(String id)
  {
    return (IndividualCaseView) com.runwaysdk.business.View.get(id);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
