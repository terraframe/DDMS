package dss.vector.solutions.intervention.monitor;

@com.runwaysdk.business.ClassSignature(hash = -712681382)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to NotApplicableProblem.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class NotApplicableProblemBase extends dss.vector.solutions.NotificationProblem implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.intervention.monitor.NotApplicableProblem";
  public static java.lang.String INPUTATTRIBUTE = "inputAttribute";
  public static java.lang.String INPUTVALUE = "inputValue";
  private static final long serialVersionUID = -712681382;
  
  public NotApplicableProblemBase()
  {
    super();
  }
  
  public NotApplicableProblemBase(java.lang.String developerMessage)
  {
    super(developerMessage);
  }
  
  public String getInputAttribute()
  {
    return getValue(INPUTATTRIBUTE);
  }
  
  public void validateInputAttribute()
  {
    this.validateAttribute(INPUTATTRIBUTE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getInputAttributeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.NotApplicableProblem.CLASS);
    return mdClassIF.definesAttribute(INPUTATTRIBUTE);
  }
  
  public void setInputAttribute(String value)
  {
    if(value == null)
    {
      setValue(INPUTATTRIBUTE, "");
    }
    else
    {
      setValue(INPUTATTRIBUTE, value);
    }
  }
  
  public String getInputValue()
  {
    return getValue(INPUTVALUE);
  }
  
  public void validateInputValue()
  {
    this.validateAttribute(INPUTVALUE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getInputValueMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.intervention.monitor.NotApplicableProblem.CLASS);
    return mdClassIF.definesAttribute(INPUTVALUE);
  }
  
  public void setInputValue(String value)
  {
    if(value == null)
    {
      setValue(INPUTVALUE, "");
    }
    else
    {
      setValue(INPUTVALUE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public java.lang.String localize(java.util.Locale locale)
  {
    java.lang.String message = super.localize(locale);
    message = replace(message, "{inputAttribute}", this.getInputAttribute());
    message = replace(message, "{inputValue}", this.getInputValue());
    return message;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
