package dss.vector.solutions.intervention.monitor;

@com.terraframe.mojo.business.ClassSignature(hash = -56192162)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SurveyedPerson.java
 *
 * @author Autogenerated by TerraFrame
 */
public  class SurveyedPersonQuery extends com.terraframe.mojo.query.GeneratedBusinessQuery
 implements com.terraframe.mojo.generation.loader.Reloadable
{
private static final long serialVersionUID = -56192162;

  public SurveyedPersonQuery(com.terraframe.mojo.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.terraframe.mojo.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public SurveyedPersonQuery(com.terraframe.mojo.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.terraframe.mojo.business.BusinessQuery businessQuery = new com.terraframe.mojo.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.intervention.monitor.SurveyedPerson.CLASS;
  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getAnaemiaTreatment()
  {
    return getAnaemiaTreatment(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getAnaemiaTreatment(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("anaemiaTreatment");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.ANAEMIATREATMENT, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getAnaemiaTreatment(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("anaemiaTreatment");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.ANAEMIATREATMENT, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideDetail()
  {
    return getBloodslideDetail(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideDetail(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("bloodslideDetail");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDEDETAIL, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideDetail(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("bloodslideDetail");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDEDETAIL, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideReason()
  {
    return getBloodslideReason(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideReason(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("bloodslideReason");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDEREASON, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideReason(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("bloodslideReason");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDEREASON, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getBloodslideResult()
  {
    return getBloodslideResult(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getBloodslideResult(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDERESULT, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getBloodslideResult(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDERESULT, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.CREATEDATE, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.CREATEDATE, alias, displayLabel);

  }
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("createdBy");

    return (com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("createdBy");

    return (com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableMoment getDob()
  {
    return getDob(null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getDob(String alias)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.DOB, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getDob(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.DOB, alias, displayLabel);

  }
  public com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("entityDomain");

    return (com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("entityDomain");

    return (com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getFever()
  {
    return getFever(null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getFever(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("fever");

    return (dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF)this.getComponentQuery().internalAttributeFactory("fever", mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getFever(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("fever");

    return (dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF)this.getComponentQuery().internalAttributeFactory("fever", mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableDecimal getHaemoglobin()
  {
    return getHaemoglobin(null);

  }
 
  public com.terraframe.mojo.query.SelectableDecimal getHaemoglobin(String alias)
  {
    return (com.terraframe.mojo.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HAEMOGLOBIN, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableDecimal getHaemoglobin(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HAEMOGLOBIN, alias, displayLabel);

  }
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getHaemoglobinMeasured()
  {
    return getHaemoglobinMeasured(null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getHaemoglobinMeasured(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("haemoglobinMeasured");

    return (dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF)this.getComponentQuery().internalAttributeFactory("haemoglobinMeasured", mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getHaemoglobinMeasured(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("haemoglobinMeasured");

    return (dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF)this.getComponentQuery().internalAttributeFactory("haemoglobinMeasured", mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getHeadOfHousehold()
  {
    return getHeadOfHousehold(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getHeadOfHousehold(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("headOfHousehold");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.HEADOFHOUSEHOLD, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getHeadOfHousehold(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("headOfHousehold");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.HEADOFHOUSEHOLD, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF getHousehold()
  {
    return getHousehold(null);

  }
 
  public dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF getHousehold(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("household");

    return (dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.HOUSEHOLD, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF getHousehold(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("household");

    return (dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.HOUSEHOLD, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getId(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.ID, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.ID, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getImmuneCompromised()
  {
    return getImmuneCompromised(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getImmuneCompromised(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("immuneCompromised");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.IMMUNECOMPROMISED, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getImmuneCompromised(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("immuneCompromised");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.IMMUNECOMPROMISED, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getIron()
  {
    return getIron(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getIron(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.IRON, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getIron(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.IRON, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getKeyName(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.KEYNAME, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.KEYNAME, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.LASTUPDATEDATE, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("lastUpdatedBy");

    return (com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("lastUpdatedBy");

    return (com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("lockedBy");

    return (com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("lockedBy");

    return (com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getMalaria()
  {
    return getMalaria(null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getMalaria(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("malaria");

    return (dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF)this.getComponentQuery().internalAttributeFactory("malaria", mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getMalaria(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("malaria");

    return (dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF)this.getComponentQuery().internalAttributeFactory("malaria", mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaConformationTechnique()
  {
    return getMalariaConformationTechnique(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaConformationTechnique(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("malariaConformationTechnique");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.MALARIACONFORMATIONTECHNIQUE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaConformationTechnique(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("malariaConformationTechnique");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.MALARIACONFORMATIONTECHNIQUE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("owner");

    return (com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("owner");

    return (com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPayment()
  {
    return getPayment(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPayment(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("payment");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.PAYMENT, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPayment(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("payment");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.PAYMENT, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getPerformedBloodslide()
  {
    return getPerformedBloodslide(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getPerformedBloodslide(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERFORMEDBLOODSLIDE, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getPerformedBloodslide(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERFORMEDBLOODSLIDE, alias, displayLabel);

  }
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getPerformedRDT()
  {
    return getPerformedRDT(null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getPerformedRDT(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("performedRDT");

    return (dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF)this.getComponentQuery().internalAttributeFactory("performedRDT", mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getPerformedRDT(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("performedRDT");

    return (dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF)this.getComponentQuery().internalAttributeFactory("performedRDT", mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getPersonId()
  {
    return getPersonId(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getPersonId(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERSONID, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getPersonId(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERSONID, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getPregnant()
  {
    return getPregnant(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getPregnant(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PREGNANT, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getPregnant(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PREGNANT, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtDetail()
  {
    return getRdtDetail(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtDetail(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("rdtDetail");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTDETAIL, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtDetail(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("rdtDetail");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTDETAIL, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getRdtResult()
  {
    return getRdtResult(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getRdtResult(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTRESULT, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getRdtResult(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTRESULT, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtTreatment()
  {
    return getRdtTreatment(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtTreatment(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("rdtTreatment");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTTREATMENT, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtTreatment(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("rdtTreatment");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTTREATMENT, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.terraframe.mojo.query.SelectableLong getSeq(String alias)
  {
    return (com.terraframe.mojo.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SEQ, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SEQ, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex()
  {
    return getSex(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sex");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.SEX, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sex");

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.SEX, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SITEMASTER, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SITEMASTER, alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF getSleptUnderNet()
  {
    return getSleptUnderNet(null);

  }
 
  public dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF getSleptUnderNet(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sleptUnderNet");

    return (dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.SLEPTUNDERNET, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF getSleptUnderNet(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sleptUnderNet");

    return (dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.SurveyedPerson.SLEPTUNDERNET, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getType(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.TYPE, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.SurveyedPerson.TYPE, alias, displayLabel);

  }
  protected com.terraframe.mojo.query.AttributeReference referenceFactory( com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.terraframe.mojo.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("anaemiaTreatment")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("bloodslideDetail")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("bloodslideReason")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("createdBy")) 
    {
       return new com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("entityDomain")) 
    {
       return new com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("headOfHousehold")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("household")) 
    {
       return new dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("immuneCompromised")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("lastUpdatedBy")) 
    {
       return new com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("lockedBy")) 
    {
       return new com.terraframe.mojo.system.UsersQuery.UsersQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("malariaConformationTechnique")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("owner")) 
    {
       return new com.terraframe.mojo.system.ActorQuery.ActorQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("payment")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("rdtDetail")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("rdtTreatment")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sex")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sleptUnderNet")) 
    {
       return new dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.terraframe.mojo.query.QueryException(error);
    }
  }

  protected com.terraframe.mojo.query.AttributeEnumeration enumerationFactory( com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  String mdEnumerationTableName, com.terraframe.mojo.dataaccess.MdBusinessDAOIF masterListMdBusinessIF, String masterListTalbeAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("fever")) 
    {
       return new dss.vector.solutions.ResponseMasterQuery.ResponseQuery((com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("haemoglobinMeasured")) 
    {
       return new dss.vector.solutions.ResponseMasterQuery.RefusedResponseQuery((com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("malaria")) 
    {
       return new dss.vector.solutions.ResponseMasterQuery.ResponseQuery((com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("performedRDT")) 
    {
       return new dss.vector.solutions.ResponseMasterQuery.RefusedResponseQuery((com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.terraframe.mojo.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.terraframe.mojo.query.OIterator<? extends SurveyedPerson> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.terraframe.mojo.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.terraframe.mojo.dataaccess.database.Database.query(sqlStmt);
    return new com.terraframe.mojo.business.BusinessIterator<SurveyedPerson>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.terraframe.mojo.query.Condition households()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_households()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition households(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    return this.getBusinessQuery().isChildIn(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_households(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(householdQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(householdQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    householdSurveyedPersonQuery.AND(householdSurveyedPersonQuery.hasParent(householdQuery));
    return this.getBusinessQuery().isChildIn(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    householdSurveyedPersonQuery.AND(householdSurveyedPersonQuery.hasParent(householdQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(householdSurveyedPersonQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_households()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    return this.getBusinessQuery().isNotChildIn(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(householdQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(householdQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    householdSurveyedPersonQuery.AND(householdSurveyedPersonQuery.hasParent(householdQuery));
    return this.getBusinessQuery().isNotChildIn(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    householdSurveyedPersonQuery.AND(householdSurveyedPersonQuery.hasParent(householdQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(householdSurveyedPersonQuery);
  }


  public com.terraframe.mojo.query.Condition locations()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_locations()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition locations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.getBusinessQuery().isParentIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_locations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition locations(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_locations(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_locations()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_locations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.getBusinessQuery().isNotParentIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }


  public com.terraframe.mojo.query.Condition treatments()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_treatments()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition treatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.getBusinessQuery().isParentIn(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_treatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition treatments(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_treatments(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_treatments()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_treatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.getBusinessQuery().isNotParentIn(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface SurveyedPersonQueryReferenceIF extends com.terraframe.mojo.generation.loader.Reloadable, com.terraframe.mojo.query.SelectableReference
  {

    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getAnaemiaTreatment();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getAnaemiaTreatment(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getAnaemiaTreatment(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideDetail();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideDetail(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideDetail(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideReason();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideReason(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideReason(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableBoolean getBloodslideResult();
    public com.terraframe.mojo.query.SelectableBoolean getBloodslideResult(String alias);
    public com.terraframe.mojo.query.SelectableBoolean getBloodslideResult(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableMoment getCreateDate();
    public com.terraframe.mojo.query.SelectableMoment getCreateDate(String alias);
    public com.terraframe.mojo.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableMoment getDob();
    public com.terraframe.mojo.query.SelectableMoment getDob(String alias);
    public com.terraframe.mojo.query.SelectableMoment getDob(String alias, String displayLabel);
    public com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getFever();
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getFever(String alias);
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getFever(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableDecimal getHaemoglobin();
    public com.terraframe.mojo.query.SelectableDecimal getHaemoglobin(String alias);
    public com.terraframe.mojo.query.SelectableDecimal getHaemoglobin(String alias, String displayLabel);
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getHaemoglobinMeasured();
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getHaemoglobinMeasured(String alias);
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getHaemoglobinMeasured(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getHeadOfHousehold();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getHeadOfHousehold(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getHeadOfHousehold(String alias, String displayLabel);
    public dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF getHousehold();
    public dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF getHousehold(String alias);
    public dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF getHousehold(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableChar getId();
    public com.terraframe.mojo.query.SelectableChar getId(String alias);
    public com.terraframe.mojo.query.SelectableChar getId(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getImmuneCompromised();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getImmuneCompromised(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getImmuneCompromised(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableBoolean getIron();
    public com.terraframe.mojo.query.SelectableBoolean getIron(String alias);
    public com.terraframe.mojo.query.SelectableBoolean getIron(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableChar getKeyName();
    public com.terraframe.mojo.query.SelectableChar getKeyName(String alias);
    public com.terraframe.mojo.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableMoment getLastUpdateDate();
    public com.terraframe.mojo.query.SelectableMoment getLastUpdateDate(String alias);
    public com.terraframe.mojo.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getMalaria();
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getMalaria(String alias);
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getMalaria(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaConformationTechnique();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaConformationTechnique(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaConformationTechnique(String alias, String displayLabel);
    public com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPayment();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPayment(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPayment(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableBoolean getPerformedBloodslide();
    public com.terraframe.mojo.query.SelectableBoolean getPerformedBloodslide(String alias);
    public com.terraframe.mojo.query.SelectableBoolean getPerformedBloodslide(String alias, String displayLabel);
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getPerformedRDT();
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getPerformedRDT(String alias);
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getPerformedRDT(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableChar getPersonId();
    public com.terraframe.mojo.query.SelectableChar getPersonId(String alias);
    public com.terraframe.mojo.query.SelectableChar getPersonId(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableBoolean getPregnant();
    public com.terraframe.mojo.query.SelectableBoolean getPregnant(String alias);
    public com.terraframe.mojo.query.SelectableBoolean getPregnant(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtDetail();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtDetail(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtDetail(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableBoolean getRdtResult();
    public com.terraframe.mojo.query.SelectableBoolean getRdtResult(String alias);
    public com.terraframe.mojo.query.SelectableBoolean getRdtResult(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtTreatment();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtTreatment(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtTreatment(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableLong getSeq();
    public com.terraframe.mojo.query.SelectableLong getSeq(String alias);
    public com.terraframe.mojo.query.SelectableLong getSeq(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex();
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias);
    public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableChar getSiteMaster();
    public com.terraframe.mojo.query.SelectableChar getSiteMaster(String alias);
    public com.terraframe.mojo.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF getSleptUnderNet();
    public dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF getSleptUnderNet(String alias);
    public dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF getSleptUnderNet(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableChar getType();
    public com.terraframe.mojo.query.SelectableChar getType(String alias);
    public com.terraframe.mojo.query.SelectableChar getType(String alias, String displayLabel);

    public com.terraframe.mojo.query.BasicCondition EQ(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson);

    public com.terraframe.mojo.query.BasicCondition NE(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson);


  public com.terraframe.mojo.query.Condition locations();

  public com.terraframe.mojo.query.Condition locations(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery);


  public com.terraframe.mojo.query.Condition SUBSELECT_locations();

  public com.terraframe.mojo.query.Condition SUBSELECT_locations(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition SUBSELECT_locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery);


  public com.terraframe.mojo.query.Condition treatments();

  public com.terraframe.mojo.query.Condition treatments(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery);


  public com.terraframe.mojo.query.Condition SUBSELECT_treatments();

  public com.terraframe.mojo.query.Condition SUBSELECT_treatments(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition SUBSELECT_treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery);


  public com.terraframe.mojo.query.Condition NOT_IN_locations();

  public com.terraframe.mojo.query.Condition NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery);


  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations();

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery);


  public com.terraframe.mojo.query.Condition NOT_IN_treatments();

  public com.terraframe.mojo.query.Condition NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery);


  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments();

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery);


  public com.terraframe.mojo.query.Condition households();
  public com.terraframe.mojo.query.Condition households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery);

  public com.terraframe.mojo.query.Condition households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery);


  public com.terraframe.mojo.query.Condition SUBSELECT_households();
  public com.terraframe.mojo.query.Condition SUBSELECT_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery);

  public com.terraframe.mojo.query.Condition SUBSELECT_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery);


  public com.terraframe.mojo.query.Condition NOT_IN_households();
  public com.terraframe.mojo.query.Condition NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery);

  public com.terraframe.mojo.query.Condition NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery);


  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households();
  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery);

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class SurveyedPersonQueryReference extends com.terraframe.mojo.query.AttributeReference
 implements SurveyedPersonQueryReferenceIF
, com.terraframe.mojo.generation.loader.Reloadable
  {
private static final long serialVersionUID = 515620992;

  public SurveyedPersonQueryReference(com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.terraframe.mojo.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.terraframe.mojo.query.BasicCondition EQ(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson)
    {
      return this.EQ(surveyedPerson.getId());
    }

    public com.terraframe.mojo.query.BasicCondition NE(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson)
    {
      return this.NE(surveyedPerson.getId());
    }

  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getAnaemiaTreatment()
  {
    return getAnaemiaTreatment(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getAnaemiaTreatment(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.ANAEMIATREATMENT, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getAnaemiaTreatment(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.ANAEMIATREATMENT,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideDetail()
  {
    return getBloodslideDetail(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideDetail(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDEDETAIL, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideDetail(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDEDETAIL,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideReason()
  {
    return getBloodslideReason(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideReason(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDEREASON, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getBloodslideReason(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDEREASON,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getBloodslideResult()
  {
    return getBloodslideResult(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getBloodslideResult(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDERESULT, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getBloodslideResult(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.BLOODSLIDERESULT, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.CREATEDATE, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.CREATEDATE, alias, displayLabel);

  }
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.CREATEDBY, alias, null);

  }
 
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.CREATEDBY,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableMoment getDob()
  {
    return getDob(null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getDob(String alias)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.DOB, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getDob(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.DOB, alias, displayLabel);

  }
  public com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.ENTITYDOMAIN, alias, null);

  }
 
  public com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.ENTITYDOMAIN,  alias, displayLabel);

  }
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getFever()
  {
    return getFever(null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getFever(String alias)
  {
    return (dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.FEVER, alias, null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getFever(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.FEVER, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableDecimal getHaemoglobin()
  {
    return getHaemoglobin(null);

  }
 
  public com.terraframe.mojo.query.SelectableDecimal getHaemoglobin(String alias)
  {
    return (com.terraframe.mojo.query.SelectableDecimal)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HAEMOGLOBIN, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableDecimal getHaemoglobin(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableDecimal)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HAEMOGLOBIN, alias, displayLabel);

  }
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getHaemoglobinMeasured()
  {
    return getHaemoglobinMeasured(null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getHaemoglobinMeasured(String alias)
  {
    return (dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HAEMOGLOBINMEASURED, alias, null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getHaemoglobinMeasured(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HAEMOGLOBINMEASURED, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getHeadOfHousehold()
  {
    return getHeadOfHousehold(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getHeadOfHousehold(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HEADOFHOUSEHOLD, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getHeadOfHousehold(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HEADOFHOUSEHOLD,  alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF getHousehold()
  {
    return getHousehold(null);

  }
 
  public dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF getHousehold(String alias)
  {
    return (dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HOUSEHOLD, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF getHousehold(String alias, String displayLabel)
  {
    return (dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.HOUSEHOLD,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getId(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.ID, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.ID, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getImmuneCompromised()
  {
    return getImmuneCompromised(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getImmuneCompromised(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.IMMUNECOMPROMISED, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getImmuneCompromised(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.IMMUNECOMPROMISED,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getIron()
  {
    return getIron(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getIron(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.IRON, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getIron(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.IRON, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getKeyName(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.KEYNAME, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.KEYNAME, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.LASTUPDATEDATE, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.LASTUPDATEDBY, alias, null);

  }
 
  public com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.LOCKEDBY, alias, null);

  }
 
  public com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.LOCKEDBY,  alias, displayLabel);

  }
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getMalaria()
  {
    return getMalaria(null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getMalaria(String alias)
  {
    return (dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.MALARIA, alias, null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF getMalaria(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ResponseMasterQuery.ResponseQueryIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.MALARIA, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaConformationTechnique()
  {
    return getMalariaConformationTechnique(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaConformationTechnique(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.MALARIACONFORMATIONTECHNIQUE, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getMalariaConformationTechnique(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.MALARIACONFORMATIONTECHNIQUE,  alias, displayLabel);

  }
  public com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.OWNER, alias, null);

  }
 
  public com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.OWNER,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPayment()
  {
    return getPayment(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPayment(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PAYMENT, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getPayment(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PAYMENT,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getPerformedBloodslide()
  {
    return getPerformedBloodslide(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getPerformedBloodslide(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERFORMEDBLOODSLIDE, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getPerformedBloodslide(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERFORMEDBLOODSLIDE, alias, displayLabel);

  }
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getPerformedRDT()
  {
    return getPerformedRDT(null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getPerformedRDT(String alias)
  {
    return (dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERFORMEDRDT, alias, null);

  }
 
  public dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF getPerformedRDT(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ResponseMasterQuery.RefusedResponseQueryIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERFORMEDRDT, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getPersonId()
  {
    return getPersonId(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getPersonId(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERSONID, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getPersonId(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PERSONID, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getPregnant()
  {
    return getPregnant(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getPregnant(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PREGNANT, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getPregnant(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.PREGNANT, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtDetail()
  {
    return getRdtDetail(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtDetail(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTDETAIL, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtDetail(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTDETAIL,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableBoolean getRdtResult()
  {
    return getRdtResult(null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getRdtResult(String alias)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTRESULT, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableBoolean getRdtResult(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableBoolean)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTRESULT, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtTreatment()
  {
    return getRdtTreatment(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtTreatment(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTTREATMENT, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getRdtTreatment(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.RDTTREATMENT,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.terraframe.mojo.query.SelectableLong getSeq(String alias)
  {
    return (com.terraframe.mojo.query.SelectableLong)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SEQ, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableLong)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SEQ, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex()
  {
    return getSex(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SEX, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getSex(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SEX,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SITEMASTER, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SITEMASTER, alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF getSleptUnderNet()
  {
    return getSleptUnderNet(null);

  }
 
  public dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF getSleptUnderNet(String alias)
  {
    return (dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SLEPTUNDERNET, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF getSleptUnderNet(String alias, String displayLabel)
  {
    return (dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.SLEPTUNDERNET,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getType(String alias)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.TYPE, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.SurveyedPerson.TYPE, alias, displayLabel);

  }

  public com.terraframe.mojo.query.Condition locations()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_locations()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition locations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.isParentIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_locations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.isParentIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition locations(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_locations(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasChild(termQuery));
    return this.isParentIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasChild(termQuery));
    return this.isParentIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }


  public com.terraframe.mojo.query.Condition treatments()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_treatments()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition treatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.isParentIn(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_treatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.isParentIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition treatments(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_treatments(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasChild(termQuery));
    return this.isParentIn(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasChild(termQuery));
    return this.isParentIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_locations()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_locations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.isNotParentIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.isNotParentIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasChild(termQuery));
    return this.isNotParentIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_locations(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasChild(termQuery));
    return this.isNotParentIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_treatments()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_treatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.isNotParentIn(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.isNotParentIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasChild(termQuery));
    return this.isNotParentIn(surveyedPersonTreatmentQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_treatments(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasChild(termQuery));
    return this.isNotParentIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }


  public com.terraframe.mojo.query.Condition households()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_households()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition households(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    return this.isChildIn(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_households(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    return this.isChildIn_SUBSELECT(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(householdQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(householdQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    householdSurveyedPersonQuery.AND(householdSurveyedPersonQuery.hasParent(householdQuery));
    return this.isChildIn(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    householdSurveyedPersonQuery.AND(householdSurveyedPersonQuery.hasParent(householdQuery));
    return this.isChildIn_SUBSELECT(householdSurveyedPersonQuery);
  }


  public com.terraframe.mojo.query.Condition NOT_IN_households()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households()
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    return this.isNotChildIn(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    return this.isNotChildIn_SUBSELECT(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(householdQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery)
  {
    com.terraframe.mojo.query.QueryFactory queryFactory = this.getQueryFactory();
    com.terraframe.mojo.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.HouseholdSurveyedPerson.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(householdQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.terraframe.mojo.query.Condition NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    householdSurveyedPersonQuery.AND(householdSurveyedPersonQuery.hasParent(householdQuery));
    return this.isNotChildIn(householdSurveyedPersonQuery);
  }

  public com.terraframe.mojo.query.Condition SUBSELECT_NOT_IN_households(dss.vector.solutions.intervention.monitor.HouseholdQuery householdQuery, dss.vector.solutions.intervention.monitor.HouseholdSurveyedPersonQuery householdSurveyedPersonQuery)
  {
    householdSurveyedPersonQuery.AND(householdSurveyedPersonQuery.hasParent(householdQuery));
    return this.isNotChildIn_SUBSELECT(householdSurveyedPersonQuery);
  }

  protected com.terraframe.mojo.query.AttributeReference referenceFactory( com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.terraframe.mojo.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("anaemiaTreatment")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("bloodslideDetail")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("bloodslideReason")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("createdBy")) 
    {
       return new com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("entityDomain")) 
    {
       return new com.terraframe.mojo.system.metadata.MdDomainQuery.MdDomainQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("headOfHousehold")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("household")) 
    {
       return new dss.vector.solutions.intervention.monitor.HouseholdQuery.HouseholdQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("immuneCompromised")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("lastUpdatedBy")) 
    {
       return new com.terraframe.mojo.system.SingleActorQuery.SingleActorQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("lockedBy")) 
    {
       return new com.terraframe.mojo.system.UsersQuery.UsersQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("malariaConformationTechnique")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("owner")) 
    {
       return new com.terraframe.mojo.system.ActorQuery.ActorQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("payment")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("rdtDetail")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("rdtTreatment")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sex")) 
    {
       return new dss.vector.solutions.ontology.TermQuery.TermQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sleptUnderNet")) 
    {
       return new dss.vector.solutions.intervention.monitor.ITNInstanceQuery.ITNInstanceQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.terraframe.mojo.query.QueryException(error);
    }
  }

  protected com.terraframe.mojo.query.AttributeEnumeration enumerationFactory( com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  String mdEnumerationTableName, com.terraframe.mojo.dataaccess.MdBusinessDAOIF masterListMdBusinessIF, String masterListTalbeAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("fever")) 
    {
       return new dss.vector.solutions.ResponseMasterQuery.ResponseQuery((com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("haemoglobinMeasured")) 
    {
       return new dss.vector.solutions.ResponseMasterQuery.RefusedResponseQuery((com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("malaria")) 
    {
       return new dss.vector.solutions.ResponseMasterQuery.ResponseQuery((com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("performedRDT")) 
    {
       return new dss.vector.solutions.ResponseMasterQuery.RefusedResponseQuery((com.terraframe.mojo.dataaccess.MdAttributeEnumerationDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdEnumerationTableName, masterListMdBusinessIF, masterListTalbeAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.terraframe.mojo.query.QueryException(error);
    }
  }

  }
}
