package dss.vector.solutions.intervention.monitor;

@com.runwaysdk.business.ClassSignature(hash = -112325534)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ITNData.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class ITNDataQuery extends com.runwaysdk.query.GeneratedBusinessQuery
 implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = -112325534;

  public ITNDataQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public ITNDataQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.intervention.monitor.ITNData.CLASS;
  }
  public com.runwaysdk.query.SelectableChar getBatchNumber()
  {
    return getBatchNumber(null);

  }
 
  public com.runwaysdk.query.SelectableChar getBatchNumber(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.BATCHNUMBER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getBatchNumber(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.BATCHNUMBER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getCurrencyReceived()
  {
    return getCurrencyReceived(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getCurrencyReceived(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.CURRENCYRECEIVED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getCurrencyReceived(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.CURRENCYRECEIVED, alias, displayLabel);

  }
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease()
  {
    return getDisease(null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.DISEASE);

    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.DISEASE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.DISEASE);

    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.DISEASE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getEndDate()
  {
    return getEndDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getEndDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.ENDDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getEndDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.ENDDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity()
  {
    return getGeoEntity(null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.GEOENTITY);

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.GEOENTITY, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.GEOENTITY);

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.GEOENTITY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNumberDistributed()
  {
    return getNumberDistributed(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberDistributed(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.NUMBERDISTRIBUTED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberDistributed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.NUMBERDISTRIBUTED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNumberSold()
  {
    return getNumberSold(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberSold(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.NUMBERSOLD, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberSold(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.NUMBERSOLD, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.intervention.monitor.ITNData.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.intervention.monitor.ITNData.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getReceivedForCommunityResponse()
  {
    return getReceivedForCommunityResponse(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceivedForCommunityResponse(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.RECEIVEDFORCOMMUNITYRESPONSE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceivedForCommunityResponse(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.RECEIVEDFORCOMMUNITYRESPONSE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getReceivedForTargetGroups()
  {
    return getReceivedForTargetGroups(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceivedForTargetGroups(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.RECEIVEDFORTARGETGROUPS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceivedForTargetGroups(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.RECEIVEDFORTARGETGROUPS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getStartDate()
  {
    return getStartDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getStartDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.STARTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getStartDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.STARTDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.intervention.monitor.ITNData.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.DISEASE)) 
    {
       return new dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.GEOENTITY)) 
    {
       return new dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends ITNData> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<ITNData>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition nets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_nets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition nets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.getBusinessQuery().isParentIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_nets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition nets(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_nets(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(iTNNetQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_nets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_nets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.getBusinessQuery().isNotParentIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(iTNNetQuery);
  }


  public com.runwaysdk.query.Condition services()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_services()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition services(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.getBusinessQuery().isParentIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_services(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition services(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_services(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(iTNServiceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_services()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_services(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.getBusinessQuery().isNotParentIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(iTNServiceQuery);
  }


  public com.runwaysdk.query.Condition targetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_targetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition targetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.getBusinessQuery().isParentIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_targetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition targetGroups(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(iTNTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_targetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_targetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.getBusinessQuery().isNotParentIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(iTNTargetGroupQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface ITNDataQueryReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableChar getBatchNumber();
    public com.runwaysdk.query.SelectableChar getBatchNumber(String alias);
    public com.runwaysdk.query.SelectableChar getBatchNumber(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableDecimal getCurrencyReceived();
    public com.runwaysdk.query.SelectableDecimal getCurrencyReceived(String alias);
    public com.runwaysdk.query.SelectableDecimal getCurrencyReceived(String alias, String displayLabel);
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease();
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias);
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getEndDate();
    public com.runwaysdk.query.SelectableMoment getEndDate(String alias);
    public com.runwaysdk.query.SelectableMoment getEndDate(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity();
    public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias);
    public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getNumberDistributed();
    public com.runwaysdk.query.SelectableInteger getNumberDistributed(String alias);
    public com.runwaysdk.query.SelectableInteger getNumberDistributed(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getNumberSold();
    public com.runwaysdk.query.SelectableInteger getNumberSold(String alias);
    public com.runwaysdk.query.SelectableInteger getNumberSold(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getReceivedForCommunityResponse();
    public com.runwaysdk.query.SelectableInteger getReceivedForCommunityResponse(String alias);
    public com.runwaysdk.query.SelectableInteger getReceivedForCommunityResponse(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getReceivedForTargetGroups();
    public com.runwaysdk.query.SelectableInteger getReceivedForTargetGroups(String alias);
    public com.runwaysdk.query.SelectableInteger getReceivedForTargetGroups(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getStartDate();
    public com.runwaysdk.query.SelectableMoment getStartDate(String alias);
    public com.runwaysdk.query.SelectableMoment getStartDate(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.intervention.monitor.ITNData iTNData);

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.intervention.monitor.ITNData iTNData);


  public com.runwaysdk.query.Condition nets();

  public com.runwaysdk.query.Condition nets(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery);


  public com.runwaysdk.query.Condition SUBSELECT_nets();

  public com.runwaysdk.query.Condition SUBSELECT_nets(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery);


  public com.runwaysdk.query.Condition services();

  public com.runwaysdk.query.Condition services(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_services();

  public com.runwaysdk.query.Condition SUBSELECT_services(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery);


  public com.runwaysdk.query.Condition targetGroups();

  public com.runwaysdk.query.Condition targetGroups(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery);


  public com.runwaysdk.query.Condition SUBSELECT_targetGroups();

  public com.runwaysdk.query.Condition SUBSELECT_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery);


  public com.runwaysdk.query.Condition NOT_IN_nets();

  public com.runwaysdk.query.Condition NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery);


  public com.runwaysdk.query.Condition NOT_IN_services();

  public com.runwaysdk.query.Condition NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery);


  public com.runwaysdk.query.Condition NOT_IN_targetGroups();

  public com.runwaysdk.query.Condition NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class ITNDataQueryReference extends com.runwaysdk.query.AttributeReference
 implements ITNDataQueryReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {
private static final long serialVersionUID = 1906079360;

  public ITNDataQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.intervention.monitor.ITNData iTNData)
    {
      return this.EQ(iTNData.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.intervention.monitor.ITNData iTNData)
    {
      return this.NE(iTNData.getId());
    }

  public com.runwaysdk.query.SelectableChar getBatchNumber()
  {
    return getBatchNumber(null);

  }
 
  public com.runwaysdk.query.SelectableChar getBatchNumber(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.BATCHNUMBER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getBatchNumber(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.BATCHNUMBER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.ITNData.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.ITNData.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableDecimal getCurrencyReceived()
  {
    return getCurrencyReceived(null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getCurrencyReceived(String alias)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.intervention.monitor.ITNData.CURRENCYRECEIVED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableDecimal getCurrencyReceived(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableDecimal)this.get(dss.vector.solutions.intervention.monitor.ITNData.CURRENCYRECEIVED, alias, displayLabel);

  }
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease()
  {
    return getDisease(null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias)
  {
    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.DISEASE, alias, null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel)
  {
    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.DISEASE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getEndDate()
  {
    return getEndDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getEndDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.ITNData.ENDDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getEndDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.ITNData.ENDDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.ENTITYDOMAIN,  alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity()
  {
    return getGeoEntity(null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias)
  {
    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.GEOENTITY, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias, String displayLabel)
  {
    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.GEOENTITY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNumberDistributed()
  {
    return getNumberDistributed(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberDistributed(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.intervention.monitor.ITNData.NUMBERDISTRIBUTED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberDistributed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.intervention.monitor.ITNData.NUMBERDISTRIBUTED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNumberSold()
  {
    return getNumberSold(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberSold(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.intervention.monitor.ITNData.NUMBERSOLD, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNumberSold(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.intervention.monitor.ITNData.NUMBERSOLD, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.intervention.monitor.ITNData.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getReceivedForCommunityResponse()
  {
    return getReceivedForCommunityResponse(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceivedForCommunityResponse(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.intervention.monitor.ITNData.RECEIVEDFORCOMMUNITYRESPONSE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceivedForCommunityResponse(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.intervention.monitor.ITNData.RECEIVEDFORCOMMUNITYRESPONSE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getReceivedForTargetGroups()
  {
    return getReceivedForTargetGroups(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceivedForTargetGroups(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.intervention.monitor.ITNData.RECEIVEDFORTARGETGROUPS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceivedForTargetGroups(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.intervention.monitor.ITNData.RECEIVEDFORTARGETGROUPS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.intervention.monitor.ITNData.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.intervention.monitor.ITNData.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getStartDate()
  {
    return getStartDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getStartDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.ITNData.STARTDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getStartDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.intervention.monitor.ITNData.STARTDATE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.intervention.monitor.ITNData.TYPE, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition nets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_nets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition nets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.isParentIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_nets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.isParentIn_SUBSELECT(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition nets(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_nets(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasChild(termQuery));
    return this.isParentIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasChild(termQuery));
    return this.isParentIn_SUBSELECT(iTNNetQuery);
  }


  public com.runwaysdk.query.Condition services()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_services()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition services(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.isParentIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_services(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.isParentIn_SUBSELECT(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition services(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_services(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasChild(termQuery));
    return this.isParentIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasChild(termQuery));
    return this.isParentIn_SUBSELECT(iTNServiceQuery);
  }


  public com.runwaysdk.query.Condition targetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_targetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition targetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.isParentIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_targetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.isParentIn_SUBSELECT(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition targetGroups(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasChild(termQuery));
    return this.isParentIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasChild(termQuery));
    return this.isParentIn_SUBSELECT(iTNTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_nets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_nets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.isNotParentIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.isNotParentIn_SUBSELECT(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasChild(termQuery));
    return this.isNotParentIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_nets(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasChild(termQuery));
    return this.isNotParentIn_SUBSELECT(iTNNetQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_services()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_services(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.isNotParentIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.isNotParentIn_SUBSELECT(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasChild(termQuery));
    return this.isNotParentIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_services(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasChild(termQuery));
    return this.isNotParentIn_SUBSELECT(iTNServiceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_targetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_targetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.isNotParentIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.isNotParentIn_SUBSELECT(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasChild(termQuery));
    return this.isNotParentIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_targetGroups(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasChild(termQuery));
    return this.isNotParentIn_SUBSELECT(iTNTargetGroupQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.DISEASE)) 
    {
       return new dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.GEOENTITY)) 
    {
       return new dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.intervention.monitor.ITNData.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
