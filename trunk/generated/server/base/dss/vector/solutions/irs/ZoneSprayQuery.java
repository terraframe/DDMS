package dss.vector.solutions.irs;

@com.terraframe.mojo.business.ClassSignature(hash = -1870393015)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ZoneSpray.java
 *
 * @author Autogenerated by TerraFrame
 */
public  class ZoneSprayQuery extends dss.vector.solutions.irs.AbstractSprayQuery
 implements com.terraframe.mojo.generation.loader.Reloadable
{
private static final long serialVersionUID = -1870393015;

  public ZoneSprayQuery(com.terraframe.mojo.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.terraframe.mojo.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public ZoneSprayQuery(com.terraframe.mojo.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.terraframe.mojo.business.BusinessQuery businessQuery = new com.terraframe.mojo.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.irs.ZoneSpray.CLASS;
  }
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex()
  {
    return getBrandForIndex(null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("brandForIndex");

    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.ZoneSpray.BRANDFORINDEX, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("brandForIndex");

    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.ZoneSpray.BRANDFORINDEX, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex()
  {
    return getGeoEntityForIndex(null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("geoEntityForIndex");

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.ZoneSpray.GEOENTITYFORINDEX, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("geoEntityForIndex");

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.ZoneSpray.GEOENTITYFORINDEX, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableSingleMoment getSprayDateForIndex()
  {
    return getSprayDateForIndex(null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleMoment getSprayDateForIndex(String alias)
  {
    return (com.terraframe.mojo.query.SelectableSingleMoment)this.getComponentQuery().get(dss.vector.solutions.irs.ZoneSpray.SPRAYDATEFORINDEX, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleMoment getSprayDateForIndex(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableSingleMoment)this.getComponentQuery().get(dss.vector.solutions.irs.ZoneSpray.SPRAYDATEFORINDEX, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableSingleChar getSprayMethodForIndex()
  {
    return getSprayMethodForIndex(null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleChar getSprayMethodForIndex(String alias)
  {
    return (com.terraframe.mojo.query.SelectableSingleChar)this.getComponentQuery().get(dss.vector.solutions.irs.ZoneSpray.SPRAYMETHODFORINDEX, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleChar getSprayMethodForIndex(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableSingleChar)this.getComponentQuery().get(dss.vector.solutions.irs.ZoneSpray.SPRAYMETHODFORINDEX, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableSingleInteger getSprayWeek()
  {
    return getSprayWeek(null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleInteger getSprayWeek(String alias)
  {
    return (com.terraframe.mojo.query.SelectableSingleInteger)this.getComponentQuery().get(dss.vector.solutions.irs.ZoneSpray.SPRAYWEEK, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleInteger getSprayWeek(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableSingleInteger)this.getComponentQuery().get(dss.vector.solutions.irs.ZoneSpray.SPRAYWEEK, alias, displayLabel);

  }
  public dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF getSupervisor()
  {
    return getSupervisor(null);

  }
 
  public dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF getSupervisor(String alias)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("supervisor");

    return (dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.ZoneSpray.SUPERVISOR, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF getSupervisor(String alias, String displayLabel)
  {

    com.terraframe.mojo.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("supervisor");

    return (dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.ZoneSpray.SUPERVISOR, mdAttributeIF, this, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableSingleInteger getTarget()
  {
    return getTarget(null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleInteger getTarget(String alias)
  {
    return (com.terraframe.mojo.query.SelectableSingleInteger)this.getComponentQuery().get(dss.vector.solutions.irs.ZoneSpray.TARGET, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleInteger getTarget(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableSingleInteger)this.getComponentQuery().get(dss.vector.solutions.irs.ZoneSpray.TARGET, alias, displayLabel);

  }
  protected com.terraframe.mojo.query.AttributeReference referenceFactory( com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.terraframe.mojo.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("brandForIndex")) 
    {
       return new dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("geoEntityForIndex")) 
    {
       return new dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("supervisor")) 
    {
       return new dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.terraframe.mojo.query.OIterator<? extends ZoneSpray> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.terraframe.mojo.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.terraframe.mojo.dataaccess.database.Database.query(sqlStmt);
    return new com.terraframe.mojo.business.BusinessIterator<ZoneSpray>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface ZoneSprayQueryReferenceIF extends com.terraframe.mojo.generation.loader.Reloadable, dss.vector.solutions.irs.AbstractSprayQuery.AbstractSprayQueryReferenceIF
  {

    public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex();
    public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias);
    public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias, String displayLabel);
    public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex();
    public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias);
    public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableSingleMoment getSprayDateForIndex();
    public com.terraframe.mojo.query.SelectableSingleMoment getSprayDateForIndex(String alias);
    public com.terraframe.mojo.query.SelectableSingleMoment getSprayDateForIndex(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableSingleChar getSprayMethodForIndex();
    public com.terraframe.mojo.query.SelectableSingleChar getSprayMethodForIndex(String alias);
    public com.terraframe.mojo.query.SelectableSingleChar getSprayMethodForIndex(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableSingleInteger getSprayWeek();
    public com.terraframe.mojo.query.SelectableSingleInteger getSprayWeek(String alias);
    public com.terraframe.mojo.query.SelectableSingleInteger getSprayWeek(String alias, String displayLabel);
    public dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF getSupervisor();
    public dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF getSupervisor(String alias);
    public dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF getSupervisor(String alias, String displayLabel);
    public com.terraframe.mojo.query.SelectableSingleInteger getTarget();
    public com.terraframe.mojo.query.SelectableSingleInteger getTarget(String alias);
    public com.terraframe.mojo.query.SelectableSingleInteger getTarget(String alias, String displayLabel);

    public com.terraframe.mojo.query.BasicCondition EQ(dss.vector.solutions.irs.ZoneSpray zoneSpray);

    public com.terraframe.mojo.query.BasicCondition NE(dss.vector.solutions.irs.ZoneSpray zoneSpray);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class ZoneSprayQueryReference extends dss.vector.solutions.irs.AbstractSprayQuery.AbstractSprayQueryReference
 implements ZoneSprayQueryReferenceIF
, com.terraframe.mojo.generation.loader.Reloadable
  {
private static final long serialVersionUID = 1546265835;

  public ZoneSprayQueryReference(com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.terraframe.mojo.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.terraframe.mojo.query.BasicCondition EQ(dss.vector.solutions.irs.ZoneSpray zoneSpray)
    {
      return this.EQ(zoneSpray.getId());
    }

    public com.terraframe.mojo.query.BasicCondition NE(dss.vector.solutions.irs.ZoneSpray zoneSpray)
    {
      return this.NE(zoneSpray.getId());
    }

  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex()
  {
    return getBrandForIndex(null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias)
  {
    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.get(dss.vector.solutions.irs.ZoneSpray.BRANDFORINDEX, alias, null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias, String displayLabel)
  {
    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.get(dss.vector.solutions.irs.ZoneSpray.BRANDFORINDEX,  alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex()
  {
    return getGeoEntityForIndex(null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias)
  {
    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.get(dss.vector.solutions.irs.ZoneSpray.GEOENTITYFORINDEX, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias, String displayLabel)
  {
    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.get(dss.vector.solutions.irs.ZoneSpray.GEOENTITYFORINDEX,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableSingleMoment getSprayDateForIndex()
  {
    return getSprayDateForIndex(null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleMoment getSprayDateForIndex(String alias)
  {
    return (com.terraframe.mojo.query.SelectableSingleMoment)this.get(dss.vector.solutions.irs.ZoneSpray.SPRAYDATEFORINDEX, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleMoment getSprayDateForIndex(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableSingleMoment)this.get(dss.vector.solutions.irs.ZoneSpray.SPRAYDATEFORINDEX, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableSingleChar getSprayMethodForIndex()
  {
    return getSprayMethodForIndex(null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleChar getSprayMethodForIndex(String alias)
  {
    return (com.terraframe.mojo.query.SelectableSingleChar)this.get(dss.vector.solutions.irs.ZoneSpray.SPRAYMETHODFORINDEX, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleChar getSprayMethodForIndex(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableSingleChar)this.get(dss.vector.solutions.irs.ZoneSpray.SPRAYMETHODFORINDEX, alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableSingleInteger getSprayWeek()
  {
    return getSprayWeek(null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleInteger getSprayWeek(String alias)
  {
    return (com.terraframe.mojo.query.SelectableSingleInteger)this.get(dss.vector.solutions.irs.ZoneSpray.SPRAYWEEK, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleInteger getSprayWeek(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableSingleInteger)this.get(dss.vector.solutions.irs.ZoneSpray.SPRAYWEEK, alias, displayLabel);

  }
  public dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF getSupervisor()
  {
    return getSupervisor(null);

  }
 
  public dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF getSupervisor(String alias)
  {
    return (dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF)this.get(dss.vector.solutions.irs.ZoneSpray.SUPERVISOR, alias, null);

  }
 
  public dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF getSupervisor(String alias, String displayLabel)
  {
    return (dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReferenceIF)this.get(dss.vector.solutions.irs.ZoneSpray.SUPERVISOR,  alias, displayLabel);

  }
  public com.terraframe.mojo.query.SelectableSingleInteger getTarget()
  {
    return getTarget(null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleInteger getTarget(String alias)
  {
    return (com.terraframe.mojo.query.SelectableSingleInteger)this.get(dss.vector.solutions.irs.ZoneSpray.TARGET, alias, null);

  }
 
  public com.terraframe.mojo.query.SelectableSingleInteger getTarget(String alias, String displayLabel)
  {
    return (com.terraframe.mojo.query.SelectableSingleInteger)this.get(dss.vector.solutions.irs.ZoneSpray.TARGET, alias, displayLabel);

  }
  protected com.terraframe.mojo.query.AttributeReference referenceFactory( com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.terraframe.mojo.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.terraframe.mojo.query.ComponentQuery rootQuery, java.util.Set<com.terraframe.mojo.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("brandForIndex")) 
    {
       return new dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("geoEntityForIndex")) 
    {
       return new dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("supervisor")) 
    {
       return new dss.vector.solutions.irs.SupervisorQuery.SupervisorQueryReference((com.terraframe.mojo.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  }
}
