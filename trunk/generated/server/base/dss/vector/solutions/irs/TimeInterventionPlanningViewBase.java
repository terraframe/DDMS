package dss.vector.solutions.irs;

@com.runwaysdk.business.ClassSignature(hash = -429262258)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TimeInterventionPlanningView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TimeInterventionPlanningViewBase extends dss.vector.solutions.irs.InterventionPlanningView implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.irs.TimeInterventionPlanningView";
  public static java.lang.String OPERATORS = "operators";
  public static java.lang.String REQUIREDDAYS = "requiredDays";
  private static final long serialVersionUID = -429262258;
  
  public TimeInterventionPlanningViewBase()
  {
    super();
  }
  
  public Integer getOperators()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(OPERATORS));
  }
  
  public void validateOperators()
  {
    this.validateAttribute(OPERATORS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOperatorsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.TimeInterventionPlanningView.CLASS);
    return mdClassIF.definesAttribute(OPERATORS);
  }
  
  public void setOperators(Integer value)
  {
    if(value == null)
    {
      setValue(OPERATORS, "");
    }
    else
    {
      setValue(OPERATORS, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getRequiredDays()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(REQUIREDDAYS));
  }
  
  public void validateRequiredDays()
  {
    this.validateAttribute(REQUIREDDAYS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getRequiredDaysMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.TimeInterventionPlanningView.CLASS);
    return mdClassIF.definesAttribute(REQUIREDDAYS);
  }
  
  public void setRequiredDays(Integer value)
  {
    if(value == null)
    {
      setValue(REQUIREDDAYS, "");
    }
    else
    {
      setValue(REQUIREDDAYS, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TimeInterventionPlanningView get(String id)
  {
    return (TimeInterventionPlanningView) com.runwaysdk.business.View.get(id);
  }
  
  public static dss.vector.solutions.irs.TimeInterventionPlanningView[] calculate(dss.vector.solutions.irs.TimeInterventionPlanningView[] views, java.lang.Integer unitsPerDay)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.TimeInterventionPlanningView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.irs.TimeInterventionPlanningView[] calculateDefault(dss.vector.solutions.irs.TimeInterventionPlanningView[] views)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.TimeInterventionPlanningView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.io.InputStream exportToExcel(dss.vector.solutions.irs.TimeInterventionPlanningView[] views)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.TimeInterventionPlanningView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.irs.TimeInterventionPlanningView[] getViews(java.lang.String geoId, dss.vector.solutions.general.MalariaSeason season)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.TimeInterventionPlanningView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
