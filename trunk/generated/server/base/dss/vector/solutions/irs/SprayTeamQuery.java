package dss.vector.solutions.irs;

@com.runwaysdk.business.ClassSignature(hash = -1120726400)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SprayTeam.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class SprayTeamQuery extends dss.vector.solutions.irs.TargeterQuery
 implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = -1120726400;

  public SprayTeamQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public SprayTeamQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.irs.SprayTeam.CLASS;
  }
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease()
  {
    return getDisease(null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.irs.SprayTeam.DISEASE);

    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.SprayTeam.DISEASE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.irs.SprayTeam.DISEASE);

    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.SprayTeam.DISEASE, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF getSprayZone()
  {
    return getSprayZone(null);

  }
 
  public dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF getSprayZone(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.irs.SprayTeam.SPRAYZONE);

    return (dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.SprayTeam.SPRAYZONE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF getSprayZone(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.irs.SprayTeam.SPRAYZONE);

    return (dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.SprayTeam.SPRAYZONE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getTeamId()
  {
    return getTeamId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getTeamId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.irs.SprayTeam.TEAMID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getTeamId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.irs.SprayTeam.TEAMID, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.irs.SprayTeam.DISEASE)) 
    {
       return new dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.irs.SprayTeam.SPRAYZONE)) 
    {
       return new dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends SprayTeam> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<SprayTeam>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition sprayTeamMembers()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition sprayTeamMembers(dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    return this.getBusinessQuery().isParentIn(inTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers(dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(inTeamQuery);
  }

  public com.runwaysdk.query.Condition sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    inTeamQuery.AND(inTeamQuery.hasChild(teamMemberQuery));
    return this.getBusinessQuery().isParentIn(inTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    inTeamQuery.AND(inTeamQuery.hasChild(teamMemberQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(inTeamQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    return this.getBusinessQuery().isNotParentIn(inTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(inTeamQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    inTeamQuery.AND(inTeamQuery.hasChild(teamMemberQuery));
    return this.getBusinessQuery().isNotParentIn(inTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    inTeamQuery.AND(inTeamQuery.hasChild(teamMemberQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(inTeamQuery);
  }


  public com.runwaysdk.query.Condition teamLeader()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_teamLeader()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition teamLeader(dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    return this.getBusinessQuery().isParentIn(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_teamLeader(dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    leadTeamQuery.AND(leadTeamQuery.hasChild(teamMemberQuery));
    return this.getBusinessQuery().isParentIn(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    leadTeamQuery.AND(leadTeamQuery.hasChild(teamMemberQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(leadTeamQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_teamLeader()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_teamLeader(dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    return this.getBusinessQuery().isNotParentIn(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader(dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    leadTeamQuery.AND(leadTeamQuery.hasChild(teamMemberQuery));
    return this.getBusinessQuery().isNotParentIn(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    leadTeamQuery.AND(leadTeamQuery.hasChild(teamMemberQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(leadTeamQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface SprayTeamQueryReferenceIF extends com.runwaysdk.generation.loader.Reloadable, dss.vector.solutions.irs.TargeterQuery.TargeterQueryReferenceIF
  {

    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease();
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias);
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel);
    public dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF getSprayZone();
    public dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF getSprayZone(String alias);
    public dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF getSprayZone(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getTeamId();
    public com.runwaysdk.query.SelectableChar getTeamId(String alias);
    public com.runwaysdk.query.SelectableChar getTeamId(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.irs.SprayTeam sprayTeam);

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.irs.SprayTeam sprayTeam);


  public com.runwaysdk.query.Condition sprayTeamMembers();

  public com.runwaysdk.query.Condition sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery);

  public com.runwaysdk.query.Condition sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery);


  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers();

  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery);

  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery);


  public com.runwaysdk.query.Condition teamLeader();

  public com.runwaysdk.query.Condition teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery);

  public com.runwaysdk.query.Condition teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery);


  public com.runwaysdk.query.Condition SUBSELECT_teamLeader();

  public com.runwaysdk.query.Condition SUBSELECT_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery);

  public com.runwaysdk.query.Condition SUBSELECT_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery);


  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers();

  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery);

  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery);


  public com.runwaysdk.query.Condition NOT_IN_teamLeader();

  public com.runwaysdk.query.Condition NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery);

  public com.runwaysdk.query.Condition NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class SprayTeamQueryReference extends dss.vector.solutions.irs.TargeterQuery.TargeterQueryReference
 implements SprayTeamQueryReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {
private static final long serialVersionUID = -767934818;

  public SprayTeamQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.irs.SprayTeam sprayTeam)
    {
      if(sprayTeam == null) return this.EQ((java.lang.String)null);
      return this.EQ(sprayTeam.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.irs.SprayTeam sprayTeam)
    {
      if(sprayTeam == null) return this.NE((java.lang.String)null);
      return this.NE(sprayTeam.getId());
    }

  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease()
  {
    return getDisease(null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias)
  {
    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.get(dss.vector.solutions.irs.SprayTeam.DISEASE, alias, null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel)
  {
    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.get(dss.vector.solutions.irs.SprayTeam.DISEASE,  alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF getSprayZone()
  {
    return getSprayZone(null);

  }
 
  public dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF getSprayZone(String alias)
  {
    return (dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF)this.get(dss.vector.solutions.irs.SprayTeam.SPRAYZONE, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF getSprayZone(String alias, String displayLabel)
  {
    return (dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReferenceIF)this.get(dss.vector.solutions.irs.SprayTeam.SPRAYZONE,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getTeamId()
  {
    return getTeamId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getTeamId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.irs.SprayTeam.TEAMID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getTeamId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.irs.SprayTeam.TEAMID, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition sprayTeamMembers()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition sprayTeamMembers(dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    return this.isParentIn(inTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers(dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    return this.isParentIn_SUBSELECT(inTeamQuery);
  }

  public com.runwaysdk.query.Condition sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    inTeamQuery.AND(inTeamQuery.hasChild(teamMemberQuery));
    return this.isParentIn(inTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    inTeamQuery.AND(inTeamQuery.hasChild(teamMemberQuery));
    return this.isParentIn_SUBSELECT(inTeamQuery);
  }


  public com.runwaysdk.query.Condition teamLeader()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_teamLeader()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition teamLeader(dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    return this.isParentIn(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_teamLeader(dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    return this.isParentIn_SUBSELECT(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    leadTeamQuery.AND(leadTeamQuery.hasChild(teamMemberQuery));
    return this.isParentIn(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    leadTeamQuery.AND(leadTeamQuery.hasChild(teamMemberQuery));
    return this.isParentIn_SUBSELECT(leadTeamQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    return this.isNotParentIn(inTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    return this.isNotParentIn_SUBSELECT(inTeamQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.InTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    inTeamQuery.AND(inTeamQuery.hasChild(teamMemberQuery));
    return this.isNotParentIn(inTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_sprayTeamMembers(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.InTeamQuery inTeamQuery)
  {
    inTeamQuery.AND(inTeamQuery.hasChild(teamMemberQuery));
    return this.isNotParentIn_SUBSELECT(inTeamQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_teamLeader()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_teamLeader(dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    return this.isNotParentIn(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader(dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    return this.isNotParentIn_SUBSELECT(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.irs.LeadTeam.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(teamMemberQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    leadTeamQuery.AND(leadTeamQuery.hasChild(teamMemberQuery));
    return this.isNotParentIn(leadTeamQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_teamLeader(dss.vector.solutions.irs.TeamMemberQuery teamMemberQuery, dss.vector.solutions.irs.LeadTeamQuery leadTeamQuery)
  {
    leadTeamQuery.AND(leadTeamQuery.hasChild(teamMemberQuery));
    return this.isNotParentIn_SUBSELECT(leadTeamQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.irs.SprayTeam.DISEASE)) 
    {
       return new dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.irs.SprayTeam.SPRAYZONE)) 
    {
       return new dss.vector.solutions.geo.generated.SprayZoneQuery.SprayZoneQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  }
}
