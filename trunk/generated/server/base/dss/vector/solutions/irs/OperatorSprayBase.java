package dss.vector.solutions.irs;

@com.terraframe.mojo.business.ClassSignature(hash = -768969966)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to OperatorSpray.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class OperatorSprayBase extends dss.vector.solutions.irs.AbstractSpray implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.irs.OperatorSpray";
  public static java.lang.String BRANDFORINDEX = "brandForIndex";
  public static java.lang.String GEOENTITYFORINDEX = "geoEntityForIndex";
  public static java.lang.String OPERATORSPRAYWEEK = "operatorSprayWeek";
  public static java.lang.String RECEIVED = "received";
  public static java.lang.String REFILLS = "refills";
  public static java.lang.String RETURNED = "returned";
  public static java.lang.String SPRAYDATEFORINDEX = "sprayDateForIndex";
  public static java.lang.String SPRAYMETHODFORINDEX = "sprayMethodForIndex";
  public static java.lang.String SPRAYOPERATOR = "sprayOperator";
  public static java.lang.String SPRAYTEAM = "sprayTeam";
  public static java.lang.String TARGET = "target";
  public static java.lang.String TEAMLEADER = "teamLeader";
  public static java.lang.String TEAMSPRAYWEEK = "teamSprayWeek";
  public static java.lang.String USED = "used";
  private static final long serialVersionUID = -768969966;
  
  public OperatorSprayBase()
  {
    super();
  }
  
  public dss.vector.solutions.irs.InsecticideBrand getBrandForIndex()
  {
    if (getValue(BRANDFORINDEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.InsecticideBrand.get(getValue(BRANDFORINDEX));
    }
  }
  
  public void validateBrandForIndex()
  {
    this.validateAttribute(BRANDFORINDEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBrandForIndexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(BRANDFORINDEX);
  }
  
  public void setBrandForIndex(dss.vector.solutions.irs.InsecticideBrand value)
  {
    if(value == null)
    {
      setValue(BRANDFORINDEX, "");
    }
    else
    {
      setValue(BRANDFORINDEX, value.getId());
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getGeoEntityForIndex()
  {
    if (getValue(GEOENTITYFORINDEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(GEOENTITYFORINDEX));
    }
  }
  
  public void validateGeoEntityForIndex()
  {
    this.validateAttribute(GEOENTITYFORINDEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGeoEntityForIndexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(GEOENTITYFORINDEX);
  }
  
  public void setGeoEntityForIndex(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(GEOENTITYFORINDEX, "");
    }
    else
    {
      setValue(GEOENTITYFORINDEX, value.getId());
    }
  }
  
  public Integer getOperatorSprayWeek()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(OPERATORSPRAYWEEK));
  }
  
  public void validateOperatorSprayWeek()
  {
    this.validateAttribute(OPERATORSPRAYWEEK);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getOperatorSprayWeekMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(OPERATORSPRAYWEEK);
  }
  
  public void setOperatorSprayWeek(Integer value)
  {
    if(value == null)
    {
      setValue(OPERATORSPRAYWEEK, "");
    }
    else
    {
      setValue(OPERATORSPRAYWEEK, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getReceived()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(RECEIVED));
  }
  
  public void validateReceived()
  {
    this.validateAttribute(RECEIVED);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getReceivedMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(RECEIVED);
  }
  
  public void setReceived(Integer value)
  {
    if(value == null)
    {
      setValue(RECEIVED, "");
    }
    else
    {
      setValue(RECEIVED, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getRefills()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(REFILLS));
  }
  
  public void validateRefills()
  {
    this.validateAttribute(REFILLS);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getRefillsMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(REFILLS);
  }
  
  public void setRefills(Integer value)
  {
    if(value == null)
    {
      setValue(REFILLS, "");
    }
    else
    {
      setValue(REFILLS, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getReturned()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(RETURNED));
  }
  
  public void validateReturned()
  {
    this.validateAttribute(RETURNED);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getReturnedMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(RETURNED);
  }
  
  public void setReturned(Integer value)
  {
    if(value == null)
    {
      setValue(RETURNED, "");
    }
    else
    {
      setValue(RETURNED, java.lang.Integer.toString(value));
    }
  }
  
  public java.util.Date getSprayDateForIndex()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(SPRAYDATEFORINDEX));
  }
  
  public void validateSprayDateForIndex()
  {
    this.validateAttribute(SPRAYDATEFORINDEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayDateForIndexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(SPRAYDATEFORINDEX);
  }
  
  public void setSprayDateForIndex(java.util.Date value)
  {
    if(value == null)
    {
      setValue(SPRAYDATEFORINDEX, "");
    }
    else
    {
      setValue(SPRAYDATEFORINDEX, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getSprayMethodForIndex()
  {
    return getValue(SPRAYMETHODFORINDEX);
  }
  
  public void validateSprayMethodForIndex()
  {
    this.validateAttribute(SPRAYMETHODFORINDEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayMethodForIndexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(SPRAYMETHODFORINDEX);
  }
  
  public void setSprayMethodForIndex(String value)
  {
    if(value == null)
    {
      setValue(SPRAYMETHODFORINDEX, "");
    }
    else
    {
      setValue(SPRAYMETHODFORINDEX, value);
    }
  }
  
  public dss.vector.solutions.irs.TeamMember getSprayOperator()
  {
    if (getValue(SPRAYOPERATOR).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.TeamMember.get(getValue(SPRAYOPERATOR));
    }
  }
  
  public void validateSprayOperator()
  {
    this.validateAttribute(SPRAYOPERATOR);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayOperatorMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(SPRAYOPERATOR);
  }
  
  public void setSprayOperator(dss.vector.solutions.irs.TeamMember value)
  {
    if(value == null)
    {
      setValue(SPRAYOPERATOR, "");
    }
    else
    {
      setValue(SPRAYOPERATOR, value.getId());
    }
  }
  
  public dss.vector.solutions.irs.SprayTeam getSprayTeam()
  {
    if (getValue(SPRAYTEAM).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.SprayTeam.get(getValue(SPRAYTEAM));
    }
  }
  
  public void validateSprayTeam()
  {
    this.validateAttribute(SPRAYTEAM);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayTeamMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(SPRAYTEAM);
  }
  
  public void setSprayTeam(dss.vector.solutions.irs.SprayTeam value)
  {
    if(value == null)
    {
      setValue(SPRAYTEAM, "");
    }
    else
    {
      setValue(SPRAYTEAM, value.getId());
    }
  }
  
  public Integer getTarget()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(TARGET));
  }
  
  public void validateTarget()
  {
    this.validateAttribute(TARGET);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getTargetMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(TARGET);
  }
  
  public void setTarget(Integer value)
  {
    if(value == null)
    {
      setValue(TARGET, "");
    }
    else
    {
      setValue(TARGET, java.lang.Integer.toString(value));
    }
  }
  
  public dss.vector.solutions.irs.TeamMember getTeamLeader()
  {
    if (getValue(TEAMLEADER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.TeamMember.get(getValue(TEAMLEADER));
    }
  }
  
  public void validateTeamLeader()
  {
    this.validateAttribute(TEAMLEADER);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getTeamLeaderMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(TEAMLEADER);
  }
  
  public void setTeamLeader(dss.vector.solutions.irs.TeamMember value)
  {
    if(value == null)
    {
      setValue(TEAMLEADER, "");
    }
    else
    {
      setValue(TEAMLEADER, value.getId());
    }
  }
  
  public Integer getTeamSprayWeek()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(TEAMSPRAYWEEK));
  }
  
  public void validateTeamSprayWeek()
  {
    this.validateAttribute(TEAMSPRAYWEEK);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getTeamSprayWeekMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(TEAMSPRAYWEEK);
  }
  
  public void setTeamSprayWeek(Integer value)
  {
    if(value == null)
    {
      setValue(TEAMSPRAYWEEK, "");
    }
    else
    {
      setValue(TEAMSPRAYWEEK, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getUsed()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(USED));
  }
  
  public void validateUsed()
  {
    this.validateAttribute(USED);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getUsedMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.OperatorSpray.CLASS);
    return mdClassIF.definesAttribute(USED);
  }
  
  public void setUsed(Integer value)
  {
    if(value == null)
    {
      setValue(USED, "");
    }
    else
    {
      setValue(USED, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static OperatorSprayQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    OperatorSprayQuery query = new OperatorSprayQuery(new com.terraframe.mojo.query.QueryFactory());
    com.terraframe.mojo.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static OperatorSpray get(String id)
  {
    return (OperatorSpray) com.terraframe.mojo.business.Business.get(id);
  }
  
  public static OperatorSpray getByKey(String key)
  {
    return (OperatorSpray) com.terraframe.mojo.business.Business.get(CLASS, key);
  }
  
  public dss.vector.solutions.irs.HouseholdSprayStatusView[] getStatusViews()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.OperatorSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.HouseholdSprayStatusView[] getStatusViews(java.lang.String id)
  {
    OperatorSpray _instance = OperatorSpray.get(id);
    return _instance.getStatusViews();
  }
  
  public dss.vector.solutions.irs.OperatorSprayView getView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.OperatorSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.OperatorSprayView getView(java.lang.String id)
  {
    OperatorSpray _instance = OperatorSpray.get(id);
    return _instance.getView();
  }
  
  public dss.vector.solutions.irs.OperatorSprayView lockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.OperatorSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.OperatorSprayView lockView(java.lang.String id)
  {
    OperatorSpray _instance = OperatorSpray.get(id);
    return _instance.lockView();
  }
  
  public dss.vector.solutions.irs.OperatorSprayView unlockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.OperatorSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.OperatorSprayView unlockView(java.lang.String id)
  {
    OperatorSpray _instance = OperatorSpray.get(id);
    return _instance.unlockView();
  }
  
  public static OperatorSpray lock(java.lang.String id)
  {
    OperatorSpray _instance = OperatorSpray.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static OperatorSpray unlock(java.lang.String id)
  {
    OperatorSpray _instance = OperatorSpray.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
