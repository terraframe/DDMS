package dss.vector.solutions.irs;

@com.terraframe.mojo.business.ClassSignature(hash = 1739610272)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ZoneSpray.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class ZoneSprayBase extends dss.vector.solutions.irs.AbstractSpray implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.irs.ZoneSpray";
  public static java.lang.String BRANDFORINDEX = "brandForIndex";
  public static java.lang.String GEOENTITYFORINDEX = "geoEntityForIndex";
  public static java.lang.String SPRAYDATEFORINDEX = "sprayDateForIndex";
  public static java.lang.String SPRAYMETHODFORINDEX = "sprayMethodForIndex";
  public static java.lang.String SPRAYWEEK = "sprayWeek";
  public static java.lang.String SUPERVISOR = "supervisor";
  public static java.lang.String TARGET = "target";
  private static final long serialVersionUID = 1739610272;
  
  public ZoneSprayBase()
  {
    super();
  }
  
  public dss.vector.solutions.irs.InsecticideBrand getBrandForIndex()
  {
    if (getValue(BRANDFORINDEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.InsecticideBrand.get(getValue(BRANDFORINDEX));
    }
  }
  
  public void validateBrandForIndex()
  {
    this.validateAttribute(BRANDFORINDEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBrandForIndexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return mdClassIF.definesAttribute(BRANDFORINDEX);
  }
  
  public void setBrandForIndex(dss.vector.solutions.irs.InsecticideBrand value)
  {
    if(value == null)
    {
      setValue(BRANDFORINDEX, "");
    }
    else
    {
      setValue(BRANDFORINDEX, value.getId());
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getGeoEntityForIndex()
  {
    if (getValue(GEOENTITYFORINDEX).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(GEOENTITYFORINDEX));
    }
  }
  
  public void validateGeoEntityForIndex()
  {
    this.validateAttribute(GEOENTITYFORINDEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGeoEntityForIndexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return mdClassIF.definesAttribute(GEOENTITYFORINDEX);
  }
  
  public void setGeoEntityForIndex(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(GEOENTITYFORINDEX, "");
    }
    else
    {
      setValue(GEOENTITYFORINDEX, value.getId());
    }
  }
  
  public java.util.Date getSprayDateForIndex()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(SPRAYDATEFORINDEX));
  }
  
  public void validateSprayDateForIndex()
  {
    this.validateAttribute(SPRAYDATEFORINDEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayDateForIndexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return mdClassIF.definesAttribute(SPRAYDATEFORINDEX);
  }
  
  public void setSprayDateForIndex(java.util.Date value)
  {
    if(value == null)
    {
      setValue(SPRAYDATEFORINDEX, "");
    }
    else
    {
      setValue(SPRAYDATEFORINDEX, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getSprayMethodForIndex()
  {
    return getValue(SPRAYMETHODFORINDEX);
  }
  
  public void validateSprayMethodForIndex()
  {
    this.validateAttribute(SPRAYMETHODFORINDEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayMethodForIndexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return mdClassIF.definesAttribute(SPRAYMETHODFORINDEX);
  }
  
  public void setSprayMethodForIndex(String value)
  {
    if(value == null)
    {
      setValue(SPRAYMETHODFORINDEX, "");
    }
    else
    {
      setValue(SPRAYMETHODFORINDEX, value);
    }
  }
  
  public Integer getSprayWeek()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(SPRAYWEEK));
  }
  
  public void validateSprayWeek()
  {
    this.validateAttribute(SPRAYWEEK);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayWeekMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return mdClassIF.definesAttribute(SPRAYWEEK);
  }
  
  public void setSprayWeek(Integer value)
  {
    if(value == null)
    {
      setValue(SPRAYWEEK, "");
    }
    else
    {
      setValue(SPRAYWEEK, java.lang.Integer.toString(value));
    }
  }
  
  public dss.vector.solutions.irs.Supervisor getSupervisor()
  {
    if (getValue(SUPERVISOR).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.Supervisor.get(getValue(SUPERVISOR));
    }
  }
  
  public void validateSupervisor()
  {
    this.validateAttribute(SUPERVISOR);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSupervisorMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return mdClassIF.definesAttribute(SUPERVISOR);
  }
  
  public void setSupervisor(dss.vector.solutions.irs.Supervisor value)
  {
    if(value == null)
    {
      setValue(SUPERVISOR, "");
    }
    else
    {
      setValue(SUPERVISOR, value.getId());
    }
  }
  
  public Integer getTarget()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(TARGET));
  }
  
  public void validateTarget()
  {
    this.validateAttribute(TARGET);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getTargetMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.ZoneSpray.CLASS);
    return mdClassIF.definesAttribute(TARGET);
  }
  
  public void setTarget(Integer value)
  {
    if(value == null)
    {
      setValue(TARGET, "");
    }
    else
    {
      setValue(TARGET, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ZoneSprayQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ZoneSprayQuery query = new ZoneSprayQuery(new com.terraframe.mojo.query.QueryFactory());
    com.terraframe.mojo.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static ZoneSpray get(String id)
  {
    return (ZoneSpray) com.terraframe.mojo.business.Business.get(id);
  }
  
  public static ZoneSpray getByKey(String key)
  {
    return (ZoneSpray) com.terraframe.mojo.business.Business.get(CLASS, key);
  }
  
  public static java.io.InputStream exportQueryToCSV(java.lang.String queryXML, java.lang.String config, java.lang.String savedSearchId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.io.InputStream exportQueryToExcel(java.lang.String queryXML, java.lang.String config, java.lang.String savedSearchId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.irs.TeamSprayStatusView[] getStatusViews()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.TeamSprayStatusView[] getStatusViews(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    return _instance.getStatusViews();
  }
  
  public dss.vector.solutions.irs.ZoneSprayView getView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.ZoneSprayView getView(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    return _instance.getView();
  }
  
  public dss.vector.solutions.irs.ZoneSprayView lockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.ZoneSprayView lockView(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    return _instance.lockView();
  }
  
  public static com.terraframe.mojo.query.ValueQuery queryIRS(java.lang.String queryXML, java.lang.String config, java.lang.String sortBy, java.lang.Boolean ascending, java.lang.Integer pageNumber, java.lang.Integer pageSize)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.irs.ZoneSprayView unlockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.ZoneSprayView unlockView(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    return _instance.unlockView();
  }
  
  public static com.terraframe.mojo.query.ValueQuery xmlToValueQuery(java.lang.String xml, java.lang.String[] selectedUniversals, java.lang.Boolean includeGeometry)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.ZoneSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static ZoneSpray lock(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static ZoneSpray unlock(java.lang.String id)
  {
    ZoneSpray _instance = ZoneSpray.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
