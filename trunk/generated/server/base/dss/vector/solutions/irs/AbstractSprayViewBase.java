package dss.vector.solutions.irs;

@com.terraframe.mojo.business.ClassSignature(hash = 1203066552)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AbstractSprayView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class AbstractSprayViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.irs.AbstractSprayView";
  public static java.lang.String BRAND = "brand";
  public static java.lang.String GEOENTITY = "geoEntity";
  public static java.lang.String ID = "id";
  public static java.lang.String SPRAYDATA = "sprayData";
  public static java.lang.String SPRAYDATE = "sprayDate";
  public static java.lang.String SPRAYID = "sprayId";
  public static java.lang.String SPRAYMETHOD = "sprayMethod";
  public static java.lang.String SURFACETYPE = "surfaceType";
  private static final long serialVersionUID = 1203066552;
  
  public AbstractSprayViewBase()
  {
    super();
  }
  
  public dss.vector.solutions.irs.InsecticideBrand getBrand()
  {
    if (getValue(BRAND).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.InsecticideBrand.get(getValue(BRAND));
    }
  }
  
  public void validateBrand()
  {
    this.validateAttribute(BRAND);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBrandMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.AbstractSprayView.CLASS);
    return mdClassIF.definesAttribute(BRAND);
  }
  
  public void setBrand(dss.vector.solutions.irs.InsecticideBrand value)
  {
    if(value == null)
    {
      setValue(BRAND, "");
    }
    else
    {
      setValue(BRAND, value.getId());
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getGeoEntity()
  {
    if (getValue(GEOENTITY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(GEOENTITY));
    }
  }
  
  public void validateGeoEntity()
  {
    this.validateAttribute(GEOENTITY);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGeoEntityMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.AbstractSprayView.CLASS);
    return mdClassIF.definesAttribute(GEOENTITY);
  }
  
  public void setGeoEntity(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(GEOENTITY, "");
    }
    else
    {
      setValue(GEOENTITY, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.AbstractSprayView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.irs.SprayData getSprayData()
  {
    if (getValue(SPRAYDATA).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.SprayData.get(getValue(SPRAYDATA));
    }
  }
  
  public void validateSprayData()
  {
    this.validateAttribute(SPRAYDATA);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayDataMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.AbstractSprayView.CLASS);
    return mdClassIF.definesAttribute(SPRAYDATA);
  }
  
  public void setSprayData(dss.vector.solutions.irs.SprayData value)
  {
    if(value == null)
    {
      setValue(SPRAYDATA, "");
    }
    else
    {
      setValue(SPRAYDATA, value.getId());
    }
  }
  
  public java.util.Date getSprayDate()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(SPRAYDATE));
  }
  
  public void validateSprayDate()
  {
    this.validateAttribute(SPRAYDATE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayDateMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.AbstractSprayView.CLASS);
    return mdClassIF.definesAttribute(SPRAYDATE);
  }
  
  public void setSprayDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(SPRAYDATE, "");
    }
    else
    {
      setValue(SPRAYDATE, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public String getSprayId()
  {
    return getValue(SPRAYID);
  }
  
  public void validateSprayId()
  {
    this.validateAttribute(SPRAYID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.AbstractSprayView.CLASS);
    return mdClassIF.definesAttribute(SPRAYID);
  }
  
  public void setSprayId(String value)
  {
    if(value == null)
    {
      setValue(SPRAYID, "");
    }
    else
    {
      setValue(SPRAYID, value);
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.irs.SprayMethod> getSprayMethod()
  {
    return (java.util.List<dss.vector.solutions.irs.SprayMethod>) getEnumValues(SPRAYMETHOD);
  }
  
  public void addSprayMethod(dss.vector.solutions.irs.SprayMethod value)
  {
    if(value != null)
    {
      addEnumItem(SPRAYMETHOD, value.getId());
    }
  }
  
  public void removeSprayMethod(dss.vector.solutions.irs.SprayMethod value)
  {
    if(value != null)
    {
      removeEnumItem(SPRAYMETHOD, value.getId());
    }
  }
  
  public void clearSprayMethod()
  {
    clearEnum(SPRAYMETHOD);
  }
  
  public void validateSprayMethod()
  {
    this.validateAttribute(SPRAYMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.AbstractSprayView.CLASS);
    return mdClassIF.definesAttribute(SPRAYMETHOD);
  }
  
  public dss.vector.solutions.ontology.Term getSurfaceType()
  {
    if (getValue(SURFACETYPE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(SURFACETYPE));
    }
  }
  
  public void validateSurfaceType()
  {
    this.validateAttribute(SURFACETYPE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSurfaceTypeMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.AbstractSprayView.CLASS);
    return mdClassIF.definesAttribute(SURFACETYPE);
  }
  
  public void setSurfaceType(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(SURFACETYPE, "");
    }
    else
    {
      setValue(SURFACETYPE, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static AbstractSprayView get(String id)
  {
    return (AbstractSprayView) com.terraframe.mojo.business.View.get(id);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
