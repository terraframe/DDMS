package dss.vector.solutions.irs;

@com.terraframe.mojo.business.ClassSignature(hash = -502836881)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to InsecticideNozzleView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class InsecticideNozzleViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.irs.InsecticideNozzleView";
  public static java.lang.String BRAND = "brand";
  public static java.lang.String BRANDLABEL = "brandLabel";
  public static java.lang.String CONFIGURATIONDATE = "configurationDate";
  public static java.lang.String ENABLED = "enabled";
  public static java.lang.String ID = "id";
  public static java.lang.String INSECTICIDENOZZLEID = "insecticideNozzleId";
  public static java.lang.String NOZZLE = "nozzle";
  public static java.lang.String NOZZLELABEL = "nozzleLabel";
  private static final long serialVersionUID = -502836881;
  
  public InsecticideNozzleViewBase()
  {
    super();
  }
  
  public dss.vector.solutions.irs.InsecticideBrand getBrand()
  {
    if (getValue(BRAND).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.InsecticideBrand.get(getValue(BRAND));
    }
  }
  
  public void validateBrand()
  {
    this.validateAttribute(BRAND);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBrandMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideNozzleView.CLASS);
    return mdClassIF.definesAttribute(BRAND);
  }
  
  public void setBrand(dss.vector.solutions.irs.InsecticideBrand value)
  {
    if(value == null)
    {
      setValue(BRAND, "");
    }
    else
    {
      setValue(BRAND, value.getId());
    }
  }
  
  public String getBrandLabel()
  {
    return getValue(BRANDLABEL);
  }
  
  public void validateBrandLabel()
  {
    this.validateAttribute(BRANDLABEL);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBrandLabelMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideNozzleView.CLASS);
    return mdClassIF.definesAttribute(BRANDLABEL);
  }
  
  public void setBrandLabel(String value)
  {
    if(value == null)
    {
      setValue(BRANDLABEL, "");
    }
    else
    {
      setValue(BRANDLABEL, value);
    }
  }
  
  public java.util.Date getConfigurationDate()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(CONFIGURATIONDATE));
  }
  
  public void validateConfigurationDate()
  {
    this.validateAttribute(CONFIGURATIONDATE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getConfigurationDateMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideNozzleView.CLASS);
    return mdClassIF.definesAttribute(CONFIGURATIONDATE);
  }
  
  public void setConfigurationDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(CONFIGURATIONDATE, "");
    }
    else
    {
      setValue(CONFIGURATIONDATE, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public Boolean getEnabled()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ENABLED));
  }
  
  public void validateEnabled()
  {
    this.validateAttribute(ENABLED);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getEnabledMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideNozzleView.CLASS);
    return mdClassIF.definesAttribute(ENABLED);
  }
  
  public void setEnabled(Boolean value)
  {
    if(value == null)
    {
      setValue(ENABLED, "");
    }
    else
    {
      setValue(ENABLED, java.lang.Boolean.toString(value));
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideNozzleView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getInsecticideNozzleId()
  {
    return getValue(INSECTICIDENOZZLEID);
  }
  
  public void validateInsecticideNozzleId()
  {
    this.validateAttribute(INSECTICIDENOZZLEID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getInsecticideNozzleIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideNozzleView.CLASS);
    return mdClassIF.definesAttribute(INSECTICIDENOZZLEID);
  }
  
  public void setInsecticideNozzleId(String value)
  {
    if(value == null)
    {
      setValue(INSECTICIDENOZZLEID, "");
    }
    else
    {
      setValue(INSECTICIDENOZZLEID, value);
    }
  }
  
  public dss.vector.solutions.irs.Nozzle getNozzle()
  {
    if (getValue(NOZZLE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.Nozzle.get(getValue(NOZZLE));
    }
  }
  
  public void validateNozzle()
  {
    this.validateAttribute(NOZZLE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getNozzleMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideNozzleView.CLASS);
    return mdClassIF.definesAttribute(NOZZLE);
  }
  
  public void setNozzle(dss.vector.solutions.irs.Nozzle value)
  {
    if(value == null)
    {
      setValue(NOZZLE, "");
    }
    else
    {
      setValue(NOZZLE, value.getId());
    }
  }
  
  public String getNozzleLabel()
  {
    return getValue(NOZZLELABEL);
  }
  
  public void validateNozzleLabel()
  {
    this.validateAttribute(NOZZLELABEL);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getNozzleLabelMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideNozzleView.CLASS);
    return mdClassIF.definesAttribute(NOZZLELABEL);
  }
  
  public void setNozzleLabel(String value)
  {
    if(value == null)
    {
      setValue(NOZZLELABEL, "");
    }
    else
    {
      setValue(NOZZLELABEL, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static InsecticideNozzleView get(String id)
  {
    return (InsecticideNozzleView) com.terraframe.mojo.business.View.get(id);
  }
  
  public static dss.vector.solutions.irs.InsecticideNozzleView[] applyAll(dss.vector.solutions.irs.InsecticideNozzleView[] insecticideNozzles)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideNozzleView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideNozzleView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    InsecticideNozzleView _instance = InsecticideNozzleView.get(id);
    _instance.deleteConcrete();
  }
  
  public static dss.vector.solutions.irs.InsecticideNozzleView[] getAll()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideNozzleView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.irs.InsecticideNozzleView[] getAllActive()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideNozzleView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
