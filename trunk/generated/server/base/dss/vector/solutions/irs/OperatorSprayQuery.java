package dss.vector.solutions.irs;

@com.runwaysdk.business.ClassSignature(hash = -1133810701)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to OperatorSpray.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class OperatorSprayQuery extends dss.vector.solutions.irs.AbstractSprayQuery
 implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = -1133810701;

  public OperatorSprayQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public OperatorSprayQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
    super(valueQuery);
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.irs.OperatorSpray.CLASS;
  }
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex()
  {
    return getBrandForIndex(null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("brandForIndex");

    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.BRANDFORINDEX, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("brandForIndex");

    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.BRANDFORINDEX, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex()
  {
    return getGeoEntityForIndex(null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("geoEntityForIndex");

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.GEOENTITYFORINDEX, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("geoEntityForIndex");

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.GEOENTITYFORINDEX, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getOperatorSprayWeek()
  {
    return getOperatorSprayWeek(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getOperatorSprayWeek(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.OPERATORSPRAYWEEK, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getOperatorSprayWeek(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.OPERATORSPRAYWEEK, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getReceived()
  {
    return getReceived(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceived(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.RECEIVED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceived(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.RECEIVED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getRefills()
  {
    return getRefills(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getRefills(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.REFILLS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getRefills(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.REFILLS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getReturned()
  {
    return getReturned(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReturned(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.RETURNED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReturned(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.RETURNED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getSprayDateForIndex()
  {
    return getSprayDateForIndex(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getSprayDateForIndex(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.SPRAYDATEFORINDEX, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getSprayDateForIndex(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.SPRAYDATEFORINDEX, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSprayMethodForIndex()
  {
    return getSprayMethodForIndex(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSprayMethodForIndex(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.SPRAYMETHODFORINDEX, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSprayMethodForIndex(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.SPRAYMETHODFORINDEX, alias, displayLabel);

  }
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getSprayOperator()
  {
    return getSprayOperator(null);

  }
 
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getSprayOperator(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sprayOperator");

    return (dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.SPRAYOPERATOR, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getSprayOperator(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sprayOperator");

    return (dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.SPRAYOPERATOR, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF getSprayTeam()
  {
    return getSprayTeam(null);

  }
 
  public dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF getSprayTeam(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sprayTeam");

    return (dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.SPRAYTEAM, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF getSprayTeam(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("sprayTeam");

    return (dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.SPRAYTEAM, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getTarget()
  {
    return getTarget(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTarget(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.TARGET, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTarget(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.TARGET, alias, displayLabel);

  }
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getTeamLeader()
  {
    return getTeamLeader(null);

  }
 
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getTeamLeader(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("teamLeader");

    return (dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.TEAMLEADER, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getTeamLeader(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("teamLeader");

    return (dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.irs.OperatorSpray.TEAMLEADER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getTeamSprayWeek()
  {
    return getTeamSprayWeek(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTeamSprayWeek(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.TEAMSPRAYWEEK, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTeamSprayWeek(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.TEAMSPRAYWEEK, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getUsed()
  {
    return getUsed(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getUsed(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.USED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getUsed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.irs.OperatorSpray.USED, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("brandForIndex")) 
    {
       return new dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("geoEntityForIndex")) 
    {
       return new dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sprayOperator")) 
    {
       return new dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sprayTeam")) 
    {
       return new dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("teamLeader")) 
    {
       return new dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends OperatorSpray> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<OperatorSpray>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface OperatorSprayQueryReferenceIF extends com.runwaysdk.generation.loader.Reloadable, dss.vector.solutions.irs.AbstractSprayQuery.AbstractSprayQueryReferenceIF
  {

    public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex();
    public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias);
    public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias, String displayLabel);
    public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex();
    public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias);
    public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getOperatorSprayWeek();
    public com.runwaysdk.query.SelectableInteger getOperatorSprayWeek(String alias);
    public com.runwaysdk.query.SelectableInteger getOperatorSprayWeek(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getReceived();
    public com.runwaysdk.query.SelectableInteger getReceived(String alias);
    public com.runwaysdk.query.SelectableInteger getReceived(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getRefills();
    public com.runwaysdk.query.SelectableInteger getRefills(String alias);
    public com.runwaysdk.query.SelectableInteger getRefills(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getReturned();
    public com.runwaysdk.query.SelectableInteger getReturned(String alias);
    public com.runwaysdk.query.SelectableInteger getReturned(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getSprayDateForIndex();
    public com.runwaysdk.query.SelectableMoment getSprayDateForIndex(String alias);
    public com.runwaysdk.query.SelectableMoment getSprayDateForIndex(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSprayMethodForIndex();
    public com.runwaysdk.query.SelectableChar getSprayMethodForIndex(String alias);
    public com.runwaysdk.query.SelectableChar getSprayMethodForIndex(String alias, String displayLabel);
    public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getSprayOperator();
    public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getSprayOperator(String alias);
    public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getSprayOperator(String alias, String displayLabel);
    public dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF getSprayTeam();
    public dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF getSprayTeam(String alias);
    public dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF getSprayTeam(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getTarget();
    public com.runwaysdk.query.SelectableInteger getTarget(String alias);
    public com.runwaysdk.query.SelectableInteger getTarget(String alias, String displayLabel);
    public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getTeamLeader();
    public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getTeamLeader(String alias);
    public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getTeamLeader(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getTeamSprayWeek();
    public com.runwaysdk.query.SelectableInteger getTeamSprayWeek(String alias);
    public com.runwaysdk.query.SelectableInteger getTeamSprayWeek(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getUsed();
    public com.runwaysdk.query.SelectableInteger getUsed(String alias);
    public com.runwaysdk.query.SelectableInteger getUsed(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.irs.OperatorSpray operatorSpray);

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.irs.OperatorSpray operatorSpray);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class OperatorSprayQueryReference extends dss.vector.solutions.irs.AbstractSprayQuery.AbstractSprayQueryReference
 implements OperatorSprayQueryReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {
private static final long serialVersionUID = -757539435;

  public OperatorSprayQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.irs.OperatorSpray operatorSpray)
    {
      return this.EQ(operatorSpray.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.irs.OperatorSpray operatorSpray)
    {
      return this.NE(operatorSpray.getId());
    }

  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex()
  {
    return getBrandForIndex(null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias)
  {
    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.BRANDFORINDEX, alias, null);

  }
 
  public dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF getBrandForIndex(String alias, String displayLabel)
  {
    return (dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.BRANDFORINDEX,  alias, displayLabel);

  }
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex()
  {
    return getGeoEntityForIndex(null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias)
  {
    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.GEOENTITYFORINDEX, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntityForIndex(String alias, String displayLabel)
  {
    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.GEOENTITYFORINDEX,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getOperatorSprayWeek()
  {
    return getOperatorSprayWeek(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getOperatorSprayWeek(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.OPERATORSPRAYWEEK, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getOperatorSprayWeek(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.OPERATORSPRAYWEEK, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getReceived()
  {
    return getReceived(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceived(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.RECEIVED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReceived(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.RECEIVED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getRefills()
  {
    return getRefills(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getRefills(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.REFILLS, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getRefills(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.REFILLS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getReturned()
  {
    return getReturned(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReturned(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.RETURNED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getReturned(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.RETURNED, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getSprayDateForIndex()
  {
    return getSprayDateForIndex(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getSprayDateForIndex(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.irs.OperatorSpray.SPRAYDATEFORINDEX, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getSprayDateForIndex(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.irs.OperatorSpray.SPRAYDATEFORINDEX, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSprayMethodForIndex()
  {
    return getSprayMethodForIndex(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSprayMethodForIndex(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.irs.OperatorSpray.SPRAYMETHODFORINDEX, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSprayMethodForIndex(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.irs.OperatorSpray.SPRAYMETHODFORINDEX, alias, displayLabel);

  }
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getSprayOperator()
  {
    return getSprayOperator(null);

  }
 
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getSprayOperator(String alias)
  {
    return (dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.SPRAYOPERATOR, alias, null);

  }
 
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getSprayOperator(String alias, String displayLabel)
  {
    return (dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.SPRAYOPERATOR,  alias, displayLabel);

  }
  public dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF getSprayTeam()
  {
    return getSprayTeam(null);

  }
 
  public dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF getSprayTeam(String alias)
  {
    return (dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.SPRAYTEAM, alias, null);

  }
 
  public dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF getSprayTeam(String alias, String displayLabel)
  {
    return (dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.SPRAYTEAM,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getTarget()
  {
    return getTarget(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTarget(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.TARGET, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTarget(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.TARGET, alias, displayLabel);

  }
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getTeamLeader()
  {
    return getTeamLeader(null);

  }
 
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getTeamLeader(String alias)
  {
    return (dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.TEAMLEADER, alias, null);

  }
 
  public dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF getTeamLeader(String alias, String displayLabel)
  {
    return (dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReferenceIF)this.get(dss.vector.solutions.irs.OperatorSpray.TEAMLEADER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getTeamSprayWeek()
  {
    return getTeamSprayWeek(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTeamSprayWeek(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.TEAMSPRAYWEEK, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTeamSprayWeek(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.TEAMSPRAYWEEK, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getUsed()
  {
    return getUsed(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getUsed(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.USED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getUsed(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.irs.OperatorSpray.USED, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("brandForIndex")) 
    {
       return new dss.vector.solutions.irs.InsecticideBrandQuery.InsecticideBrandQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("geoEntityForIndex")) 
    {
       return new dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sprayOperator")) 
    {
       return new dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("sprayTeam")) 
    {
       return new dss.vector.solutions.irs.SprayTeamQuery.SprayTeamQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("teamLeader")) 
    {
       return new dss.vector.solutions.irs.TeamMemberQuery.TeamMemberQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      return super.referenceFactory(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
  }

  }
}
