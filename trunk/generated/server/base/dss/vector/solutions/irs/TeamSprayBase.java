package dss.vector.solutions.irs;

@com.terraframe.mojo.business.ClassSignature(hash = -193360382)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TeamSpray.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class TeamSprayBase extends dss.vector.solutions.irs.ActorSpray implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.irs.TeamSpray";
  public static java.lang.String SPRAYTEAM = "sprayTeam";
  private static final long serialVersionUID = -193360382;
  
  public TeamSprayBase()
  {
    super();
  }
  
  public dss.vector.solutions.irs.SprayTeam getSprayTeam()
  {
    if (getValue(SPRAYTEAM).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.SprayTeam.get(getValue(SPRAYTEAM));
    }
  }
  
  public void validateSprayTeam()
  {
    this.validateAttribute(SPRAYTEAM);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSprayTeamMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.TeamSpray.CLASS);
    return mdClassIF.definesAttribute(SPRAYTEAM);
  }
  
  public void setSprayTeam(dss.vector.solutions.irs.SprayTeam value)
  {
    if(value == null)
    {
      setValue(SPRAYTEAM, "");
    }
    else
    {
      setValue(SPRAYTEAM, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TeamSprayQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    TeamSprayQuery query = new TeamSprayQuery(new com.terraframe.mojo.query.QueryFactory());
    com.terraframe.mojo.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static TeamSpray get(String id)
  {
    return (TeamSpray) com.terraframe.mojo.business.Business.get(id);
  }
  
  public static TeamSpray getByKey(String key)
  {
    return (TeamSpray) com.terraframe.mojo.business.Business.get(CLASS, key);
  }
  
  public static dss.vector.solutions.irs.TeamSprayView getView(java.lang.String id)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.TeamSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.irs.TeamSprayView lockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.TeamSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.TeamSprayView lockView(java.lang.String id)
  {
    TeamSpray _instance = TeamSpray.get(id);
    return _instance.lockView();
  }
  
  public dss.vector.solutions.irs.TeamSprayView unlockView()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.TeamSpray.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.irs.TeamSprayView unlockView(java.lang.String id)
  {
    TeamSpray _instance = TeamSpray.get(id);
    return _instance.unlockView();
  }
  
  public static TeamSpray lock(java.lang.String id)
  {
    TeamSpray _instance = TeamSpray.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static TeamSpray unlock(java.lang.String id)
  {
    TeamSpray _instance = TeamSpray.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
