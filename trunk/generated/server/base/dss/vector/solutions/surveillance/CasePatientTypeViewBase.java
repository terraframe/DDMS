package dss.vector.solutions.surveillance;

@com.runwaysdk.business.ClassSignature(hash = 1008135769)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to CasePatientTypeView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class CasePatientTypeViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.surveillance.CasePatientTypeView";
  public static java.lang.String AGGREGATEDCASE = "aggregatedCase";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String ID = "id";
  public static java.lang.String PATIENTCATEGORY = "patientCategory";
  public static java.lang.String TERM = "term";
  private static final long serialVersionUID = 1008135769;
  
  public CasePatientTypeViewBase()
  {
    super();
  }
  
  public dss.vector.solutions.surveillance.AggregatedCase getAggregatedCase()
  {
    if (getValue(AGGREGATEDCASE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.surveillance.AggregatedCase.get(getValue(AGGREGATEDCASE));
    }
  }
  
  public void validateAggregatedCase()
  {
    this.validateAttribute(AGGREGATEDCASE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getAggregatedCaseMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.surveillance.CasePatientTypeView.CLASS);
    return mdClassIF.definesAttribute(AGGREGATEDCASE);
  }
  
  public void setAggregatedCase(dss.vector.solutions.surveillance.AggregatedCase value)
  {
    if(value == null)
    {
      setValue(AGGREGATEDCASE, "");
    }
    else
    {
      setValue(AGGREGATEDCASE, value.getId());
    }
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.surveillance.CasePatientTypeView.CLASS);
    return mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.surveillance.CasePatientTypeView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.ontology.Term getPatientCategory()
  {
    if (getValue(PATIENTCATEGORY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(PATIENTCATEGORY));
    }
  }
  
  public void validatePatientCategory()
  {
    this.validateAttribute(PATIENTCATEGORY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getPatientCategoryMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.surveillance.CasePatientTypeView.CLASS);
    return mdClassIF.definesAttribute(PATIENTCATEGORY);
  }
  
  public void setPatientCategory(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(PATIENTCATEGORY, "");
    }
    else
    {
      setValue(PATIENTCATEGORY, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getTerm()
  {
    if (getValue(TERM).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(TERM));
    }
  }
  
  public void validateTerm()
  {
    this.validateAttribute(TERM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTermMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.surveillance.CasePatientTypeView.CLASS);
    return mdClassIF.definesAttribute(TERM);
  }
  
  public void setTerm(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(TERM, "");
    }
    else
    {
      setValue(TERM, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static CasePatientTypeView get(String id)
  {
    return (CasePatientTypeView) com.runwaysdk.business.View.get(id);
  }
  
  public dss.vector.solutions.surveillance.CasePatientTypeAmountView[] getAmounts()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.surveillance.CasePatientTypeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.surveillance.CasePatientTypeAmountView[] getAmounts(java.lang.String id)
  {
    CasePatientTypeView _instance = CasePatientTypeView.get(id);
    return _instance.getAmounts();
  }
  
  public static dss.vector.solutions.surveillance.CasePatientTypeAmountView[][] getAmountsForViews(java.lang.String[] ids)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.surveillance.CasePatientTypeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
