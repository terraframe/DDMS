package dss.vector.solutions.synchronization;

@com.runwaysdk.business.ClassSignature(hash = -343930599)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SynchronizedTypeView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class SynchronizedTypeViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.synchronization.SynchronizedTypeView";
  public static java.lang.String DESCRIPTION = "description";
  public static java.lang.String DISPLAYLABEL = "displayLabel";
  public static java.lang.String EXPORTED = "exported";
  public static java.lang.String ID = "id";
  public static java.lang.String MDTYPEID = "mdTypeId";
  public static java.lang.String QUALIFIEDTYPE = "qualifiedType";
  private static final long serialVersionUID = -343930599;
  
  public SynchronizedTypeViewBase()
  {
    super();
  }
  
  public String getDescription()
  {
    return getValue(DESCRIPTION);
  }
  
  public void validateDescription()
  {
    this.validateAttribute(DESCRIPTION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDescriptionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.synchronization.SynchronizedTypeView.CLASS);
    return mdClassIF.definesAttribute(DESCRIPTION);
  }
  
  public void setDescription(String value)
  {
    if(value == null)
    {
      setValue(DESCRIPTION, "");
    }
    else
    {
      setValue(DESCRIPTION, value);
    }
  }
  
  public String getDisplayLabel()
  {
    return getValue(DISPLAYLABEL);
  }
  
  public void validateDisplayLabel()
  {
    this.validateAttribute(DISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.synchronization.SynchronizedTypeView.CLASS);
    return mdClassIF.definesAttribute(DISPLAYLABEL);
  }
  
  public void setDisplayLabel(String value)
  {
    if(value == null)
    {
      setValue(DISPLAYLABEL, "");
    }
    else
    {
      setValue(DISPLAYLABEL, value);
    }
  }
  
  public Boolean getExported()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(EXPORTED));
  }
  
  public void validateExported()
  {
    this.validateAttribute(EXPORTED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getExportedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.synchronization.SynchronizedTypeView.CLASS);
    return mdClassIF.definesAttribute(EXPORTED);
  }
  
  public void setExported(Boolean value)
  {
    if(value == null)
    {
      setValue(EXPORTED, "");
    }
    else
    {
      setValue(EXPORTED, java.lang.Boolean.toString(value));
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.synchronization.SynchronizedTypeView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getMdTypeId()
  {
    return getValue(MDTYPEID);
  }
  
  public void validateMdTypeId()
  {
    this.validateAttribute(MDTYPEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMdTypeIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.synchronization.SynchronizedTypeView.CLASS);
    return mdClassIF.definesAttribute(MDTYPEID);
  }
  
  public void setMdTypeId(String value)
  {
    if(value == null)
    {
      setValue(MDTYPEID, "");
    }
    else
    {
      setValue(MDTYPEID, value);
    }
  }
  
  public String getQualifiedType()
  {
    return getValue(QUALIFIEDTYPE);
  }
  
  public void validateQualifiedType()
  {
    this.validateAttribute(QUALIFIEDTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getQualifiedTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.synchronization.SynchronizedTypeView.CLASS);
    return mdClassIF.definesAttribute(QUALIFIEDTYPE);
  }
  
  public void setQualifiedType(String value)
  {
    if(value == null)
    {
      setValue(QUALIFIEDTYPE, "");
    }
    else
    {
      setValue(QUALIFIEDTYPE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static SynchronizedTypeView get(String id)
  {
    return (SynchronizedTypeView) com.runwaysdk.business.View.get(id);
  }
  
  public static void confirmAll(dss.vector.solutions.synchronization.SynchronizedTypeView[] views)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.synchronization.SynchronizedTypeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.synchronization.SynchronizedTypeView[] getAll()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.synchronization.SynchronizedTypeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.synchronization.SynchronizedTypeView[] getDependencies(java.lang.String[] rootTypes)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.synchronization.SynchronizedTypeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.synchronization.SynchronizedTypeViewQuery getQuery(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.synchronization.SynchronizedTypeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.synchronization.SynchronizedTypeViewQuery search(java.lang.String query)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.synchronization.SynchronizedTypeView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
