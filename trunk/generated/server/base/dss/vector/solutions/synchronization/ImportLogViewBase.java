package dss.vector.solutions.synchronization;

@com.terraframe.mojo.business.ClassSignature(hash = 776537120)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ImportLogView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class ImportLogViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.synchronization.ImportLogView";
  public static java.lang.String EXPORTSEQ = "exportSeq";
  public static java.lang.String ID = "id";
  public static java.lang.String SOURCESITE = "sourceSite";
  private static final long serialVersionUID = 776537120;
  
  public ImportLogViewBase()
  {
    super();
  }
  
  public Integer getExportSeq()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(EXPORTSEQ));
  }
  
  public void validateExportSeq()
  {
    this.validateAttribute(EXPORTSEQ);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getExportSeqMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.synchronization.ImportLogView.CLASS);
    return mdClassIF.definesAttribute(EXPORTSEQ);
  }
  
  public void setExportSeq(Integer value)
  {
    if(value == null)
    {
      setValue(EXPORTSEQ, "");
    }
    else
    {
      setValue(EXPORTSEQ, java.lang.Integer.toString(value));
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.synchronization.ImportLogView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getSourceSite()
  {
    return getValue(SOURCESITE);
  }
  
  public void validateSourceSite()
  {
    this.validateAttribute(SOURCESITE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSourceSiteMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.synchronization.ImportLogView.CLASS);
    return mdClassIF.definesAttribute(SOURCESITE);
  }
  
  public void setSourceSite(String value)
  {
    if(value == null)
    {
      setValue(SOURCESITE, "");
    }
    else
    {
      setValue(SOURCESITE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ImportLogView get(String id)
  {
    return (ImportLogView) com.terraframe.mojo.business.View.get(id);
  }
  
  public static dss.vector.solutions.synchronization.ImportLogViewQuery getQuery(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.synchronization.ImportLogView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
