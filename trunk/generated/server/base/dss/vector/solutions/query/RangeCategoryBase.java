package dss.vector.solutions.query;

@com.runwaysdk.business.ClassSignature(hash = 1557854805)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to RangeCategory.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class RangeCategoryBase extends dss.vector.solutions.query.AbstractCategory implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.query.RangeCategory";
  public static java.lang.String LOWERBOUNDSTR = "lowerBoundStr";
  public static java.lang.String UPPERBOUNDSTR = "upperBoundStr";
  private static final long serialVersionUID = 1557854805;
  
  public RangeCategoryBase()
  {
    super();
  }
  
  public String getLowerBoundStr()
  {
    return getValue(LOWERBOUNDSTR);
  }
  
  public void validateLowerBoundStr()
  {
    this.validateAttribute(LOWERBOUNDSTR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getLowerBoundStrMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.RangeCategory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(LOWERBOUNDSTR);
  }
  
  public void setLowerBoundStr(String value)
  {
    if(value == null)
    {
      setValue(LOWERBOUNDSTR, "");
    }
    else
    {
      setValue(LOWERBOUNDSTR, value);
    }
  }
  
  public String getUpperBoundStr()
  {
    return getValue(UPPERBOUNDSTR);
  }
  
  public void validateUpperBoundStr()
  {
    this.validateAttribute(UPPERBOUNDSTR);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getUpperBoundStrMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.RangeCategory.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(UPPERBOUNDSTR);
  }
  
  public void setUpperBoundStr(String value)
  {
    if(value == null)
    {
      setValue(UPPERBOUNDSTR, "");
    }
    else
    {
      setValue(UPPERBOUNDSTR, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static RangeCategoryQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    RangeCategoryQuery query = new RangeCategoryQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static RangeCategory get(String id)
  {
    return (RangeCategory) com.runwaysdk.business.Business.get(id);
  }
  
  public static RangeCategory getByKey(String key)
  {
    return (RangeCategory) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static RangeCategory lock(java.lang.String id)
  {
    RangeCategory _instance = RangeCategory.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static RangeCategory unlock(java.lang.String id)
  {
    RangeCategory _instance = RangeCategory.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
