package dss.vector.solutions.query;

@com.terraframe.mojo.business.ClassSignature(hash = 1787976792)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ThematicLayer.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class ThematicLayerBase extends dss.vector.solutions.query.Layer implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.query.ThematicLayer";
  public static java.lang.String THEMATICVARIABLE = "thematicVariable";
  public static java.lang.String VIEWCREATED = "viewCreated";
  private static final long serialVersionUID = 1787976792;
  
  public ThematicLayerBase()
  {
    super();
  }
  
  public dss.vector.solutions.query.ThematicVariable getThematicVariable()
  {
    if (getValue(THEMATICVARIABLE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.query.ThematicVariable.get(getValue(THEMATICVARIABLE));
    }
  }
  
  public void validateThematicVariable()
  {
    this.validateAttribute(THEMATICVARIABLE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getThematicVariableMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.ThematicLayer.CLASS);
    return mdClassIF.definesAttribute(THEMATICVARIABLE);
  }
  
  public void setThematicVariable(dss.vector.solutions.query.ThematicVariable value)
  {
    if(value == null)
    {
      setValue(THEMATICVARIABLE, "");
    }
    else
    {
      setValue(THEMATICVARIABLE, value.getId());
    }
  }
  
  public Boolean getViewCreated()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(VIEWCREATED));
  }
  
  public void validateViewCreated()
  {
    this.validateAttribute(VIEWCREATED);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getViewCreatedMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.ThematicLayer.CLASS);
    return mdClassIF.definesAttribute(VIEWCREATED);
  }
  
  public void setViewCreated(Boolean value)
  {
    if(value == null)
    {
      setValue(VIEWCREATED, "");
    }
    else
    {
      setValue(VIEWCREATED, java.lang.Boolean.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ThematicLayerQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    ThematicLayerQuery query = new ThematicLayerQuery(new com.terraframe.mojo.query.QueryFactory());
    com.terraframe.mojo.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public dss.vector.solutions.query.DefinesCategories addDefinesCategory(dss.vector.solutions.query.AbstractCategory abstractCategory)
  {
    return (dss.vector.solutions.query.DefinesCategories) addChild(abstractCategory, dss.vector.solutions.query.DefinesCategories.CLASS);
  }
  
  public void removeDefinesCategory(dss.vector.solutions.query.AbstractCategory abstractCategory)
  {
    removeAllChildren(abstractCategory, dss.vector.solutions.query.DefinesCategories.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.query.AbstractCategory> getAllDefinesCategory()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.query.AbstractCategory>) getChildren(dss.vector.solutions.query.DefinesCategories.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.query.DefinesCategories> getAllDefinesCategoryRel()
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.query.DefinesCategories>) getChildRelationships(dss.vector.solutions.query.DefinesCategories.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.query.DefinesCategories> getDefinesCategoryRel(dss.vector.solutions.query.AbstractCategory abstractCategory)
  {
    return (com.terraframe.mojo.query.OIterator<? extends dss.vector.solutions.query.DefinesCategories>) getRelationshipsWithChild(abstractCategory, dss.vector.solutions.query.DefinesCategories.CLASS);
  }
  
  public static ThematicLayer get(String id)
  {
    return (ThematicLayer) com.terraframe.mojo.business.Business.get(id);
  }
  
  public static ThematicLayer getByKey(String key)
  {
    return (ThematicLayer) com.terraframe.mojo.business.Business.get(CLASS, key);
  }
  
  public void changeLayerType(java.lang.String thematicLayerType)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.ThematicLayer.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void changeLayerType(java.lang.String id, java.lang.String thematicLayerType)
  {
    ThematicLayer _instance = ThematicLayer.get(id);
    _instance.changeLayerType(thematicLayerType);
  }
  
  public static dss.vector.solutions.query.ThematicLayer updateThematicVariable(java.lang.String layerId, dss.vector.solutions.query.ThematicVariable thematicVariable, dss.vector.solutions.query.AbstractCategory[] categories)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.ThematicLayer.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static ThematicLayer lock(java.lang.String id)
  {
    ThematicLayer _instance = ThematicLayer.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static ThematicLayer unlock(java.lang.String id)
  {
    ThematicLayer _instance = ThematicLayer.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
