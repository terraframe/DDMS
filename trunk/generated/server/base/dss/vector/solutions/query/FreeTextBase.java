package dss.vector.solutions.query;

@com.runwaysdk.business.ClassSignature(hash = -1109892771)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to FreeText.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class FreeTextBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.query.FreeText";
  public static java.lang.String CUSTOMTEXT = "customText";
  public static java.lang.String ID = "id";
  public static java.lang.String TEXTFONTFAMILY = "textFontFamily";
  public static java.lang.String TEXTFONTFILL = "textFontFill";
  public static java.lang.String TEXTFONTSIZE = "textFontSize";
  public static java.lang.String TEXTFONTSTYLES = "textFontStyles";
  private static final long serialVersionUID = -1109892771;
  
  public FreeTextBase()
  {
    super();
  }
  
  public String getCustomText()
  {
    return getValue(CUSTOMTEXT);
  }
  
  public void validateCustomText()
  {
    this.validateAttribute(CUSTOMTEXT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCustomTextMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.FreeText.CLASS);
    return mdClassIF.definesAttribute(CUSTOMTEXT);
  }
  
  public void setCustomText(String value)
  {
    if(value == null)
    {
      setValue(CUSTOMTEXT, "");
    }
    else
    {
      setValue(CUSTOMTEXT, value);
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.FreeText.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getTextFontFamily()
  {
    return getValue(TEXTFONTFAMILY);
  }
  
  public void validateTextFontFamily()
  {
    this.validateAttribute(TEXTFONTFAMILY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTextFontFamilyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.FreeText.CLASS);
    return mdClassIF.definesAttribute(TEXTFONTFAMILY);
  }
  
  public void setTextFontFamily(String value)
  {
    if(value == null)
    {
      setValue(TEXTFONTFAMILY, "");
    }
    else
    {
      setValue(TEXTFONTFAMILY, value);
    }
  }
  
  public String getTextFontFill()
  {
    return getValue(TEXTFONTFILL);
  }
  
  public void validateTextFontFill()
  {
    this.validateAttribute(TEXTFONTFILL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTextFontFillMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.FreeText.CLASS);
    return mdClassIF.definesAttribute(TEXTFONTFILL);
  }
  
  public void setTextFontFill(String value)
  {
    if(value == null)
    {
      setValue(TEXTFONTFILL, "");
    }
    else
    {
      setValue(TEXTFONTFILL, value);
    }
  }
  
  public Integer getTextFontSize()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(TEXTFONTSIZE));
  }
  
  public void validateTextFontSize()
  {
    this.validateAttribute(TEXTFONTSIZE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTextFontSizeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.FreeText.CLASS);
    return mdClassIF.definesAttribute(TEXTFONTSIZE);
  }
  
  public void setTextFontSize(Integer value)
  {
    if(value == null)
    {
      setValue(TEXTFONTSIZE, "");
    }
    else
    {
      setValue(TEXTFONTSIZE, java.lang.Integer.toString(value));
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.query.FontStyles> getTextFontStyles()
  {
    return (java.util.List<dss.vector.solutions.query.FontStyles>) getEnumValues(TEXTFONTSTYLES);
  }
  
  public void addTextFontStyles(dss.vector.solutions.query.FontStyles value)
  {
    if(value != null)
    {
      addEnumItem(TEXTFONTSTYLES, value.getId());
    }
  }
  
  public void removeTextFontStyles(dss.vector.solutions.query.FontStyles value)
  {
    if(value != null)
    {
      removeEnumItem(TEXTFONTSTYLES, value.getId());
    }
  }
  
  public void clearTextFontStyles()
  {
    clearEnum(TEXTFONTSTYLES);
  }
  
  public void validateTextFontStyles()
  {
    this.validateAttribute(TEXTFONTSTYLES);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTextFontStylesMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.FreeText.CLASS);
    return mdClassIF.definesAttribute(TEXTFONTSTYLES);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static FreeText get(String id)
  {
    return (FreeText) com.runwaysdk.business.View.get(id);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
