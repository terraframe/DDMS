package dss.vector.solutions.query;

@com.runwaysdk.business.ClassSignature(hash = 155350451)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SavedMap.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class SavedMapQuery extends com.runwaysdk.query.GeneratedBusinessQuery
 implements com.runwaysdk.generation.loader.Reloadable
{

  public SavedMapQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public SavedMapQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.query.SavedMap.CLASS;
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease()
  {
    return getDisease(null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.DISEASE);

    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.DISEASE, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.DISEASE);

    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.DISEASE, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getMapCenter()
  {
    return getMapCenter(null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapCenter(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.MAPCENTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapCenter(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.MAPCENTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getMapName()
  {
    return getMapName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.MAPNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.MAPNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getNorthArrowActive()
  {
    return getNorthArrowActive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.NORTHARROWACTIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.NORTHARROWACTIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition()
  {
    return getNorthArrowXPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.NORTHARROWXPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.NORTHARROWXPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition()
  {
    return getNorthArrowYPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.NORTHARROWYPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.NORTHARROWYPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.query.SavedMap.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.query.SavedMap.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getScaleBarActive()
  {
    return getScaleBarActive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SCALEBARACTIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SCALEBARACTIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getScaleBarXPosition()
  {
    return getScaleBarXPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SCALEBARXPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SCALEBARXPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getScaleBarYPosition()
  {
    return getScaleBarYPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SCALEBARYPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SCALEBARYPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getZoomLevel()
  {
    return getZoomLevel(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.ZOOMLEVEL, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getComponentQuery().get(dss.vector.solutions.query.SavedMap.ZOOMLEVEL, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.query.SavedMap.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.DISEASE)) 
    {
       return new dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends SavedMap> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<SavedMap>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition hasImage()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_hasImage()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasImage(dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    return this.getBusinessQuery().isParentIn(hasImageQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasImage(dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(hasImageQuery);
  }

  public com.runwaysdk.query.Condition hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mapImageQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mapImageQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    hasImageQuery.AND(hasImageQuery.hasChild(mapImageQuery));
    return this.getBusinessQuery().isParentIn(hasImageQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    hasImageQuery.AND(hasImageQuery.hasChild(mapImageQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(hasImageQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_hasImage()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasImage(dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    return this.getBusinessQuery().isNotParentIn(hasImageQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage(dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(hasImageQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mapImageQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mapImageQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    hasImageQuery.AND(hasImageQuery.hasChild(mapImageQuery));
    return this.getBusinessQuery().isNotParentIn(hasImageQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    hasImageQuery.AND(hasImageQuery.hasChild(mapImageQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(hasImageQuery);
  }


  public com.runwaysdk.query.Condition hasTextElement()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasTextElement(dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    return this.getBusinessQuery().isParentIn(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement(dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(textElementQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(textElementQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    hasTextElementQuery.AND(hasTextElementQuery.hasChild(textElementQuery));
    return this.getBusinessQuery().isParentIn(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    hasTextElementQuery.AND(hasTextElementQuery.hasChild(textElementQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(hasTextElementQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_hasTextElement()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasTextElement(dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    return this.getBusinessQuery().isNotParentIn(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement(dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(textElementQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(textElementQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    hasTextElementQuery.AND(hasTextElementQuery.hasChild(textElementQuery));
    return this.getBusinessQuery().isNotParentIn(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    hasTextElementQuery.AND(hasTextElementQuery.hasChild(textElementQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(hasTextElementQuery);
  }


  public com.runwaysdk.query.Condition layer()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_layer()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition layer(dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    return this.getBusinessQuery().isParentIn(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_layer(dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition layer(dss.vector.solutions.query.LayerQuery layerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(layerQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_layer(dss.vector.solutions.query.LayerQuery layerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(layerQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    hasLayersQuery.AND(hasLayersQuery.hasChild(layerQuery));
    return this.getBusinessQuery().isParentIn(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    hasLayersQuery.AND(hasLayersQuery.hasChild(layerQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(hasLayersQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_layer()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_layer(dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    return this.getBusinessQuery().isNotParentIn(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer(dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(layerQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(layerQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    hasLayersQuery.AND(hasLayersQuery.hasChild(layerQuery));
    return this.getBusinessQuery().isNotParentIn(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    hasLayersQuery.AND(hasLayersQuery.hasChild(layerQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(hasLayersQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface SavedMapQueryReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease();
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias);
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getMapCenter();
    public com.runwaysdk.query.SelectableChar getMapCenter(String alias);
    public com.runwaysdk.query.SelectableChar getMapCenter(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getMapName();
    public com.runwaysdk.query.SelectableChar getMapName(String alias);
    public com.runwaysdk.query.SelectableChar getMapName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getNorthArrowActive();
    public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias);
    public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition();
    public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias);
    public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition();
    public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias);
    public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getScaleBarActive();
    public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias);
    public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getScaleBarXPosition();
    public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias);
    public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getScaleBarYPosition();
    public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias);
    public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getZoomLevel();
    public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias);
    public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.query.SavedMap savedMap);

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.query.SavedMap savedMap);


  public com.runwaysdk.query.Condition hasImage();

  public com.runwaysdk.query.Condition hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery);

  public com.runwaysdk.query.Condition hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery);


  public com.runwaysdk.query.Condition SUBSELECT_hasImage();

  public com.runwaysdk.query.Condition SUBSELECT_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery);

  public com.runwaysdk.query.Condition SUBSELECT_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery);


  public com.runwaysdk.query.Condition hasTextElement();

  public com.runwaysdk.query.Condition hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery);

  public com.runwaysdk.query.Condition hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery);


  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement();

  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery);

  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery);


  public com.runwaysdk.query.Condition layer();

  public com.runwaysdk.query.Condition layer(dss.vector.solutions.query.LayerQuery layerQuery);

  public com.runwaysdk.query.Condition layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery);


  public com.runwaysdk.query.Condition SUBSELECT_layer();

  public com.runwaysdk.query.Condition SUBSELECT_layer(dss.vector.solutions.query.LayerQuery layerQuery);

  public com.runwaysdk.query.Condition SUBSELECT_layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery);


  public com.runwaysdk.query.Condition NOT_IN_hasImage();

  public com.runwaysdk.query.Condition NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery);

  public com.runwaysdk.query.Condition NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery);


  public com.runwaysdk.query.Condition NOT_IN_hasTextElement();

  public com.runwaysdk.query.Condition NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery);

  public com.runwaysdk.query.Condition NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery);


  public com.runwaysdk.query.Condition NOT_IN_layer();

  public com.runwaysdk.query.Condition NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery);

  public com.runwaysdk.query.Condition NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class SavedMapQueryReference extends com.runwaysdk.query.AttributeReference
 implements SavedMapQueryReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {

  public SavedMapQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.query.SavedMap savedMap)
    {
      if(savedMap == null) return this.EQ((java.lang.String)null);
      return this.EQ(savedMap.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.query.SavedMap savedMap)
    {
      if(savedMap == null) return this.NE((java.lang.String)null);
      return this.NE(savedMap.getId());
    }

  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.query.SavedMap.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.query.SavedMap.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.CREATEDBY,  alias, displayLabel);

  }
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease()
  {
    return getDisease(null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias)
  {
    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.DISEASE, alias, null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel)
  {
    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.DISEASE,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.query.SavedMap.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.query.SavedMap.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getMapCenter()
  {
    return getMapCenter(null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapCenter(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.MAPCENTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapCenter(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.MAPCENTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getMapName()
  {
    return getMapName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.MAPNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.MAPNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getNorthArrowActive()
  {
    return getNorthArrowActive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWACTIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWACTIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition()
  {
    return getNorthArrowXPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWXPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWXPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition()
  {
    return getNorthArrowYPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWYPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWYPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getScaleBarActive()
  {
    return getScaleBarActive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.query.SavedMap.SCALEBARACTIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.query.SavedMap.SCALEBARACTIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getScaleBarXPosition()
  {
    return getScaleBarXPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.SCALEBARXPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.SCALEBARXPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getScaleBarYPosition()
  {
    return getScaleBarYPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.SCALEBARYPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.SCALEBARYPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.query.SavedMap.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.query.SavedMap.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getZoomLevel()
  {
    return getZoomLevel(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.ZOOMLEVEL, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.ZOOMLEVEL, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition hasImage()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_hasImage()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasImage(dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    return this.isParentIn(hasImageQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasImage(dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    return this.isParentIn_SUBSELECT(hasImageQuery);
  }

  public com.runwaysdk.query.Condition hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mapImageQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mapImageQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    hasImageQuery.AND(hasImageQuery.hasChild(mapImageQuery));
    return this.isParentIn(hasImageQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    hasImageQuery.AND(hasImageQuery.hasChild(mapImageQuery));
    return this.isParentIn_SUBSELECT(hasImageQuery);
  }


  public com.runwaysdk.query.Condition hasTextElement()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasTextElement(dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    return this.isParentIn(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement(dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    return this.isParentIn_SUBSELECT(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(textElementQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(textElementQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    hasTextElementQuery.AND(hasTextElementQuery.hasChild(textElementQuery));
    return this.isParentIn(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    hasTextElementQuery.AND(hasTextElementQuery.hasChild(textElementQuery));
    return this.isParentIn_SUBSELECT(hasTextElementQuery);
  }


  public com.runwaysdk.query.Condition layer()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_layer()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition layer(dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    return this.isParentIn(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_layer(dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    return this.isParentIn_SUBSELECT(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition layer(dss.vector.solutions.query.LayerQuery layerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(layerQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_layer(dss.vector.solutions.query.LayerQuery layerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(layerQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    hasLayersQuery.AND(hasLayersQuery.hasChild(layerQuery));
    return this.isParentIn(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    hasLayersQuery.AND(hasLayersQuery.hasChild(layerQuery));
    return this.isParentIn_SUBSELECT(hasLayersQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_hasImage()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasImage(dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    return this.isNotParentIn(hasImageQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage(dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    return this.isNotParentIn_SUBSELECT(hasImageQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mapImageQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasImage.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(mapImageQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    hasImageQuery.AND(hasImageQuery.hasChild(mapImageQuery));
    return this.isNotParentIn(hasImageQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasImage(dss.vector.solutions.query.MapImageQuery mapImageQuery, dss.vector.solutions.query.HasImageQuery hasImageQuery)
  {
    hasImageQuery.AND(hasImageQuery.hasChild(mapImageQuery));
    return this.isNotParentIn_SUBSELECT(hasImageQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_hasTextElement()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasTextElement(dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    return this.isNotParentIn(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement(dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    return this.isNotParentIn_SUBSELECT(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(textElementQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasTextElement.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(textElementQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    hasTextElementQuery.AND(hasTextElementQuery.hasChild(textElementQuery));
    return this.isNotParentIn(hasTextElementQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_hasTextElement(dss.vector.solutions.query.TextElementQuery textElementQuery, dss.vector.solutions.query.HasTextElementQuery hasTextElementQuery)
  {
    hasTextElementQuery.AND(hasTextElementQuery.hasChild(textElementQuery));
    return this.isNotParentIn_SUBSELECT(hasTextElementQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_layer()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_layer(dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    return this.isNotParentIn(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer(dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    return this.isNotParentIn_SUBSELECT(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(layerQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.query.HasLayers.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(layerQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    hasLayersQuery.AND(hasLayersQuery.hasChild(layerQuery));
    return this.isNotParentIn(hasLayersQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_layer(dss.vector.solutions.query.LayerQuery layerQuery, dss.vector.solutions.query.HasLayersQuery hasLayersQuery)
  {
    hasLayersQuery.AND(hasLayersQuery.hasChild(layerQuery));
    return this.isNotParentIn_SUBSELECT(hasLayersQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.query.SavedMap.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.DISEASE)) 
    {
       return new dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }

/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface SavedMapQueryMultiReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableMultiReference
  {

    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease();
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias);
    public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getMapCenter();
    public com.runwaysdk.query.SelectableChar getMapCenter(String alias);
    public com.runwaysdk.query.SelectableChar getMapCenter(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getMapName();
    public com.runwaysdk.query.SelectableChar getMapName(String alias);
    public com.runwaysdk.query.SelectableChar getMapName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getNorthArrowActive();
    public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias);
    public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition();
    public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias);
    public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition();
    public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias);
    public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getScaleBarActive();
    public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias);
    public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getScaleBarXPosition();
    public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias);
    public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getScaleBarYPosition();
    public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias);
    public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableInteger getZoomLevel();
    public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias);
    public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias, String displayLabel);

    public com.runwaysdk.query.Condition containsAny(dss.vector.solutions.query.SavedMap ... savedMap);
    public com.runwaysdk.query.Condition notContainsAny(dss.vector.solutions.query.SavedMap ... savedMap);
    public com.runwaysdk.query.Condition containsAll(dss.vector.solutions.query.SavedMap ... savedMap);
    public com.runwaysdk.query.Condition notContainsAll(dss.vector.solutions.query.SavedMap ... savedMap);
    public com.runwaysdk.query.Condition containsExactly(dss.vector.solutions.query.SavedMap ... savedMap);
  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class SavedMapQueryMultiReference extends com.runwaysdk.query.AttributeMultiReference
 implements SavedMapQueryMultiReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {

  public SavedMapQueryMultiReference(com.runwaysdk.dataaccess.MdAttributeMultiReferenceDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, String mdMultiReferenceTableName, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, mdMultiReferenceTableName, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }



    public com.runwaysdk.query.Condition containsAny(dss.vector.solutions.query.SavedMap ... savedMap)  {

      String[] itemIdArray = new String[savedMap.length]; 

      for (int i=0; i<savedMap.length; i++)
      {
        itemIdArray[i] = savedMap[i].getId();
      }

      return this.containsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAny(dss.vector.solutions.query.SavedMap ... savedMap)  {

      String[] itemIdArray = new String[savedMap.length]; 

      for (int i=0; i<savedMap.length; i++)
      {
        itemIdArray[i] = savedMap[i].getId();
      }

      return this.notContainsAny(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsAll(dss.vector.solutions.query.SavedMap ... savedMap)  {

      String[] itemIdArray = new String[savedMap.length]; 

      for (int i=0; i<savedMap.length; i++)
      {
        itemIdArray[i] = savedMap[i].getId();
      }

      return this.containsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition notContainsAll(dss.vector.solutions.query.SavedMap ... savedMap)  {

      String[] itemIdArray = new String[savedMap.length]; 

      for (int i=0; i<savedMap.length; i++)
      {
        itemIdArray[i] = savedMap[i].getId();
      }

      return this.notContainsAll(itemIdArray);
  }

    public com.runwaysdk.query.Condition containsExactly(dss.vector.solutions.query.SavedMap ... savedMap)  {

      String[] itemIdArray = new String[savedMap.length]; 

      for (int i=0; i<savedMap.length; i++)
      {
        itemIdArray[i] = savedMap[i].getId();
      }

      return this.containsExactly(itemIdArray);
  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.query.SavedMap.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.query.SavedMap.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.CREATEDBY,  alias, displayLabel);

  }
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease()
  {
    return getDisease(null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias)
  {
    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.DISEASE, alias, null);

  }
 
  public dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF getDisease(String alias, String displayLabel)
  {
    return (dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.DISEASE,  alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.query.SavedMap.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.query.SavedMap.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getMapCenter()
  {
    return getMapCenter(null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapCenter(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.MAPCENTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapCenter(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.MAPCENTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getMapName()
  {
    return getMapName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.MAPNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getMapName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.MAPNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getNorthArrowActive()
  {
    return getNorthArrowActive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWACTIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getNorthArrowActive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWACTIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition()
  {
    return getNorthArrowXPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWXPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowXPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWXPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition()
  {
    return getNorthArrowYPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWYPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getNorthArrowYPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.NORTHARROWYPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.query.SavedMap.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getScaleBarActive()
  {
    return getScaleBarActive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.query.SavedMap.SCALEBARACTIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getScaleBarActive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.query.SavedMap.SCALEBARACTIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getScaleBarXPosition()
  {
    return getScaleBarXPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.SCALEBARXPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarXPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.SCALEBARXPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getScaleBarYPosition()
  {
    return getScaleBarYPosition(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.SCALEBARYPOSITION, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getScaleBarYPosition(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.SCALEBARYPOSITION, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.query.SavedMap.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.query.SavedMap.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.query.SavedMap.TYPE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getZoomLevel()
  {
    return getZoomLevel(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.ZOOMLEVEL, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getZoomLevel(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.get(dss.vector.solutions.query.SavedMap.ZOOMLEVEL, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.query.SavedMap.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.DISEASE)) 
    {
       return new dss.vector.solutions.general.DiseaseQuery.DiseaseQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.query.SavedMap.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
