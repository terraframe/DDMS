package dss.vector.solutions.query;

@com.runwaysdk.business.ClassSignature(hash = 389772597)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to QueryBuilder.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class QueryBuilderBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.query.QueryBuilder";
  public static java.lang.String ID = "id";
  private static final long serialVersionUID = 389772597;
  
  public QueryBuilderBase()
  {
    super();
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.QueryBuilder.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static QueryBuilder get(String id)
  {
    return (QueryBuilder) com.runwaysdk.business.View.get(id);
  }
  
  public static java.io.InputStream exportQueryToCSV(java.lang.String queryType, java.lang.String queryXML, java.lang.String config, java.lang.String savedSearchId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.QueryBuilder.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static java.io.InputStream exportQueryToExcel(java.lang.String queryType, java.lang.String queryXML, java.lang.String config, java.lang.String savedSearchId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.QueryBuilder.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static com.runwaysdk.query.ValueQuery getQueryResults(java.lang.String queryType, java.lang.String queryXML, java.lang.String config, java.lang.String sortBy, java.lang.Boolean ascending, java.lang.Integer pageNumber, java.lang.Integer pageSize)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.QueryBuilder.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static com.runwaysdk.query.ValueQuery getTextAttributeSugestions(java.lang.String match, java.lang.String klass, java.lang.String attribute)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.QueryBuilder.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
