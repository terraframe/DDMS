package dss.vector.solutions.query;

@com.terraframe.mojo.business.ClassSignature(hash = 443833584)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AbstractCategoryFactory.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class AbstractCategoryFactoryBase extends com.terraframe.mojo.business.Util implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.query.AbstractCategoryFactory";
  public static java.lang.String ID = "id";
  private static final long serialVersionUID = 443833584;
  
  public AbstractCategoryFactoryBase()
  {
    super();
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.AbstractCategoryFactory.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static AbstractCategoryFactory get(String id)
  {
    return (AbstractCategoryFactory) com.terraframe.mojo.business.Util.get(id);
  }
  
  public static java.lang.String getAllRequiredAttributes()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.AbstractCategoryFactory.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static com.terraframe.mojo.query.ValueQuery getSubclassInfo()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.AbstractCategoryFactory.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
