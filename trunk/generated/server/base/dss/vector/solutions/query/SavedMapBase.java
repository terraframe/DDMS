package dss.vector.solutions.query;

@com.runwaysdk.business.ClassSignature(hash = -1475133321)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SavedMap.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class SavedMapBase extends com.runwaysdk.business.Business implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.query.SavedMap";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CREATEDBY = "createdBy";
  public static java.lang.String DISEASE = "disease";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String ID = "id";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String MAPCENTER = "mapCenter";
  public static java.lang.String MAPNAME = "mapName";
  public static java.lang.String NORTHARROWACTIVE = "northArrowActive";
  public static java.lang.String NORTHARROWXPOSITION = "northArrowXPosition";
  public static java.lang.String NORTHARROWYPOSITION = "northArrowYPosition";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String SCALEBARACTIVE = "scaleBarActive";
  public static java.lang.String SCALEBARXPOSITION = "scaleBarXPosition";
  public static java.lang.String SCALEBARYPOSITION = "scaleBarYPosition";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String TYPE = "type";
  public static java.lang.String ZOOMLEVEL = "zoomLevel";
  private static final long serialVersionUID = -1475133321;
  
  public SavedMapBase()
  {
    super();
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getCreatedBy()
  {
    if (getValue(CREATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(CREATEDBY));
    }
  }
  
  public String getCreatedById()
  {
    return getValue(CREATEDBY);
  }
  
  public void validateCreatedBy()
  {
    this.validateAttribute(CREATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getCreatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(CREATEDBY);
  }
  
  public dss.vector.solutions.general.Disease getDisease()
  {
    if (getValue(DISEASE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.general.Disease.get(getValue(DISEASE));
    }
  }
  
  public String getDiseaseId()
  {
    return getValue(DISEASE);
  }
  
  public void validateDisease()
  {
    this.validateAttribute(DISEASE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getDiseaseMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(DISEASE);
  }
  
  public void setDisease(dss.vector.solutions.general.Disease value)
  {
    if(value == null)
    {
      setValue(DISEASE, "");
    }
    else
    {
      setValue(DISEASE, value.getId());
    }
  }
  
  public com.runwaysdk.system.metadata.MdDomain getEntityDomain()
  {
    if (getValue(ENTITYDOMAIN).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
  }
  
  public String getEntityDomainId()
  {
    return getValue(ENTITYDOMAIN);
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getEntityDomainMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.runwaysdk.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public String getKeyName()
  {
    return getValue(KEYNAME);
  }
  
  public void validateKeyName()
  {
    this.validateAttribute(KEYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getKeyNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(KEYNAME);
  }
  
  public void setKeyName(String value)
  {
    if(value == null)
    {
      setValue(KEYNAME, "");
    }
    else
    {
      setValue(KEYNAME, value);
    }
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTUPDATEDATE));
  }
  
  public void validateLastUpdateDate()
  {
    this.validateAttribute(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getLastUpdatedBy()
  {
    if (getValue(LASTUPDATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LASTUPDATEDBY));
    }
  }
  
  public String getLastUpdatedById()
  {
    return getValue(LASTUPDATEDBY);
  }
  
  public void validateLastUpdatedBy()
  {
    this.validateAttribute(LASTUPDATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLastUpdatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(LASTUPDATEDBY);
  }
  
  public com.runwaysdk.system.Users getLockedBy()
  {
    if (getValue(LOCKEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Users.get(getValue(LOCKEDBY));
    }
  }
  
  public String getLockedById()
  {
    return getValue(LOCKEDBY);
  }
  
  public void validateLockedBy()
  {
    this.validateAttribute(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  public String getMapCenter()
  {
    return getValue(MAPCENTER);
  }
  
  public void validateMapCenter()
  {
    this.validateAttribute(MAPCENTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMapCenterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(MAPCENTER);
  }
  
  public void setMapCenter(String value)
  {
    if(value == null)
    {
      setValue(MAPCENTER, "");
    }
    else
    {
      setValue(MAPCENTER, value);
    }
  }
  
  public String getMapName()
  {
    return getValue(MAPNAME);
  }
  
  public void validateMapName()
  {
    this.validateAttribute(MAPNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getMapNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(MAPNAME);
  }
  
  public void setMapName(String value)
  {
    if(value == null)
    {
      setValue(MAPNAME, "");
    }
    else
    {
      setValue(MAPNAME, value);
    }
  }
  
  public Boolean getNorthArrowActive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(NORTHARROWACTIVE));
  }
  
  public void validateNorthArrowActive()
  {
    this.validateAttribute(NORTHARROWACTIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNorthArrowActiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(NORTHARROWACTIVE);
  }
  
  public void setNorthArrowActive(Boolean value)
  {
    if(value == null)
    {
      setValue(NORTHARROWACTIVE, "");
    }
    else
    {
      setValue(NORTHARROWACTIVE, java.lang.Boolean.toString(value));
    }
  }
  
  public Integer getNorthArrowXPosition()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NORTHARROWXPOSITION));
  }
  
  public void validateNorthArrowXPosition()
  {
    this.validateAttribute(NORTHARROWXPOSITION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNorthArrowXPositionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(NORTHARROWXPOSITION);
  }
  
  public void setNorthArrowXPosition(Integer value)
  {
    if(value == null)
    {
      setValue(NORTHARROWXPOSITION, "");
    }
    else
    {
      setValue(NORTHARROWXPOSITION, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getNorthArrowYPosition()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(NORTHARROWYPOSITION));
  }
  
  public void validateNorthArrowYPosition()
  {
    this.validateAttribute(NORTHARROWYPOSITION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getNorthArrowYPositionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(NORTHARROWYPOSITION);
  }
  
  public void setNorthArrowYPosition(Integer value)
  {
    if(value == null)
    {
      setValue(NORTHARROWYPOSITION, "");
    }
    else
    {
      setValue(NORTHARROWYPOSITION, java.lang.Integer.toString(value));
    }
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (getValue(OWNER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(OWNER));
    }
  }
  
  public String getOwnerId()
  {
    return getValue(OWNER);
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getId());
    }
  }
  
  public Boolean getScaleBarActive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(SCALEBARACTIVE));
  }
  
  public void validateScaleBarActive()
  {
    this.validateAttribute(SCALEBARACTIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getScaleBarActiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(SCALEBARACTIVE);
  }
  
  public void setScaleBarActive(Boolean value)
  {
    if(value == null)
    {
      setValue(SCALEBARACTIVE, "");
    }
    else
    {
      setValue(SCALEBARACTIVE, java.lang.Boolean.toString(value));
    }
  }
  
  public Integer getScaleBarXPosition()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(SCALEBARXPOSITION));
  }
  
  public void validateScaleBarXPosition()
  {
    this.validateAttribute(SCALEBARXPOSITION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getScaleBarXPositionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(SCALEBARXPOSITION);
  }
  
  public void setScaleBarXPosition(Integer value)
  {
    if(value == null)
    {
      setValue(SCALEBARXPOSITION, "");
    }
    else
    {
      setValue(SCALEBARXPOSITION, java.lang.Integer.toString(value));
    }
  }
  
  public Integer getScaleBarYPosition()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(SCALEBARYPOSITION));
  }
  
  public void validateScaleBarYPosition()
  {
    this.validateAttribute(SCALEBARYPOSITION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getScaleBarYPositionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(SCALEBARYPOSITION);
  }
  
  public void setScaleBarYPosition(Integer value)
  {
    if(value == null)
    {
      setValue(SCALEBARYPOSITION, "");
    }
    else
    {
      setValue(SCALEBARYPOSITION, java.lang.Integer.toString(value));
    }
  }
  
  public Long getSeq()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SEQ));
  }
  
  public void validateSeq()
  {
    this.validateAttribute(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(SEQ);
  }
  
  public String getSiteMaster()
  {
    return getValue(SITEMASTER);
  }
  
  public void validateSiteMaster()
  {
    this.validateAttribute(SITEMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getSiteMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(SITEMASTER);
  }
  
  public String getType()
  {
    return getValue(TYPE);
  }
  
  public void validateType()
  {
    this.validateAttribute(TYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(TYPE);
  }
  
  public Integer getZoomLevel()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(ZOOMLEVEL));
  }
  
  public void validateZoomLevel()
  {
    this.validateAttribute(ZOOMLEVEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDAOIF getZoomLevelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.query.SavedMap.CLASS);
    return mdClassIF.definesAttribute(ZOOMLEVEL);
  }
  
  public void setZoomLevel(Integer value)
  {
    if(value == null)
    {
      setValue(ZOOMLEVEL, "");
    }
    else
    {
      setValue(ZOOMLEVEL, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static SavedMapQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    SavedMapQuery query = new SavedMapQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public dss.vector.solutions.query.HasImage addHasImage(dss.vector.solutions.query.MapImage mapImage)
  {
    return (dss.vector.solutions.query.HasImage) addChild(mapImage, dss.vector.solutions.query.HasImage.CLASS);
  }
  
  public void removeHasImage(dss.vector.solutions.query.MapImage mapImage)
  {
    removeAllChildren(mapImage, dss.vector.solutions.query.HasImage.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.MapImage> getAllHasImage()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.MapImage>) getChildren(dss.vector.solutions.query.HasImage.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasImage> getAllHasImageRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasImage>) getChildRelationships(dss.vector.solutions.query.HasImage.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasImage> getHasImageRel(dss.vector.solutions.query.MapImage mapImage)
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasImage>) getRelationshipsWithChild(mapImage, dss.vector.solutions.query.HasImage.CLASS);
  }
  
  public dss.vector.solutions.query.HasTextElement addHasTextElement(dss.vector.solutions.query.TextElement textElement)
  {
    return (dss.vector.solutions.query.HasTextElement) addChild(textElement, dss.vector.solutions.query.HasTextElement.CLASS);
  }
  
  public void removeHasTextElement(dss.vector.solutions.query.TextElement textElement)
  {
    removeAllChildren(textElement, dss.vector.solutions.query.HasTextElement.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.TextElement> getAllHasTextElement()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.TextElement>) getChildren(dss.vector.solutions.query.HasTextElement.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasTextElement> getAllHasTextElementRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasTextElement>) getChildRelationships(dss.vector.solutions.query.HasTextElement.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasTextElement> getHasTextElementRel(dss.vector.solutions.query.TextElement textElement)
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasTextElement>) getRelationshipsWithChild(textElement, dss.vector.solutions.query.HasTextElement.CLASS);
  }
  
  public dss.vector.solutions.query.HasLayers addLayer(dss.vector.solutions.query.Layer layer)
  {
    return (dss.vector.solutions.query.HasLayers) addChild(layer, dss.vector.solutions.query.HasLayers.CLASS);
  }
  
  public void removeLayer(dss.vector.solutions.query.Layer layer)
  {
    removeAllChildren(layer, dss.vector.solutions.query.HasLayers.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.Layer> getAllLayer()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.Layer>) getChildren(dss.vector.solutions.query.HasLayers.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasLayers> getAllLayerRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasLayers>) getChildRelationships(dss.vector.solutions.query.HasLayers.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasLayers> getLayerRel(dss.vector.solutions.query.Layer layer)
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.HasLayers>) getRelationshipsWithChild(layer, dss.vector.solutions.query.HasLayers.CLASS);
  }
  
  public static SavedMap get(String id)
  {
    return (SavedMap) com.runwaysdk.business.Business.get(id);
  }
  
  public static SavedMap getByKey(String key)
  {
    return (SavedMap) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public java.lang.String addMapImage(java.lang.String savedMapId, java.lang.String imageName, java.lang.String imagePath)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String addMapImage(java.lang.String id, java.lang.String savedMapId, java.lang.String imageName, java.lang.String imagePath)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.addMapImage(savedMapId, imageName, imagePath);
  }
  
  public java.lang.String addTextElement(java.lang.String savedMapId, java.lang.String textValue, java.lang.String fontColor, java.lang.String fontFamily, java.lang.Integer fontSize, java.lang.String fontStyle, java.lang.String customTextElementId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String addTextElement(java.lang.String id, java.lang.String savedMapId, java.lang.String textValue, java.lang.String fontColor, java.lang.String fontFamily, java.lang.Integer fontSize, java.lang.String fontStyle, java.lang.String customTextElementId)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.addTextElement(savedMapId, textValue, fontColor, fontFamily, fontSize, fontStyle, customTextElementId);
  }
  
  public static void cleanOldViews()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.query.LayerViewQuery createFromExisting(java.lang.String existingMapId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.query.LayerViewQuery createFromExisting(java.lang.String id, java.lang.String existingMapId)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.createFromExisting(existingMapId);
  }
  
  public void deleteLayerFromMap(java.lang.String layerId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteLayerFromMap(java.lang.String id, java.lang.String layerId)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.deleteLayerFromMap(layerId);
  }
  
  public java.io.InputStream exportShapefile()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.io.InputStream exportShapefile(java.lang.String id)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.exportShapefile();
  }
  
  public dss.vector.solutions.query.LayerViewQuery getAllLayers()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.query.LayerViewQuery getAllLayers(java.lang.String id)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.getAllLayers();
  }
  
  public dss.vector.solutions.query.MapImageQuery getAllMapImages()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.query.MapImageQuery getAllMapImages(java.lang.String id)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.getAllMapImages();
  }
  
  public static dss.vector.solutions.query.SavedMapQuery getAllSavedMaps()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public java.lang.String getImageByCustomImageId(java.lang.String customImageId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String getImageByCustomImageId(java.lang.String id, java.lang.String customImageId)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.getImageByCustomImageId(customImageId);
  }
  
  public java.lang.String getTextByCustomTextElementId(java.lang.String customTextElementId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String getTextByCustomTextElementId(java.lang.String id, java.lang.String customTextElementId)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.getTextByCustomTextElementId(customTextElementId);
  }
  
  public static dss.vector.solutions.query.SavedMap loadDefaultMap(dss.vector.solutions.query.SavedMap savedMap)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.query.SavedMap loadMap(java.lang.String mapId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void moveLayerOnMap(java.lang.String layerId, java.lang.Integer layerPosition)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void moveLayerOnMap(java.lang.String id, java.lang.String layerId, java.lang.Integer layerPosition)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.moveLayerOnMap(layerId, layerPosition);
  }
  
  public java.lang.String refreshMap(java.lang.String currentMapId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String refreshMap(java.lang.String id, java.lang.String currentMapId)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.refreshMap(currentMapId);
  }
  
  public java.lang.String removeMapImage(java.lang.String customImageId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String removeMapImage(java.lang.String id, java.lang.String customImageId)
  {
    SavedMap _instance = SavedMap.get(id);
    return _instance.removeMapImage(customImageId);
  }
  
  public void updateImageLocations(java.lang.String imageLocations)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void updateImageLocations(java.lang.String id, java.lang.String imageLocations)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.updateImageLocations(imageLocations);
  }
  
  public void updateLegendLocations(java.lang.String legendLocations)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void updateLegendLocations(java.lang.String id, java.lang.String legendLocations)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.updateLegendLocations(legendLocations);
  }
  
  public void updateMapState(java.lang.Integer zoomLevel, java.lang.String mapCenter)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void updateMapState(java.lang.String id, java.lang.Integer zoomLevel, java.lang.String mapCenter)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.updateMapState(zoomLevel, mapCenter);
  }
  
  public void updateNorthArrow(java.lang.Integer northArrowXPosition, java.lang.Integer northArrowYPosition, java.lang.Boolean northArrowActive)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void updateNorthArrow(java.lang.String id, java.lang.Integer northArrowXPosition, java.lang.Integer northArrowYPosition, java.lang.Boolean northArrowActive)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.updateNorthArrow(northArrowXPosition, northArrowYPosition, northArrowActive);
  }
  
  public void updateScaleBar(java.lang.Integer scaleBarXPosition, java.lang.Integer scaleBarYPosition, java.lang.Boolean scaleBarActive)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void updateScaleBar(java.lang.String id, java.lang.Integer scaleBarXPosition, java.lang.Integer scaleBarYPosition, java.lang.Boolean scaleBarActive)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.updateScaleBar(scaleBarXPosition, scaleBarYPosition, scaleBarActive);
  }
  
  public void updateTextElements(java.lang.String textElements)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.query.SavedMap.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void updateTextElements(java.lang.String id, java.lang.String textElements)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.updateTextElements(textElements);
  }
  
  public static SavedMap lock(java.lang.String id)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static SavedMap unlock(java.lang.String id)
  {
    SavedMap _instance = SavedMap.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
