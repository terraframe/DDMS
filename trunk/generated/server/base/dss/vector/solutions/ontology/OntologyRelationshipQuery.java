package dss.vector.solutions.ontology;

@com.runwaysdk.business.ClassSignature(hash = 1669533011)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to OntologyRelationship.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class OntologyRelationshipQuery extends com.runwaysdk.query.GeneratedBusinessQuery
 implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = 1669533011;

  public OntologyRelationshipQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public OntologyRelationshipQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.ontology.OntologyRelationship.CLASS;
  }
  public com.runwaysdk.query.SelectableChar getAltId()
  {
    return getAltId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getAltId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ALTID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getAltId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ALTID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getComment()
  {
    return getComment(null);

  }
 
  public com.runwaysdk.query.SelectableChar getComment(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.COMMENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getComment(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.COMMENT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("createdBy");

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("createdBy");

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getDef()
  {
    return getDef(null);

  }
 
  public com.runwaysdk.query.SelectableChar getDef(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.DEF, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getDef(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.DEF, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("entityDomain");

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("entityDomain");

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ID, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOf()
  {
    return getInverseOf(null);

  }
 
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOf(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("inverseOf");

    return (dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.INVERSEOF, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOf(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("inverseOf");

    return (dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.INVERSEOF, mdAttributeIF, this, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOfOnInstanceLevel()
  {
    return getInverseOfOnInstanceLevel(null);

  }
 
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOfOnInstanceLevel(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("inverseOfOnInstanceLevel");

    return (dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.INVERSEOFONINSTANCELEVEL, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOfOnInstanceLevel(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("inverseOfOnInstanceLevel");

    return (dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.INVERSEOFONINSTANCELEVEL, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsAntiSymmetric()
  {
    return getIsAntiSymmetric(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAntiSymmetric(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISANTISYMMETRIC, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAntiSymmetric(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISANTISYMMETRIC, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsBuiltIn()
  {
    return getIsBuiltIn(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsBuiltIn(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISBUILTIN, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsBuiltIn(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISBUILTIN, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsObsolete()
  {
    return getIsObsolete(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsObsolete(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISOBSOLETE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsObsolete(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISOBSOLETE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsReflexive()
  {
    return getIsReflexive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsReflexive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISREFLEXIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsReflexive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISREFLEXIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsTransitive()
  {
    return getIsTransitive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsTransitive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISTRANSITIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsTransitive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.ISTRANSITIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("lastUpdatedBy");

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("lastUpdatedBy");

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("lockedBy");

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("lockedBy");

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getNamespace()
  {
    return getNamespace(null);

  }
 
  public com.runwaysdk.query.SelectableChar getNamespace(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.NAMESPACE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getNamespace(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.NAMESPACE, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("owner");

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap("owner");

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.OntologyRelationship.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getRelationshipId()
  {
    return getRelationshipId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getRelationshipId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.RELATIONSHIPID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getRelationshipId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.RELATIONSHIPID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.OntologyRelationship.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("createdBy")) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("entityDomain")) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("inverseOf")) 
    {
       return new dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("inverseOfOnInstanceLevel")) 
    {
       return new dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("lastUpdatedBy")) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("lockedBy")) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("owner")) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends OntologyRelationship> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<OntologyRelationship>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition ontology()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_ontology()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition ontology(dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    return this.getBusinessQuery().isChildIn(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_ontology(dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(ontologyQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(ontologyQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    ontologyHasRelationshipQuery.AND(ontologyHasRelationshipQuery.hasParent(ontologyQuery));
    return this.getBusinessQuery().isChildIn(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    ontologyHasRelationshipQuery.AND(ontologyHasRelationshipQuery.hasParent(ontologyQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(ontologyHasRelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_ontology()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_ontology(dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    return this.getBusinessQuery().isNotChildIn(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology(dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(ontologyQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(ontologyQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    ontologyHasRelationshipQuery.AND(ontologyHasRelationshipQuery.hasParent(ontologyQuery));
    return this.getBusinessQuery().isNotChildIn(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    ontologyHasRelationshipQuery.AND(ontologyHasRelationshipQuery.hasParent(ontologyQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(ontologyHasRelationshipQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface OntologyRelationshipQueryReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableChar getAltId();
    public com.runwaysdk.query.SelectableChar getAltId(String alias);
    public com.runwaysdk.query.SelectableChar getAltId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getComment();
    public com.runwaysdk.query.SelectableChar getComment(String alias);
    public com.runwaysdk.query.SelectableChar getComment(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getDef();
    public com.runwaysdk.query.SelectableChar getDef(String alias);
    public com.runwaysdk.query.SelectableChar getDef(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOf();
    public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOf(String alias);
    public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOf(String alias, String displayLabel);
    public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOfOnInstanceLevel();
    public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOfOnInstanceLevel(String alias);
    public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOfOnInstanceLevel(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsAntiSymmetric();
    public com.runwaysdk.query.SelectableBoolean getIsAntiSymmetric(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsAntiSymmetric(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsBuiltIn();
    public com.runwaysdk.query.SelectableBoolean getIsBuiltIn(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsBuiltIn(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsObsolete();
    public com.runwaysdk.query.SelectableBoolean getIsObsolete(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsObsolete(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsReflexive();
    public com.runwaysdk.query.SelectableBoolean getIsReflexive(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsReflexive(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getIsTransitive();
    public com.runwaysdk.query.SelectableBoolean getIsTransitive(String alias);
    public com.runwaysdk.query.SelectableBoolean getIsTransitive(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getName();
    public com.runwaysdk.query.SelectableChar getName(String alias);
    public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getNamespace();
    public com.runwaysdk.query.SelectableChar getNamespace(String alias);
    public com.runwaysdk.query.SelectableChar getNamespace(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getRelationshipId();
    public com.runwaysdk.query.SelectableChar getRelationshipId(String alias);
    public com.runwaysdk.query.SelectableChar getRelationshipId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.ontology.OntologyRelationship ontologyRelationship);

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.ontology.OntologyRelationship ontologyRelationship);


  public com.runwaysdk.query.Condition ontology();
  public com.runwaysdk.query.Condition ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery);

  public com.runwaysdk.query.Condition ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_ontology();
  public com.runwaysdk.query.Condition SUBSELECT_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery);

  public com.runwaysdk.query.Condition SUBSELECT_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery);


  public com.runwaysdk.query.Condition NOT_IN_ontology();
  public com.runwaysdk.query.Condition NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery);

  public com.runwaysdk.query.Condition NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class OntologyRelationshipQueryReference extends com.runwaysdk.query.AttributeReference
 implements OntologyRelationshipQueryReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {
private static final long serialVersionUID = -85409807;

  public OntologyRelationshipQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.ontology.OntologyRelationship ontologyRelationship)
    {
      return this.EQ(ontologyRelationship.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.ontology.OntologyRelationship ontologyRelationship)
    {
      return this.NE(ontologyRelationship.getId());
    }

  public com.runwaysdk.query.SelectableChar getAltId()
  {
    return getAltId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getAltId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.ALTID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getAltId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.ALTID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getComment()
  {
    return getComment(null);

  }
 
  public com.runwaysdk.query.SelectableChar getComment(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.COMMENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getComment(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.COMMENT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.ontology.OntologyRelationship.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.ontology.OntologyRelationship.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getDef()
  {
    return getDef(null);

  }
 
  public com.runwaysdk.query.SelectableChar getDef(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.DEF, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getDef(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.DEF, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.ID, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOf()
  {
    return getInverseOf(null);

  }
 
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOf(String alias)
  {
    return (dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.INVERSEOF, alias, null);

  }
 
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOf(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.INVERSEOF,  alias, displayLabel);

  }
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOfOnInstanceLevel()
  {
    return getInverseOfOnInstanceLevel(null);

  }
 
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOfOnInstanceLevel(String alias)
  {
    return (dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.INVERSEOFONINSTANCELEVEL, alias, null);

  }
 
  public dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF getInverseOfOnInstanceLevel(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.INVERSEOFONINSTANCELEVEL,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsAntiSymmetric()
  {
    return getIsAntiSymmetric(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAntiSymmetric(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISANTISYMMETRIC, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsAntiSymmetric(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISANTISYMMETRIC, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsBuiltIn()
  {
    return getIsBuiltIn(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsBuiltIn(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISBUILTIN, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsBuiltIn(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISBUILTIN, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsObsolete()
  {
    return getIsObsolete(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsObsolete(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISOBSOLETE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsObsolete(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISOBSOLETE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsReflexive()
  {
    return getIsReflexive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsReflexive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISREFLEXIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsReflexive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISREFLEXIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getIsTransitive()
  {
    return getIsTransitive(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsTransitive(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISTRANSITIVE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getIsTransitive(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.OntologyRelationship.ISTRANSITIVE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.ontology.OntologyRelationship.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.ontology.OntologyRelationship.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getNamespace()
  {
    return getNamespace(null);

  }
 
  public com.runwaysdk.query.SelectableChar getNamespace(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.NAMESPACE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getNamespace(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.NAMESPACE, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.OntologyRelationship.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getRelationshipId()
  {
    return getRelationshipId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getRelationshipId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.RELATIONSHIPID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getRelationshipId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.RELATIONSHIPID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.ontology.OntologyRelationship.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.ontology.OntologyRelationship.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.SITEMASTER, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.OntologyRelationship.TYPE, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition ontology()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_ontology()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition ontology(dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    return this.isChildIn(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_ontology(dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    return this.isChildIn_SUBSELECT(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(ontologyQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(ontologyQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    ontologyHasRelationshipQuery.AND(ontologyHasRelationshipQuery.hasParent(ontologyQuery));
    return this.isChildIn(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    ontologyHasRelationshipQuery.AND(ontologyHasRelationshipQuery.hasParent(ontologyQuery));
    return this.isChildIn_SUBSELECT(ontologyHasRelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_ontology()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_ontology(dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    return this.isNotChildIn(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology(dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    return this.isNotChildIn_SUBSELECT(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(ontologyQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(ontologyQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    ontologyHasRelationshipQuery.AND(ontologyHasRelationshipQuery.hasParent(ontologyQuery));
    return this.isNotChildIn(ontologyHasRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_ontology(dss.vector.solutions.ontology.OntologyQuery ontologyQuery, dss.vector.solutions.ontology.OntologyHasRelationshipQuery ontologyHasRelationshipQuery)
  {
    ontologyHasRelationshipQuery.AND(ontologyHasRelationshipQuery.hasParent(ontologyQuery));
    return this.isNotChildIn_SUBSELECT(ontologyHasRelationshipQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals("createdBy")) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("entityDomain")) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("inverseOf")) 
    {
       return new dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("inverseOfOnInstanceLevel")) 
    {
       return new dss.vector.solutions.ontology.OntologyRelationshipQuery.OntologyRelationshipQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("lastUpdatedBy")) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("lockedBy")) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals("owner")) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
