package dss.vector.solutions.ontology;

@com.runwaysdk.business.ClassSignature(hash = 884896857)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Term.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TermBase extends com.runwaysdk.business.Business implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.ontology.Term";
  public static java.lang.String COMMENT = "comment";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CREATEDBY = "createdBy";
  public static java.lang.String DEF = "def";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String ID = "id";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String NAME = "name";
  public static java.lang.String NAMESPACE = "namespace";
  public static java.lang.String OBSOLETE = "obsolete";
  public static java.lang.String ONTOLOGY = "ontology";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String TERMDISPLAYLABEL = "termDisplayLabel";
  private com.runwaysdk.business.Struct termDisplayLabel = null;
  
  public static java.lang.String TERMID = "termId";
  public static java.lang.String TYPE = "type";
  private static final long serialVersionUID = 884896857;
  
  public TermBase()
  {
    super();
    termDisplayLabel = super.getStruct("termDisplayLabel");
  }
  
  public String getComment()
  {
    return getValue(COMMENT);
  }
  
  public void validateComment()
  {
    this.validateAttribute(COMMENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getCommentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(COMMENT);
  }
  
  public void setComment(String value)
  {
    if(value == null)
    {
      setValue(COMMENT, "");
    }
    else
    {
      setValue(COMMENT, value);
    }
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getCreatedBy()
  {
    if (getValue(CREATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(CREATEDBY));
    }
  }
  
  public String getCreatedById()
  {
    return getValue(CREATEDBY);
  }
  
  public void validateCreatedBy()
  {
    this.validateAttribute(CREATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getCreatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(CREATEDBY);
  }
  
  public String getDef()
  {
    return getValue(DEF);
  }
  
  public void validateDef()
  {
    this.validateAttribute(DEF);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getDefMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(DEF);
  }
  
  public void setDef(String value)
  {
    if(value == null)
    {
      setValue(DEF, "");
    }
    else
    {
      setValue(DEF, value);
    }
  }
  
  public com.runwaysdk.system.metadata.MdDomain getEntityDomain()
  {
    if (getValue(ENTITYDOMAIN).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
  }
  
  public String getEntityDomainId()
  {
    return getValue(ENTITYDOMAIN);
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getEntityDomainMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.runwaysdk.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getKeyName()
  {
    return getValue(KEYNAME);
  }
  
  public void validateKeyName()
  {
    this.validateAttribute(KEYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getKeyNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(KEYNAME);
  }
  
  public void setKeyName(String value)
  {
    if(value == null)
    {
      setValue(KEYNAME, "");
    }
    else
    {
      setValue(KEYNAME, value);
    }
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTUPDATEDATE));
  }
  
  public void validateLastUpdateDate()
  {
    this.validateAttribute(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getLastUpdatedBy()
  {
    if (getValue(LASTUPDATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LASTUPDATEDBY));
    }
  }
  
  public String getLastUpdatedById()
  {
    return getValue(LASTUPDATEDBY);
  }
  
  public void validateLastUpdatedBy()
  {
    this.validateAttribute(LASTUPDATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLastUpdatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LASTUPDATEDBY);
  }
  
  public com.runwaysdk.system.Users getLockedBy()
  {
    if (getValue(LOCKEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Users.get(getValue(LOCKEDBY));
    }
  }
  
  public String getLockedById()
  {
    return getValue(LOCKEDBY);
  }
  
  public void validateLockedBy()
  {
    this.validateAttribute(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  public String getName()
  {
    return getValue(NAME);
  }
  
  public void validateName()
  {
    this.validateAttribute(NAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(NAME);
  }
  
  public void setName(String value)
  {
    if(value == null)
    {
      setValue(NAME, "");
    }
    else
    {
      setValue(NAME, value);
    }
  }
  
  public String getNamespace()
  {
    return getValue(NAMESPACE);
  }
  
  public void validateNamespace()
  {
    this.validateAttribute(NAMESPACE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getNamespaceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(NAMESPACE);
  }
  
  public void setNamespace(String value)
  {
    if(value == null)
    {
      setValue(NAMESPACE, "");
    }
    else
    {
      setValue(NAMESPACE, value);
    }
  }
  
  public Boolean getObsolete()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(OBSOLETE));
  }
  
  public void validateObsolete()
  {
    this.validateAttribute(OBSOLETE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getObsoleteMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(OBSOLETE);
  }
  
  public void setObsolete(Boolean value)
  {
    if(value == null)
    {
      setValue(OBSOLETE, "");
    }
    else
    {
      setValue(OBSOLETE, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Ontology getOntology()
  {
    if (getValue(ONTOLOGY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Ontology.get(getValue(ONTOLOGY));
    }
  }
  
  public String getOntologyId()
  {
    return getValue(ONTOLOGY);
  }
  
  public void validateOntology()
  {
    this.validateAttribute(ONTOLOGY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getOntologyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ONTOLOGY);
  }
  
  public void setOntology(dss.vector.solutions.ontology.Ontology value)
  {
    if(value == null)
    {
      setValue(ONTOLOGY, "");
    }
    else
    {
      setValue(ONTOLOGY, value.getId());
    }
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (getValue(OWNER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(OWNER));
    }
  }
  
  public String getOwnerId()
  {
    return getValue(OWNER);
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getId());
    }
  }
  
  public Long getSeq()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SEQ));
  }
  
  public void validateSeq()
  {
    this.validateAttribute(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public String getSiteMaster()
  {
    return getValue(SITEMASTER);
  }
  
  public void validateSiteMaster()
  {
    this.validateAttribute(SITEMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSiteMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SITEMASTER);
  }
  
  public dss.vector.solutions.ontology.TermTermDisplayLabel getTermDisplayLabel()
  {
    return (dss.vector.solutions.ontology.TermTermDisplayLabel) termDisplayLabel;
  }
  
  public void validateTermDisplayLabel()
  {
    this.validateAttribute(TERMDISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF getTermDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLocalCharacterDAOIF)mdClassIF.definesAttribute(TERMDISPLAYLABEL);
  }
  
  public String getTermId()
  {
    return getValue(TERMID);
  }
  
  public void validateTermId()
  {
    this.validateAttribute(TERMID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTermIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TERMID);
  }
  
  public void setTermId(String value)
  {
    if(value == null)
    {
      setValue(TERMID, "");
    }
    else
    {
      setValue(TERMID, value);
    }
  }
  
  public String getType()
  {
    return getValue(TYPE);
  }
  
  public void validateType()
  {
    this.validateAttribute(TYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.Term.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TYPE);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TermQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    TermQuery query = new TermQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public dss.vector.solutions.ontology.TermRelationship addChildTerm(dss.vector.solutions.ontology.Term term)
  {
    return (dss.vector.solutions.ontology.TermRelationship) addChild(term, dss.vector.solutions.ontology.TermRelationship.CLASS);
  }
  
  public void removeChildTerm(dss.vector.solutions.ontology.Term term)
  {
    removeAllChildren(term, dss.vector.solutions.ontology.TermRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.Term> getAllChildTerm()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.Term>) getChildren(dss.vector.solutions.ontology.TermRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.TermRelationship> getAllChildTermRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.TermRelationship>) getChildRelationships(dss.vector.solutions.ontology.TermRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.ontology.TermRelationship getChildTermRel(dss.vector.solutions.ontology.Term term)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.TermRelationship> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.TermRelationship>) getRelationshipsWithChild(term, dss.vector.solutions.ontology.TermRelationship.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.ontology.InactiveByDisease addInactiveProperties(dss.vector.solutions.ontology.InactiveProperty inactiveProperty)
  {
    return (dss.vector.solutions.ontology.InactiveByDisease) addChild(inactiveProperty, dss.vector.solutions.ontology.InactiveByDisease.CLASS);
  }
  
  public void removeInactiveProperties(dss.vector.solutions.ontology.InactiveProperty inactiveProperty)
  {
    removeAllChildren(inactiveProperty, dss.vector.solutions.ontology.InactiveByDisease.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.InactiveProperty> getAllInactiveProperties()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.InactiveProperty>) getChildren(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.InactiveByDisease> getAllInactivePropertiesRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.InactiveByDisease>) getChildRelationships(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.InactiveByDisease> getInactivePropertiesRel(dss.vector.solutions.ontology.InactiveProperty inactiveProperty)
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.InactiveByDisease>) getRelationshipsWithChild(inactiveProperty, dss.vector.solutions.ontology.InactiveByDisease.CLASS);
  }
  
  public dss.vector.solutions.intervention.monitor.IPTANCVisit addANCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    return (dss.vector.solutions.intervention.monitor.IPTANCVisit) addParent(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
  }
  
  public void removeANCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    removeAllParents(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedIPT> getAllANCVisitAggregatedIPTs()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedIPT>) getParents(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTANCVisit> getAllANCVisitAggregatedIPTsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTANCVisit>) getParentRelationships(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.IPTANCVisit getANCVisitAggregatedIPTsRel(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTANCVisit> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTANCVisit>) getRelationshipsWithParent(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.ITNNet addAggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNData iTNData)
  {
    return (dss.vector.solutions.intervention.monitor.ITNNet) addParent(iTNData, dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
  }
  
  public void removeAggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNData iTNData)
  {
    removeAllParents(iTNData, dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNData> getAllAggregatedITNsWithNets()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNData>) getParents(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNNet> getAllAggregatedITNsWithNetsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNNet>) getParentRelationships(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.ITNNet getAggregatedITNsWithNetsRel(dss.vector.solutions.intervention.monitor.ITNData iTNData)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNNet> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNNet>) getRelationshipsWithParent(iTNData, dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.ITNService addAggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNData iTNData)
  {
    return (dss.vector.solutions.intervention.monitor.ITNService) addParent(iTNData, dss.vector.solutions.intervention.monitor.ITNService.CLASS);
  }
  
  public void removeAggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNData iTNData)
  {
    removeAllParents(iTNData, dss.vector.solutions.intervention.monitor.ITNService.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNData> getAllAggregatedITNsWithService()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNData>) getParents(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNService> getAllAggregatedITNsWithServiceRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNService>) getParentRelationships(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.ITNService getAggregatedITNsWithServiceRel(dss.vector.solutions.intervention.monitor.ITNData iTNData)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNService> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNService>) getRelationshipsWithParent(iTNData, dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.ITNTargetGroup addAggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNData iTNData)
  {
    return (dss.vector.solutions.intervention.monitor.ITNTargetGroup) addParent(iTNData, dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
  }
  
  public void removeAggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNData iTNData)
  {
    removeAllParents(iTNData, dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNData> getAllAggregatedITNsWithTargetGroups()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNData>) getParents(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNTargetGroup> getAllAggregatedITNsWithTargetGroupsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNTargetGroup>) getParentRelationships(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.ITNTargetGroup getAggregatedITNsWithTargetGroupsRel(dss.vector.solutions.intervention.monitor.ITNData iTNData)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNTargetGroup> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNTargetGroup>) getRelationshipsWithParent(iTNData, dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod addAggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit aggregatedPremiseVisit)
  {
    return (dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod) addParent(aggregatedPremiseVisit, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
  }
  
  public void removeAggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit aggregatedPremiseVisit)
  {
    removeAllParents(aggregatedPremiseVisit, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit> getAllAggregatedPremiseMethod()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit>) getParents(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod> getAllAggregatedPremiseMethodRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod>) getParentRelationships(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod getAggregatedPremiseMethodRel(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit aggregatedPremiseVisit)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod>) getRelationshipsWithParent(aggregatedPremiseVisit, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.AggregatedPremiseReason addAggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit aggregatedPremiseVisit)
  {
    return (dss.vector.solutions.intervention.monitor.AggregatedPremiseReason) addParent(aggregatedPremiseVisit, dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
  }
  
  public void removeAggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit aggregatedPremiseVisit)
  {
    removeAllParents(aggregatedPremiseVisit, dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit> getAllAggregatedPremiseReasons()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit>) getParents(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseReason> getAllAggregatedPremiseReasonsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseReason>) getParentRelationships(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.AggregatedPremiseReason getAggregatedPremiseReasonsRel(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisit aggregatedPremiseVisit)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseReason> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedPremiseReason>) getRelationshipsWithParent(aggregatedPremiseVisit, dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount addCaseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisType caseDiagnosisType)
  {
    return (dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount) addParent(caseDiagnosisType, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
  }
  
  public void removeCaseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisType caseDiagnosisType)
  {
    removeAllParents(caseDiagnosisType, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiagnosisType> getAllCaseDiagnosisTypes()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiagnosisType>) getParents(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount> getAllCaseDiagnosisTypesRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount>) getParentRelationships(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount getCaseDiagnosisTypesRel(dss.vector.solutions.surveillance.CaseDiagnosisType caseDiagnosisType)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount>) getRelationshipsWithParent(caseDiagnosisType, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount addCaseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestation caseDiseaseManifestation)
  {
    return (dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount) addParent(caseDiseaseManifestation, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
  }
  
  public void removeCaseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestation caseDiseaseManifestation)
  {
    removeAllParents(caseDiseaseManifestation, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiseaseManifestation> getAllCaseDiseaseManifestations()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiseaseManifestation>) getParents(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount> getAllCaseDiseaseManifestationsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount>) getParentRelationships(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount getCaseDiseaseManifestationsRel(dss.vector.solutions.surveillance.CaseDiseaseManifestation caseDiseaseManifestation)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount>) getRelationshipsWithParent(caseDiseaseManifestation, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.surveillance.CasePatientTypeAmount addCasePatientTypes(dss.vector.solutions.surveillance.CasePatientType casePatientType)
  {
    return (dss.vector.solutions.surveillance.CasePatientTypeAmount) addParent(casePatientType, dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
  }
  
  public void removeCasePatientTypes(dss.vector.solutions.surveillance.CasePatientType casePatientType)
  {
    removeAllParents(casePatientType, dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CasePatientType> getAllCasePatientTypes()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CasePatientType>) getParents(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CasePatientTypeAmount> getAllCasePatientTypesRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CasePatientTypeAmount>) getParentRelationships(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.surveillance.CasePatientTypeAmount getCasePatientTypesRel(dss.vector.solutions.surveillance.CasePatientType casePatientType)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CasePatientTypeAmount> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.CasePatientTypeAmount>) getRelationshipsWithParent(casePatientType, dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.IPTDose addDoseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    return (dss.vector.solutions.intervention.monitor.IPTDose) addParent(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
  }
  
  public void removeDoseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    removeAllParents(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedIPT> getAllDoseAggregatedIPTs()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedIPT>) getParents(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTDose> getAllDoseAggregatedIPTsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTDose>) getParentRelationships(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.IPTDose getDoseAggregatedIPTsRel(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTDose> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTDose>) getRelationshipsWithParent(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.ITNCommunityNet addITNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistribution iTNCommunityDistribution)
  {
    return (dss.vector.solutions.intervention.monitor.ITNCommunityNet) addParent(iTNCommunityDistribution, dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
  }
  
  public void removeITNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistribution iTNCommunityDistribution)
  {
    removeAllParents(iTNCommunityDistribution, dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityDistribution> getAllITNCommunityDistributionsWithNets()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityDistribution>) getParents(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityNet> getAllITNCommunityDistributionsWithNetsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityNet>) getParentRelationships(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.ITNCommunityNet getITNCommunityDistributionsWithNetsRel(dss.vector.solutions.intervention.monitor.ITNCommunityDistribution iTNCommunityDistribution)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityNet> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityNet>) getRelationshipsWithParent(iTNCommunityDistribution, dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup addITNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistribution iTNCommunityDistribution)
  {
    return (dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup) addParent(iTNCommunityDistribution, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
  }
  
  public void removeITNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistribution iTNCommunityDistribution)
  {
    removeAllParents(iTNCommunityDistribution, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityDistribution> getAllITNCommunityDistributionsWithTargetGroups()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityDistribution>) getParents(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup> getAllITNCommunityDistributionsWithTargetGroupsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup>) getParentRelationships(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup getITNCommunityDistributionsWithTargetGroupsRel(dss.vector.solutions.intervention.monitor.ITNCommunityDistribution iTNCommunityDistribution)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup>) getRelationshipsWithParent(iTNCommunityDistribution, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup addITNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistribution iTNDistribution)
  {
    return (dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup) addParent(iTNDistribution, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
  }
  
  public void removeITNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistribution iTNDistribution)
  {
    removeAllParents(iTNDistribution, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNDistribution> getAllITNFacilityDistributionsWithNets()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNDistribution>) getParents(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup> getAllITNFacilityDistributionsWithNetsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup>) getParentRelationships(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup getITNFacilityDistributionsWithNetsRel(dss.vector.solutions.intervention.monitor.ITNDistribution iTNDistribution)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup>) getRelationshipsWithParent(iTNDistribution, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.surveillance.IndividualCaseSymptom addIndividualInstance(dss.vector.solutions.intervention.monitor.IndividualInstance individualInstance)
  {
    return (dss.vector.solutions.surveillance.IndividualCaseSymptom) addParent(individualInstance, dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
  }
  
  public void removeIndividualInstance(dss.vector.solutions.intervention.monitor.IndividualInstance individualInstance)
  {
    removeAllParents(individualInstance, dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IndividualInstance> getAllIndividualInstance()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IndividualInstance>) getParents(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.IndividualCaseSymptom> getAllIndividualInstanceRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.IndividualCaseSymptom>) getParentRelationships(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.surveillance.IndividualCaseSymptom getIndividualInstanceRel(dss.vector.solutions.intervention.monitor.IndividualInstance individualInstance)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.IndividualCaseSymptom> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.surveillance.IndividualCaseSymptom>) getRelationshipsWithParent(individualInstance, dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod addIndividualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisit individualPremiseVisit)
  {
    return (dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod) addParent(individualPremiseVisit, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
  }
  
  public void removeIndividualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisit individualPremiseVisit)
  {
    removeAllParents(individualPremiseVisit, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IndividualPremiseVisit> getAllIndividualPremiseVisits()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IndividualPremiseVisit>) getParents(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod> getAllIndividualPremiseVisitsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod>) getParentRelationships(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod getIndividualPremiseVisitsRel(dss.vector.solutions.intervention.monitor.IndividualPremiseVisit individualPremiseVisit)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod>) getRelationshipsWithParent(individualPremiseVisit, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.ontology.TermRelationship addParentTerm(dss.vector.solutions.ontology.Term term)
  {
    return (dss.vector.solutions.ontology.TermRelationship) addParent(term, dss.vector.solutions.ontology.TermRelationship.CLASS);
  }
  
  public void removeParentTerm(dss.vector.solutions.ontology.Term term)
  {
    removeAllParents(term, dss.vector.solutions.ontology.TermRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.Term> getAllParentTerm()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.Term>) getParents(dss.vector.solutions.ontology.TermRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.TermRelationship> getAllParentTermRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.TermRelationship>) getParentRelationships(dss.vector.solutions.ontology.TermRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.ontology.TermRelationship getParentTermRel(dss.vector.solutions.ontology.Term term)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.TermRelationship> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.TermRelationship>) getRelationshipsWithParent(term, dss.vector.solutions.ontology.TermRelationship.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.IPTPatients addPatientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    return (dss.vector.solutions.intervention.monitor.IPTPatients) addParent(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
  }
  
  public void removePatientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    removeAllParents(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedIPT> getAllPatientAggregatedIPTs()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedIPT>) getParents(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTPatients> getAllPatientAggregatedIPTsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTPatients>) getParentRelationships(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.IPTPatients getPatientAggregatedIPTsRel(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTPatients> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTPatients>) getRelationshipsWithParent(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.PersonInterventionMethod addPersonInterventionMethod(dss.vector.solutions.intervention.monitor.PersonIntervention personIntervention)
  {
    return (dss.vector.solutions.intervention.monitor.PersonInterventionMethod) addParent(personIntervention, dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
  }
  
  public void removePersonInterventionMethod(dss.vector.solutions.intervention.monitor.PersonIntervention personIntervention)
  {
    removeAllParents(personIntervention, dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.PersonIntervention> getAllPersonInterventionMethod()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.PersonIntervention>) getParents(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.PersonInterventionMethod> getAllPersonInterventionMethodRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.PersonInterventionMethod>) getParentRelationships(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.PersonInterventionMethod getPersonInterventionMethodRel(dss.vector.solutions.intervention.monitor.PersonIntervention personIntervention)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.PersonInterventionMethod> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.PersonInterventionMethod>) getRelationshipsWithParent(personIntervention, dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation addPersonsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson)
  {
    return (dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation) addParent(surveyedPerson, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
  }
  
  public void removePersonsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson)
  {
    removeAllParents(surveyedPerson, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPerson> getAllPersonsWithTreatmentLocations()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPerson>) getParents(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation> getAllPersonsWithTreatmentLocationsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation>) getParentRelationships(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation getPersonsWithTreatmentLocationsRel(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation>) getRelationshipsWithParent(surveyedPerson, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment addPersonsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson)
  {
    return (dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment) addParent(surveyedPerson, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
  }
  
  public void removePersonsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson)
  {
    removeAllParents(surveyedPerson, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPerson> getAllPersonsWithTreatments()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPerson>) getParents(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment> getAllPersonsWithTreatmentsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment>) getParentRelationships(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment getPersonsWithTreatmentsRel(dss.vector.solutions.intervention.monitor.SurveyedPerson surveyedPerson)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment>) getRelationshipsWithParent(surveyedPerson, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.entomology.CollectionContainer addPremiseTaxons(dss.vector.solutions.entomology.PremiseTaxon premiseTaxon)
  {
    return (dss.vector.solutions.entomology.CollectionContainer) addParent(premiseTaxon, dss.vector.solutions.entomology.CollectionContainer.CLASS);
  }
  
  public void removePremiseTaxons(dss.vector.solutions.entomology.PremiseTaxon premiseTaxon)
  {
    removeAllParents(premiseTaxon, dss.vector.solutions.entomology.CollectionContainer.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PremiseTaxon> getAllPremiseTaxons()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PremiseTaxon>) getParents(dss.vector.solutions.entomology.CollectionContainer.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.CollectionContainer> getAllPremiseTaxonsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.CollectionContainer>) getParentRelationships(dss.vector.solutions.entomology.CollectionContainer.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.entomology.CollectionContainer getPremiseTaxonsRel(dss.vector.solutions.entomology.PremiseTaxon premiseTaxon)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.CollectionContainer> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.CollectionContainer>) getRelationshipsWithParent(premiseTaxon, dss.vector.solutions.entomology.CollectionContainer.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.entomology.PupalContainerAmount addPupalContainerAmounts(dss.vector.solutions.entomology.PupalContainer pupalContainer)
  {
    return (dss.vector.solutions.entomology.PupalContainerAmount) addParent(pupalContainer, dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
  }
  
  public void removePupalContainerAmounts(dss.vector.solutions.entomology.PupalContainer pupalContainer)
  {
    removeAllParents(pupalContainer, dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainer> getAllPupalContainerAmounts()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainer>) getParents(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainerAmount> getAllPupalContainerAmountsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainerAmount>) getParentRelationships(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.entomology.PupalContainerAmount getPupalContainerAmountsRel(dss.vector.solutions.entomology.PupalContainer pupalContainer)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainerAmount> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.entomology.PupalContainerAmount>) getRelationshipsWithParent(pupalContainer, dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public dss.vector.solutions.intervention.monitor.IPTTreatment addTreatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    return (dss.vector.solutions.intervention.monitor.IPTTreatment) addParent(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
  }
  
  public void removeTreatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    removeAllParents(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedIPT> getAllTreatmentAggregatedIPTs()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.AggregatedIPT>) getParents(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTTreatment> getAllTreatmentAggregatedIPTsRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTTreatment>) getParentRelationships(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.intervention.monitor.IPTTreatment getTreatmentAggregatedIPTsRel(dss.vector.solutions.intervention.monitor.AggregatedIPT aggregatedIPT)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTTreatment> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.intervention.monitor.IPTTreatment>) getRelationshipsWithParent(aggregatedIPT, dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static Term get(String id)
  {
    return (Term) com.runwaysdk.business.Business.get(id);
  }
  
  public static Term getByKey(String key)
  {
    return (Term) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public dss.vector.solutions.ontology.TermView applyWithParent(java.lang.String parentTermId, java.lang.Boolean cloneOperation, java.lang.String oldParentId, java.lang.Boolean inactive)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.ontology.TermView applyWithParent(java.lang.String id, java.lang.String parentTermId, java.lang.Boolean cloneOperation, java.lang.String oldParentId, java.lang.Boolean inactive)
  {
    Term _instance = Term.get(id);
    return _instance.applyWithParent(parentTermId, cloneOperation, oldParentId, inactive);
  }
  
  public static java.lang.String[] checkForNestedTerms(java.lang.String[] termIds)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void confirmChangeParent(java.lang.String parentId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void confirmChangeParent(java.lang.String id, java.lang.String parentId)
  {
    Term _instance = Term.get(id);
    _instance.confirmChangeParent(parentId);
  }
  
  public void confirmDeleteTerm(java.lang.String parentId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void confirmDeleteTerm(java.lang.String id, java.lang.String parentId)
  {
    Term _instance = Term.get(id);
    _instance.confirmDeleteTerm(parentId);
  }
  
  public void deleteRelationship(java.lang.String parentId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteRelationship(java.lang.String id, java.lang.String parentId)
  {
    Term _instance = Term.get(id);
    _instance.deleteRelationship(parentId);
  }
  
  public void deleteTerm()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteTerm(java.lang.String id)
  {
    Term _instance = Term.get(id);
    _instance.deleteTerm();
  }
  
  public void export(java.io.OutputStream outputStream)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void export(java.lang.String id, java.io.OutputStream outputStream)
  {
    Term _instance = Term.get(id);
    _instance.export(outputStream);
  }
  
  public static dss.vector.solutions.ontology.Term[] getAllTermsForField(java.lang.String className, java.lang.String attributeName)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.ontology.TermViewQuery getByIds(java.lang.String[] termIds)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.ontology.TermViewQuery getDefaultRoots()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.ontology.InactiveProperty getInactiveByDisease()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.ontology.InactiveProperty getInactiveByDisease(java.lang.String id)
  {
    Term _instance = Term.get(id);
    return _instance.getInactiveByDisease();
  }
  
  public dss.vector.solutions.ontology.TermViewQuery getOntologyChildren(java.lang.Boolean filterObsolete)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.ontology.TermViewQuery getOntologyChildren(java.lang.String id, java.lang.Boolean filterObsolete)
  {
    Term _instance = Term.get(id);
    return _instance.getOntologyChildren(filterObsolete);
  }
  
  public static dss.vector.solutions.ontology.Term[] getRootChildren(java.lang.String className, java.lang.String attributeName, java.lang.Boolean returnOnlySelectable)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.ontology.TermViewQuery getRoots(java.lang.String relationshipType)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.ontology.Term[] getSortedRootChildren(java.lang.String className, java.lang.String attributeName, java.lang.Boolean returnOnlySelectable)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.ontology.TermView getTermById(java.lang.String termId, java.lang.String[] parameters)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static void importTerms(java.io.InputStream importFile)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static com.runwaysdk.query.ValueQuery searchByRoots(java.lang.String value, java.lang.String[][] roots)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.ontology.TermViewQuery searchTerms(java.lang.String searchValue, java.lang.String[] parentTermIds)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.ontology.TermViewQuery searchTermsWithRoots(java.lang.String value, java.lang.String[] parameters)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static com.runwaysdk.query.ValueQuery termQuery(java.lang.String value, java.lang.String[] parentTermIds)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static com.runwaysdk.query.ValueQuery termQueryByIds(java.lang.String[] termIds)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static com.runwaysdk.query.ValueQuery termQueryWithRoots(java.lang.String value, java.lang.String[] parameters)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void updateFromTree(java.lang.Boolean inactive)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.Term.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void updateFromTree(java.lang.String id, java.lang.Boolean inactive)
  {
    Term _instance = Term.get(id);
    _instance.updateFromTree(inactive);
  }
  
  public static Term lock(java.lang.String id)
  {
    Term _instance = Term.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static Term unlock(java.lang.String id)
  {
    Term _instance = Term.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
