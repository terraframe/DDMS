package dss.vector.solutions.ontology;

@com.terraframe.mojo.business.ClassSignature(hash = -596426142)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to FieldDefaultView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class FieldDefaultViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.ontology.FieldDefaultView";
  public static java.lang.String DEFAULTVALUE = "defaultValue";
  public static java.lang.String ID = "id";
  public static java.lang.String MDATTRIBUTE = "mdAttribute";
  private static final long serialVersionUID = -596426142;
  
  public FieldDefaultViewBase()
  {
    super();
  }
  
  public dss.vector.solutions.ontology.Term getDefaultValue()
  {
    if (getValue(DEFAULTVALUE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(DEFAULTVALUE));
    }
  }
  
  public void validateDefaultValue()
  {
    this.validateAttribute(DEFAULTVALUE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getDefaultValueMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.FieldDefaultView.CLASS);
    return mdClassIF.definesAttribute(DEFAULTVALUE);
  }
  
  public void setDefaultValue(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(DEFAULTVALUE, "");
    }
    else
    {
      setValue(DEFAULTVALUE, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.FieldDefaultView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public com.terraframe.mojo.system.metadata.MdAttribute getMdAttribute()
  {
    if (getValue(MDATTRIBUTE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.terraframe.mojo.system.metadata.MdAttribute.get(getValue(MDATTRIBUTE));
    }
  }
  
  public void validateMdAttribute()
  {
    this.validateAttribute(MDATTRIBUTE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMdAttributeMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.FieldDefaultView.CLASS);
    return mdClassIF.definesAttribute(MDATTRIBUTE);
  }
  
  public void setMdAttribute(com.terraframe.mojo.system.metadata.MdAttribute value)
  {
    if(value == null)
    {
      setValue(MDATTRIBUTE, "");
    }
    else
    {
      setValue(MDATTRIBUTE, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static FieldDefaultView get(String id)
  {
    return (FieldDefaultView) com.terraframe.mojo.business.View.get(id);
  }
  
  public void applyDefaultValue()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.FieldDefaultView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void applyDefaultValue(java.lang.String id)
  {
    FieldDefaultView _instance = FieldDefaultView.get(id);
    _instance.applyDefaultValue();
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.FieldDefaultView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    FieldDefaultView _instance = FieldDefaultView.get(id);
    _instance.deleteConcrete();
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
