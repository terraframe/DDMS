package dss.vector.solutions.ontology;

@com.runwaysdk.business.ClassSignature(hash = 967860286)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to Term.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  class TermQuery extends com.runwaysdk.query.GeneratedBusinessQuery
 implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = 967860286;

  public TermQuery(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = componentQueryFactory.businessQuery(this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public TermQuery(com.runwaysdk.query.ValueQuery valueQuery)
  {
     super();
    if (this.getComponentQuery() == null)
    {
      com.runwaysdk.business.BusinessQuery businessQuery = new com.runwaysdk.business.BusinessQuery(valueQuery, this.getClassType());

       this.setBusinessQuery(businessQuery);
    }
  }

  public String getClassType()
  {
    return dss.vector.solutions.ontology.Term.CLASS;
  }
  public com.runwaysdk.query.SelectableChar getComment()
  {
    return getComment(null);

  }
 
  public com.runwaysdk.query.SelectableChar getComment(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.COMMENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getComment(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.COMMENT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.CREATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.CREATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.CREATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getDef()
  {
    return getDef(null);

  }
 
  public com.runwaysdk.query.SelectableChar getDef(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.DEF, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getDef(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.DEF, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.ENTITYDOMAIN, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.ENTITYDOMAIN);

    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.ENTITYDOMAIN, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.LASTUPDATEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.LASTUPDATEDBY);

    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.LASTUPDATEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.LOCKEDBY, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.LOCKEDBY);

    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.LOCKEDBY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getNamespace()
  {
    return getNamespace(null);

  }
 
  public com.runwaysdk.query.SelectableChar getNamespace(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.NAMESPACE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getNamespace(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.NAMESPACE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getObsolete()
  {
    return getObsolete(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getObsolete(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.OBSOLETE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getObsolete(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.OBSOLETE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF getOntology()
  {
    return getOntology(null);

  }
 
  public dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF getOntology(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.ONTOLOGY);

    return (dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.ONTOLOGY, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF getOntology(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.ONTOLOGY);

    return (dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.ONTOLOGY, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.OWNER, mdAttributeIF, this, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.OWNER);

    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.OWNER, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.SITEMASTER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF getTermDisplayLabel()
  {
    return getTermDisplayLabel(null);

  }
 
  public dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF getTermDisplayLabel(String alias)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.TERMDISPLAYLABEL);

    return (dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.TERMDISPLAYLABEL, mdAttributeIF, this, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF getTermDisplayLabel(String alias, String displayLabel)
  {

    com.runwaysdk.dataaccess.MdAttributeDAOIF mdAttributeIF = this.getComponentQuery().getMdAttributeROfromMap(dss.vector.solutions.ontology.Term.TERMDISPLAYLABEL);

    return (dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF)this.getComponentQuery().internalAttributeFactory(dss.vector.solutions.ontology.Term.TERMDISPLAYLABEL, mdAttributeIF, this, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getTermId()
  {
    return getTermId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getTermId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.TERMID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getTermId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.TERMID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getComponentQuery().get(dss.vector.solutions.ontology.Term.TYPE, alias, displayLabel);

  }
  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.ontology.Term.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.ONTOLOGY)) 
    {
       return new dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.ontology.Term.TERMDISPLAYLABEL)) 
    {
       return new dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  public com.runwaysdk.query.OIterator<? extends Term> getIterator()
  {
    this.checkNotUsedInValueQuery();
    String sqlStmt;
    if (_limit != null && _skip != null)
    {
      sqlStmt = this.getComponentQuery().getSQL(_limit, _skip);
    }
    else
    {
      sqlStmt = this.getComponentQuery().getSQL();
    }
    java.util.Map<String, com.runwaysdk.query.ColumnInfo> columnInfoMap = this.getComponentQuery().getColumnInfoMap();

    java.sql.ResultSet results = com.runwaysdk.dataaccess.database.Database.query(sqlStmt);
    return new com.runwaysdk.business.BusinessIterator<Term>(this.getComponentQuery().getMdEntityIF(), columnInfoMap, results);
  }


  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    return this.getBusinessQuery().isChildIn(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    iPTANCVisitQuery.AND(iPTANCVisitQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isChildIn(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    iPTANCVisitQuery.AND(iPTANCVisitQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iPTANCVisitQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    iPTANCVisitQuery.AND(iPTANCVisitQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isNotChildIn(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    iPTANCVisitQuery.AND(iPTANCVisitQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iPTANCVisitQuery);
  }


  public com.runwaysdk.query.Condition aggregatedITNsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.getBusinessQuery().isChildIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isChildIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNNetQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isNotChildIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNNetQuery);
  }


  public com.runwaysdk.query.Condition aggregatedITNsWithService()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.getBusinessQuery().isChildIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isChildIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNServiceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isNotChildIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNServiceQuery);
  }


  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.getBusinessQuery().isChildIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isChildIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isNotChildIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasParent(iTNDataQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition aggregatedPremiseMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    return this.getBusinessQuery().isChildIn(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    aggregatedPremiseMethodQuery.AND(aggregatedPremiseMethodQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.getBusinessQuery().isChildIn(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    aggregatedPremiseMethodQuery.AND(aggregatedPremiseMethodQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(aggregatedPremiseMethodQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    return this.getBusinessQuery().isNotChildIn(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    aggregatedPremiseMethodQuery.AND(aggregatedPremiseMethodQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.getBusinessQuery().isNotChildIn(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    aggregatedPremiseMethodQuery.AND(aggregatedPremiseMethodQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(aggregatedPremiseMethodQuery);
  }


  public com.runwaysdk.query.Condition aggregatedPremiseReasons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    return this.getBusinessQuery().isChildIn(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    aggregatedPremiseReasonQuery.AND(aggregatedPremiseReasonQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.getBusinessQuery().isChildIn(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    aggregatedPremiseReasonQuery.AND(aggregatedPremiseReasonQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(aggregatedPremiseReasonQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    return this.getBusinessQuery().isNotChildIn(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    aggregatedPremiseReasonQuery.AND(aggregatedPremiseReasonQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.getBusinessQuery().isNotChildIn(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    aggregatedPremiseReasonQuery.AND(aggregatedPremiseReasonQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(aggregatedPremiseReasonQuery);
  }


  public com.runwaysdk.query.Condition caseDiagnosisTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    return this.getBusinessQuery().isChildIn(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiagnosisTypeQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiagnosisTypeQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    caseDiagnosisTypeAmountQuery.AND(caseDiagnosisTypeAmountQuery.hasParent(caseDiagnosisTypeQuery));
    return this.getBusinessQuery().isChildIn(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    caseDiagnosisTypeAmountQuery.AND(caseDiagnosisTypeAmountQuery.hasParent(caseDiagnosisTypeQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(caseDiagnosisTypeAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    return this.getBusinessQuery().isNotChildIn(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiagnosisTypeQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiagnosisTypeQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    caseDiagnosisTypeAmountQuery.AND(caseDiagnosisTypeAmountQuery.hasParent(caseDiagnosisTypeQuery));
    return this.getBusinessQuery().isNotChildIn(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    caseDiagnosisTypeAmountQuery.AND(caseDiagnosisTypeAmountQuery.hasParent(caseDiagnosisTypeQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(caseDiagnosisTypeAmountQuery);
  }


  public com.runwaysdk.query.Condition caseDiseaseManifestations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    return this.getBusinessQuery().isChildIn(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiseaseManifestationQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiseaseManifestationQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    caseDiseaseManifestationAmountQuery.AND(caseDiseaseManifestationAmountQuery.hasParent(caseDiseaseManifestationQuery));
    return this.getBusinessQuery().isChildIn(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    caseDiseaseManifestationAmountQuery.AND(caseDiseaseManifestationAmountQuery.hasParent(caseDiseaseManifestationQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(caseDiseaseManifestationAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    return this.getBusinessQuery().isNotChildIn(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiseaseManifestationQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiseaseManifestationQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    caseDiseaseManifestationAmountQuery.AND(caseDiseaseManifestationAmountQuery.hasParent(caseDiseaseManifestationQuery));
    return this.getBusinessQuery().isNotChildIn(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    caseDiseaseManifestationAmountQuery.AND(caseDiseaseManifestationAmountQuery.hasParent(caseDiseaseManifestationQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(caseDiseaseManifestationAmountQuery);
  }


  public com.runwaysdk.query.Condition casePatientTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    return this.getBusinessQuery().isChildIn(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(casePatientTypeQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(casePatientTypeQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    casePatientTypeAmountQuery.AND(casePatientTypeAmountQuery.hasParent(casePatientTypeQuery));
    return this.getBusinessQuery().isChildIn(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    casePatientTypeAmountQuery.AND(casePatientTypeAmountQuery.hasParent(casePatientTypeQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(casePatientTypeAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    return this.getBusinessQuery().isNotChildIn(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(casePatientTypeQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(casePatientTypeQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    casePatientTypeAmountQuery.AND(casePatientTypeAmountQuery.hasParent(casePatientTypeQuery));
    return this.getBusinessQuery().isNotChildIn(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    casePatientTypeAmountQuery.AND(casePatientTypeAmountQuery.hasParent(casePatientTypeQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(casePatientTypeAmountQuery);
  }


  public com.runwaysdk.query.Condition doseAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    return this.getBusinessQuery().isChildIn(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    iPTDoseQuery.AND(iPTDoseQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isChildIn(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    iPTDoseQuery.AND(iPTDoseQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iPTDoseQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    iPTDoseQuery.AND(iPTDoseQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isNotChildIn(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    iPTDoseQuery.AND(iPTDoseQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iPTDoseQuery);
  }


  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    return this.getBusinessQuery().isChildIn(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    iTNCommunityNetQuery.AND(iTNCommunityNetQuery.hasParent(iTNCommunityDistributionQuery));
    return this.getBusinessQuery().isChildIn(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    iTNCommunityNetQuery.AND(iTNCommunityNetQuery.hasParent(iTNCommunityDistributionQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNCommunityNetQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    iTNCommunityNetQuery.AND(iTNCommunityNetQuery.hasParent(iTNCommunityDistributionQuery));
    return this.getBusinessQuery().isNotChildIn(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    iTNCommunityNetQuery.AND(iTNCommunityNetQuery.hasParent(iTNCommunityDistributionQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNCommunityNetQuery);
  }


  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    return this.getBusinessQuery().isChildIn(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    iTNCommunityTargetGroupQuery.AND(iTNCommunityTargetGroupQuery.hasParent(iTNCommunityDistributionQuery));
    return this.getBusinessQuery().isChildIn(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    iTNCommunityTargetGroupQuery.AND(iTNCommunityTargetGroupQuery.hasParent(iTNCommunityDistributionQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNCommunityTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    iTNCommunityTargetGroupQuery.AND(iTNCommunityTargetGroupQuery.hasParent(iTNCommunityDistributionQuery));
    return this.getBusinessQuery().isNotChildIn(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    iTNCommunityTargetGroupQuery.AND(iTNCommunityTargetGroupQuery.hasParent(iTNCommunityDistributionQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNCommunityTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    return this.getBusinessQuery().isChildIn(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDistributionQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDistributionQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    iTNDistributionTargetGroupQuery.AND(iTNDistributionTargetGroupQuery.hasParent(iTNDistributionQuery));
    return this.getBusinessQuery().isChildIn(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    iTNDistributionTargetGroupQuery.AND(iTNDistributionTargetGroupQuery.hasParent(iTNDistributionQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iTNDistributionTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDistributionQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDistributionQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    iTNDistributionTargetGroupQuery.AND(iTNDistributionTargetGroupQuery.hasParent(iTNDistributionQuery));
    return this.getBusinessQuery().isNotChildIn(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    iTNDistributionTargetGroupQuery.AND(iTNDistributionTargetGroupQuery.hasParent(iTNDistributionQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iTNDistributionTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition individualInstance()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_individualInstance()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition individualInstance(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.getBusinessQuery().isChildIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualInstance(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualInstanceQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualInstanceQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasParent(individualInstanceQuery));
    return this.getBusinessQuery().isChildIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasParent(individualInstanceQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(individualCaseSymptomQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_individualInstance()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualInstance(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.getBusinessQuery().isNotChildIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualInstanceQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualInstanceQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasParent(individualInstanceQuery));
    return this.getBusinessQuery().isNotChildIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasParent(individualInstanceQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(individualCaseSymptomQuery);
  }


  public com.runwaysdk.query.Condition individualPremiseVisits()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    return this.getBusinessQuery().isChildIn(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualPremiseVisitQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualPremiseVisitQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    individualPremiseVisitMethodQuery.AND(individualPremiseVisitMethodQuery.hasParent(individualPremiseVisitQuery));
    return this.getBusinessQuery().isChildIn(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    individualPremiseVisitMethodQuery.AND(individualPremiseVisitMethodQuery.hasParent(individualPremiseVisitQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(individualPremiseVisitMethodQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    return this.getBusinessQuery().isNotChildIn(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualPremiseVisitQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualPremiseVisitQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    individualPremiseVisitMethodQuery.AND(individualPremiseVisitMethodQuery.hasParent(individualPremiseVisitQuery));
    return this.getBusinessQuery().isNotChildIn(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    individualPremiseVisitMethodQuery.AND(individualPremiseVisitMethodQuery.hasParent(individualPremiseVisitQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(individualPremiseVisitMethodQuery);
  }


  public com.runwaysdk.query.Condition parentTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_parentTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.getBusinessQuery().isChildIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition parentTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(termQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(termQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasParent(termQuery));
    return this.getBusinessQuery().isChildIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasParent(termQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(termRelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_parentTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.getBusinessQuery().isNotChildIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(termQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(termQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasParent(termQuery));
    return this.getBusinessQuery().isNotChildIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasParent(termQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(termRelationshipQuery);
  }


  public com.runwaysdk.query.Condition patientAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    return this.getBusinessQuery().isChildIn(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    iPTPatientsQuery.AND(iPTPatientsQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isChildIn(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    iPTPatientsQuery.AND(iPTPatientsQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iPTPatientsQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    iPTPatientsQuery.AND(iPTPatientsQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isNotChildIn(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    iPTPatientsQuery.AND(iPTPatientsQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iPTPatientsQuery);
  }


  public com.runwaysdk.query.Condition personInterventionMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    return this.getBusinessQuery().isChildIn(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(personInterventionQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(personInterventionQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    personInterventionMethodQuery.AND(personInterventionMethodQuery.hasParent(personInterventionQuery));
    return this.getBusinessQuery().isChildIn(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    personInterventionMethodQuery.AND(personInterventionMethodQuery.hasParent(personInterventionQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(personInterventionMethodQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    return this.getBusinessQuery().isNotChildIn(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(personInterventionQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(personInterventionQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    personInterventionMethodQuery.AND(personInterventionMethodQuery.hasParent(personInterventionQuery));
    return this.getBusinessQuery().isNotChildIn(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    personInterventionMethodQuery.AND(personInterventionMethodQuery.hasParent(personInterventionQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(personInterventionMethodQuery);
  }


  public com.runwaysdk.query.Condition personsWithTreatmentLocations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.getBusinessQuery().isChildIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasParent(surveyedPersonQuery));
    return this.getBusinessQuery().isChildIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasParent(surveyedPersonQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.getBusinessQuery().isNotChildIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasParent(surveyedPersonQuery));
    return this.getBusinessQuery().isNotChildIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasParent(surveyedPersonQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }


  public com.runwaysdk.query.Condition personsWithTreatments()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.getBusinessQuery().isChildIn(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasParent(surveyedPersonQuery));
    return this.getBusinessQuery().isChildIn(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasParent(surveyedPersonQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.getBusinessQuery().isNotChildIn(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasParent(surveyedPersonQuery));
    return this.getBusinessQuery().isNotChildIn(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasParent(surveyedPersonQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }


  public com.runwaysdk.query.Condition premiseTaxons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition premiseTaxons(dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    return this.getBusinessQuery().isChildIn(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons(dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(premiseTaxonQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(premiseTaxonQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    collectionContainerQuery.AND(collectionContainerQuery.hasParent(premiseTaxonQuery));
    return this.getBusinessQuery().isChildIn(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    collectionContainerQuery.AND(collectionContainerQuery.hasParent(premiseTaxonQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(collectionContainerQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons(dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    return this.getBusinessQuery().isNotChildIn(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons(dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(premiseTaxonQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(premiseTaxonQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    collectionContainerQuery.AND(collectionContainerQuery.hasParent(premiseTaxonQuery));
    return this.getBusinessQuery().isNotChildIn(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    collectionContainerQuery.AND(collectionContainerQuery.hasParent(premiseTaxonQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(collectionContainerQuery);
  }


  public com.runwaysdk.query.Condition pupalContainerAmounts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.getBusinessQuery().isChildIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(pupalContainerQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(pupalContainerQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasParent(pupalContainerQuery));
    return this.getBusinessQuery().isChildIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasParent(pupalContainerQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(pupalContainerAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.getBusinessQuery().isNotChildIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(pupalContainerQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(pupalContainerQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasParent(pupalContainerQuery));
    return this.getBusinessQuery().isNotChildIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasParent(pupalContainerQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(pupalContainerAmountQuery);
  }


  public com.runwaysdk.query.Condition treatmentAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    return this.getBusinessQuery().isChildIn(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    return this.getBusinessQuery().isChildIn_SUBSELECT(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    iPTTreatmentQuery.AND(iPTTreatmentQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isChildIn(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    iPTTreatmentQuery.AND(iPTTreatmentQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isChildIn_SUBSELECT(iPTTreatmentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    return this.getBusinessQuery().isNotChildIn(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.getBusinessQuery().isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    iPTTreatmentQuery.AND(iPTTreatmentQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isNotChildIn(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    iPTTreatmentQuery.AND(iPTTreatmentQuery.hasParent(aggregatedIPTQuery));
    return this.getBusinessQuery().isNotChildIn_SUBSELECT(iPTTreatmentQuery);
  }


  public com.runwaysdk.query.Condition childTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_childTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.getBusinessQuery().isParentIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition childTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasChild(termQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(termRelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_childTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.getBusinessQuery().isNotParentIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasChild(termQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(termRelationshipQuery);
  }


  public com.runwaysdk.query.Condition inactiveProperties()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition inactiveProperties(dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    return this.getBusinessQuery().isParentIn(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties(dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    return this.getBusinessQuery().isParentIn_SUBSELECT(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(inactivePropertyQuery));

    return this.getBusinessQuery().isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(inactivePropertyQuery));

    return this.getBusinessQuery().isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    inactiveByDiseaseQuery.AND(inactiveByDiseaseQuery.hasChild(inactivePropertyQuery));
    return this.getBusinessQuery().isParentIn(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    inactiveByDiseaseQuery.AND(inactiveByDiseaseQuery.hasChild(inactivePropertyQuery));
    return this.getBusinessQuery().isParentIn_SUBSELECT(inactiveByDiseaseQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    return this.getBusinessQuery().isNotParentIn(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(inactivePropertyQuery));

    return this.getBusinessQuery().isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(inactivePropertyQuery));

    return this.getBusinessQuery().isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    inactiveByDiseaseQuery.AND(inactiveByDiseaseQuery.hasChild(inactivePropertyQuery));
    return this.getBusinessQuery().isNotParentIn(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    inactiveByDiseaseQuery.AND(inactiveByDiseaseQuery.hasChild(inactivePropertyQuery));
    return this.getBusinessQuery().isNotParentIn_SUBSELECT(inactiveByDiseaseQuery);
  }


/**
 * Interface that masks all type unsafe query methods and defines all type safe methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public interface TermQueryReferenceIF extends com.runwaysdk.generation.loader.Reloadable, com.runwaysdk.query.SelectableReference
  {

    public com.runwaysdk.query.SelectableChar getComment();
    public com.runwaysdk.query.SelectableChar getComment(String alias);
    public com.runwaysdk.query.SelectableChar getComment(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getCreateDate();
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getDef();
    public com.runwaysdk.query.SelectableChar getDef(String alias);
    public com.runwaysdk.query.SelectableChar getDef(String alias, String displayLabel);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain();
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias);
    public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getId();
    public com.runwaysdk.query.SelectableChar getId(String alias);
    public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getKeyName();
    public com.runwaysdk.query.SelectableChar getKeyName(String alias);
    public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate();
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias);
    public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy();
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias);
    public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy();
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias);
    public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getName();
    public com.runwaysdk.query.SelectableChar getName(String alias);
    public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getNamespace();
    public com.runwaysdk.query.SelectableChar getNamespace(String alias);
    public com.runwaysdk.query.SelectableChar getNamespace(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableBoolean getObsolete();
    public com.runwaysdk.query.SelectableBoolean getObsolete(String alias);
    public com.runwaysdk.query.SelectableBoolean getObsolete(String alias, String displayLabel);
    public dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF getOntology();
    public dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF getOntology(String alias);
    public dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF getOntology(String alias, String displayLabel);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner();
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias);
    public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableLong getSeq();
    public com.runwaysdk.query.SelectableLong getSeq(String alias);
    public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getSiteMaster();
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias);
    public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel);
    public dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF getTermDisplayLabel();
    public dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF getTermDisplayLabel(String alias);
    public dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF getTermDisplayLabel(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getTermId();
    public com.runwaysdk.query.SelectableChar getTermId(String alias);
    public com.runwaysdk.query.SelectableChar getTermId(String alias, String displayLabel);
    public com.runwaysdk.query.SelectableChar getType();
    public com.runwaysdk.query.SelectableChar getType(String alias);
    public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel);

    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.ontology.Term term);

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.ontology.Term term);


  public com.runwaysdk.query.Condition childTerm();

  public com.runwaysdk.query.Condition childTerm(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_childTerm();

  public com.runwaysdk.query.Condition SUBSELECT_childTerm(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery);


  public com.runwaysdk.query.Condition inactiveProperties();

  public com.runwaysdk.query.Condition inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery);

  public com.runwaysdk.query.Condition inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery);


  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties();

  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery);

  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery);


  public com.runwaysdk.query.Condition NOT_IN_childTerm();

  public com.runwaysdk.query.Condition NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery);


  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties();

  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery);

  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties();

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery);


  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs();
  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery);


  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs();
  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery);


  public com.runwaysdk.query.Condition aggregatedITNsWithNets();
  public com.runwaysdk.query.Condition aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery);


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets();
  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery);


  public com.runwaysdk.query.Condition aggregatedITNsWithService();
  public com.runwaysdk.query.Condition aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService();
  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery);


  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups();
  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery);


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups();
  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery);


  public com.runwaysdk.query.Condition aggregatedPremiseMethod();
  public com.runwaysdk.query.Condition aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery);

  public com.runwaysdk.query.Condition aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery);


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod();
  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery);

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery);


  public com.runwaysdk.query.Condition aggregatedPremiseReasons();
  public com.runwaysdk.query.Condition aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery);

  public com.runwaysdk.query.Condition aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery);


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons();
  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery);

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery);


  public com.runwaysdk.query.Condition caseDiagnosisTypes();
  public com.runwaysdk.query.Condition caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery);

  public com.runwaysdk.query.Condition caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes();
  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery);

  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery);


  public com.runwaysdk.query.Condition caseDiseaseManifestations();
  public com.runwaysdk.query.Condition caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery);

  public com.runwaysdk.query.Condition caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations();
  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery);

  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery);


  public com.runwaysdk.query.Condition casePatientTypes();
  public com.runwaysdk.query.Condition casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery);

  public com.runwaysdk.query.Condition casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes();
  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery);

  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery);


  public com.runwaysdk.query.Condition doseAggregatedIPTs();
  public com.runwaysdk.query.Condition doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery);


  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs();
  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery);


  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets();
  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery);

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery);


  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets();
  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery);

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery);


  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups();
  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery);

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery);


  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups();
  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery);

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery);


  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets();
  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery);

  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery);


  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets();
  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery);

  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery);


  public com.runwaysdk.query.Condition individualInstance();
  public com.runwaysdk.query.Condition individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery);

  public com.runwaysdk.query.Condition individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery);


  public com.runwaysdk.query.Condition SUBSELECT_individualInstance();
  public com.runwaysdk.query.Condition SUBSELECT_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery);

  public com.runwaysdk.query.Condition SUBSELECT_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery);


  public com.runwaysdk.query.Condition individualPremiseVisits();
  public com.runwaysdk.query.Condition individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery);

  public com.runwaysdk.query.Condition individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery);


  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits();
  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery);

  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery);


  public com.runwaysdk.query.Condition parentTerm();
  public com.runwaysdk.query.Condition parentTerm(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_parentTerm();
  public com.runwaysdk.query.Condition SUBSELECT_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery);


  public com.runwaysdk.query.Condition patientAggregatedIPTs();
  public com.runwaysdk.query.Condition patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery);


  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs();
  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery);


  public com.runwaysdk.query.Condition personInterventionMethod();
  public com.runwaysdk.query.Condition personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery);

  public com.runwaysdk.query.Condition personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery);


  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod();
  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery);

  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery);


  public com.runwaysdk.query.Condition personsWithTreatmentLocations();
  public com.runwaysdk.query.Condition personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery);

  public com.runwaysdk.query.Condition personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery);


  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations();
  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery);

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery);


  public com.runwaysdk.query.Condition personsWithTreatments();
  public com.runwaysdk.query.Condition personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery);

  public com.runwaysdk.query.Condition personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments();
  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery);

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery);


  public com.runwaysdk.query.Condition premiseTaxons();
  public com.runwaysdk.query.Condition premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery);

  public com.runwaysdk.query.Condition premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery);


  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons();
  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery);

  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery);


  public com.runwaysdk.query.Condition pupalContainerAmounts();
  public com.runwaysdk.query.Condition pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery);

  public com.runwaysdk.query.Condition pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts();
  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery);

  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery);


  public com.runwaysdk.query.Condition treatmentAggregatedIPTs();
  public com.runwaysdk.query.Condition treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs();
  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery);


  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs();
  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery);


  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets();
  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery);


  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService();
  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery);


  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups();
  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery);


  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod();
  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery);

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery);


  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons();
  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery);

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery);


  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes();
  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery);

  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery);


  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations();
  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery);

  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery);


  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes();
  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery);

  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery);


  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs();
  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery);


  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets();
  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery);

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery);


  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups();
  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery);

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery);


  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets();
  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery);

  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery);


  public com.runwaysdk.query.Condition NOT_IN_individualInstance();
  public com.runwaysdk.query.Condition NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery);

  public com.runwaysdk.query.Condition NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery);


  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits();
  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery);

  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery);


  public com.runwaysdk.query.Condition NOT_IN_parentTerm();
  public com.runwaysdk.query.Condition NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery);


  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs();
  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery);


  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod();
  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery);

  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery);


  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations();
  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery);

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery);


  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments();
  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery);

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery);


  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons();
  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery);

  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery);


  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts();
  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery);

  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery);


  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs();
  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery);


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs();
  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery);

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery);

  }

/**
 * Implements type safe query methods.
 * This type is used when a join is performed on this class as a reference.
 **/
  public static class TermQueryReference extends com.runwaysdk.query.AttributeReference
 implements TermQueryReferenceIF
, com.runwaysdk.generation.loader.Reloadable
  {
private static final long serialVersionUID = 82403296;

  public TermQueryReference(com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias, com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String alias, String displayLabel)
  {
    super(mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, alias, displayLabel);

  }


    public com.runwaysdk.query.BasicCondition EQ(dss.vector.solutions.ontology.Term term)
    {
      if(term == null) return this.EQ((java.lang.String)null);
      return this.EQ(term.getId());
    }

    public com.runwaysdk.query.BasicCondition NE(dss.vector.solutions.ontology.Term term)
    {
      if(term == null) return this.NE((java.lang.String)null);
      return this.NE(term.getId());
    }

  public com.runwaysdk.query.SelectableChar getComment()
  {
    return getComment(null);

  }
 
  public com.runwaysdk.query.SelectableChar getComment(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.COMMENT, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getComment(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.COMMENT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getCreateDate()
  {
    return getCreateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.ontology.Term.CREATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getCreateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.ontology.Term.CREATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy()
  {
    return getCreatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.CREATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getCreatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.CREATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getDef()
  {
    return getDef(null);

  }
 
  public com.runwaysdk.query.SelectableChar getDef(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.DEF, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getDef(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.DEF, alias, displayLabel);

  }
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain()
  {
    return getEntityDomain(null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.ENTITYDOMAIN, alias, null);

  }
 
  public com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF getEntityDomain(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.ENTITYDOMAIN,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.ID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getKeyName()
  {
    return getKeyName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.KEYNAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getKeyName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.KEYNAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate()
  {
    return getLastUpdateDate(null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.ontology.Term.LASTUPDATEDATE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableMoment getLastUpdateDate(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableMoment)this.get(dss.vector.solutions.ontology.Term.LASTUPDATEDATE, alias, displayLabel);

  }
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy()
  {
    return getLastUpdatedBy(null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.LASTUPDATEDBY, alias, null);

  }
 
  public com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF getLastUpdatedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.SingleActorQuery.SingleActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.LASTUPDATEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy()
  {
    return getLockedBy(null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.LOCKEDBY, alias, null);

  }
 
  public com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF getLockedBy(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.UsersQuery.UsersQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.LOCKEDBY,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getName()
  {
    return getName(null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.NAME, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getName(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.NAME, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getNamespace()
  {
    return getNamespace(null);

  }
 
  public com.runwaysdk.query.SelectableChar getNamespace(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.NAMESPACE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getNamespace(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.NAMESPACE, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableBoolean getObsolete()
  {
    return getObsolete(null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getObsolete(String alias)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.Term.OBSOLETE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableBoolean getObsolete(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableBoolean)this.get(dss.vector.solutions.ontology.Term.OBSOLETE, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF getOntology()
  {
    return getOntology(null);

  }
 
  public dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF getOntology(String alias)
  {
    return (dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.ONTOLOGY, alias, null);

  }
 
  public dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF getOntology(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.ONTOLOGY,  alias, displayLabel);

  }
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner()
  {
    return getOwner(null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.OWNER, alias, null);

  }
 
  public com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF getOwner(String alias, String displayLabel)
  {
    return (com.runwaysdk.system.ActorQuery.ActorQueryReferenceIF)this.get(dss.vector.solutions.ontology.Term.OWNER,  alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableLong getSeq()
  {
    return getSeq(null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.ontology.Term.SEQ, alias, null);

  }
 
  public com.runwaysdk.query.SelectableLong getSeq(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableLong)this.get(dss.vector.solutions.ontology.Term.SEQ, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getSiteMaster()
  {
    return getSiteMaster(null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.SITEMASTER, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getSiteMaster(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.SITEMASTER, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF getTermDisplayLabel()
  {
    return getTermDisplayLabel(null);

  }
 
  public dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF getTermDisplayLabel(String alias)
  {
    return (dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF)this.attributeFactory(dss.vector.solutions.ontology.Term.TERMDISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF getTermDisplayLabel(String alias, String displayLabel)
  {
    return (dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStructIF)this.attributeFactory(dss.vector.solutions.ontology.Term.TERMDISPLAYLABEL, com.runwaysdk.system.metadata.MdAttributeLocalCharacter.CLASS, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getTermId()
  {
    return getTermId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getTermId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.TERMID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getTermId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.TERMID, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getType()
  {
    return getType(null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.TYPE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getType(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.get(dss.vector.solutions.ontology.Term.TYPE, alias, displayLabel);

  }

  public com.runwaysdk.query.Condition childTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_childTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.isParentIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.isParentIn_SUBSELECT(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition childTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasChild(termQuery));
    return this.isParentIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasChild(termQuery));
    return this.isParentIn_SUBSELECT(termRelationshipQuery);
  }


  public com.runwaysdk.query.Condition inactiveProperties()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);

    return this.isParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition inactiveProperties(dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    return this.isParentIn(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties(dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    return this.isParentIn_SUBSELECT(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(inactivePropertyQuery));

    return this.isParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(inactivePropertyQuery));

    return this.isParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    inactiveByDiseaseQuery.AND(inactiveByDiseaseQuery.hasChild(inactivePropertyQuery));
    return this.isParentIn(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    inactiveByDiseaseQuery.AND(inactiveByDiseaseQuery.hasChild(inactivePropertyQuery));
    return this.isParentIn_SUBSELECT(inactiveByDiseaseQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_childTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.isNotParentIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.isNotParentIn_SUBSELECT(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(termQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasChild(termQuery));
    return this.isNotParentIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_childTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasChild(termQuery));
    return this.isNotParentIn_SUBSELECT(termRelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);

    return this.isNotParentIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    return this.isNotParentIn(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    return this.isNotParentIn_SUBSELECT(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(inactivePropertyQuery));

    return this.isNotParentIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.InactiveByDisease.CLASS);
    relationshipQuery.AND(relationshipQuery.hasChild(inactivePropertyQuery));

    return this.isNotParentIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    inactiveByDiseaseQuery.AND(inactiveByDiseaseQuery.hasChild(inactivePropertyQuery));
    return this.isNotParentIn(inactiveByDiseaseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_inactiveProperties(dss.vector.solutions.ontology.InactivePropertyQuery inactivePropertyQuery, dss.vector.solutions.ontology.InactiveByDiseaseQuery inactiveByDiseaseQuery)
  {
    inactiveByDiseaseQuery.AND(inactiveByDiseaseQuery.hasChild(inactivePropertyQuery));
    return this.isNotParentIn_SUBSELECT(inactiveByDiseaseQuery);
  }


  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    return this.isChildIn(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    return this.isChildIn_SUBSELECT(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    iPTANCVisitQuery.AND(iPTANCVisitQuery.hasParent(aggregatedIPTQuery));
    return this.isChildIn(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    iPTANCVisitQuery.AND(iPTANCVisitQuery.hasParent(aggregatedIPTQuery));
    return this.isChildIn_SUBSELECT(iPTANCVisitQuery);
  }


  public com.runwaysdk.query.Condition aggregatedITNsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.isChildIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.isChildIn_SUBSELECT(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasParent(iTNDataQuery));
    return this.isChildIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasParent(iTNDataQuery));
    return this.isChildIn_SUBSELECT(iTNNetQuery);
  }


  public com.runwaysdk.query.Condition aggregatedITNsWithService()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.isChildIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.isChildIn_SUBSELECT(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasParent(iTNDataQuery));
    return this.isChildIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasParent(iTNDataQuery));
    return this.isChildIn_SUBSELECT(iTNServiceQuery);
  }


  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.isChildIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.isChildIn_SUBSELECT(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasParent(iTNDataQuery));
    return this.isChildIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasParent(iTNDataQuery));
    return this.isChildIn_SUBSELECT(iTNTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition aggregatedPremiseMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    return this.isChildIn(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    return this.isChildIn_SUBSELECT(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    aggregatedPremiseMethodQuery.AND(aggregatedPremiseMethodQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.isChildIn(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    aggregatedPremiseMethodQuery.AND(aggregatedPremiseMethodQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.isChildIn_SUBSELECT(aggregatedPremiseMethodQuery);
  }


  public com.runwaysdk.query.Condition aggregatedPremiseReasons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    return this.isChildIn(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    return this.isChildIn_SUBSELECT(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    aggregatedPremiseReasonQuery.AND(aggregatedPremiseReasonQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.isChildIn(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    aggregatedPremiseReasonQuery.AND(aggregatedPremiseReasonQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.isChildIn_SUBSELECT(aggregatedPremiseReasonQuery);
  }


  public com.runwaysdk.query.Condition caseDiagnosisTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    return this.isChildIn(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    return this.isChildIn_SUBSELECT(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiagnosisTypeQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiagnosisTypeQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    caseDiagnosisTypeAmountQuery.AND(caseDiagnosisTypeAmountQuery.hasParent(caseDiagnosisTypeQuery));
    return this.isChildIn(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    caseDiagnosisTypeAmountQuery.AND(caseDiagnosisTypeAmountQuery.hasParent(caseDiagnosisTypeQuery));
    return this.isChildIn_SUBSELECT(caseDiagnosisTypeAmountQuery);
  }


  public com.runwaysdk.query.Condition caseDiseaseManifestations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    return this.isChildIn(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    return this.isChildIn_SUBSELECT(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiseaseManifestationQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiseaseManifestationQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    caseDiseaseManifestationAmountQuery.AND(caseDiseaseManifestationAmountQuery.hasParent(caseDiseaseManifestationQuery));
    return this.isChildIn(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    caseDiseaseManifestationAmountQuery.AND(caseDiseaseManifestationAmountQuery.hasParent(caseDiseaseManifestationQuery));
    return this.isChildIn_SUBSELECT(caseDiseaseManifestationAmountQuery);
  }


  public com.runwaysdk.query.Condition casePatientTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    return this.isChildIn(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    return this.isChildIn_SUBSELECT(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(casePatientTypeQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(casePatientTypeQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    casePatientTypeAmountQuery.AND(casePatientTypeAmountQuery.hasParent(casePatientTypeQuery));
    return this.isChildIn(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    casePatientTypeAmountQuery.AND(casePatientTypeAmountQuery.hasParent(casePatientTypeQuery));
    return this.isChildIn_SUBSELECT(casePatientTypeAmountQuery);
  }


  public com.runwaysdk.query.Condition doseAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    return this.isChildIn(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    return this.isChildIn_SUBSELECT(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    iPTDoseQuery.AND(iPTDoseQuery.hasParent(aggregatedIPTQuery));
    return this.isChildIn(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    iPTDoseQuery.AND(iPTDoseQuery.hasParent(aggregatedIPTQuery));
    return this.isChildIn_SUBSELECT(iPTDoseQuery);
  }


  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    return this.isChildIn(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    return this.isChildIn_SUBSELECT(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    iTNCommunityNetQuery.AND(iTNCommunityNetQuery.hasParent(iTNCommunityDistributionQuery));
    return this.isChildIn(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    iTNCommunityNetQuery.AND(iTNCommunityNetQuery.hasParent(iTNCommunityDistributionQuery));
    return this.isChildIn_SUBSELECT(iTNCommunityNetQuery);
  }


  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    return this.isChildIn(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    return this.isChildIn_SUBSELECT(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    iTNCommunityTargetGroupQuery.AND(iTNCommunityTargetGroupQuery.hasParent(iTNCommunityDistributionQuery));
    return this.isChildIn(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    iTNCommunityTargetGroupQuery.AND(iTNCommunityTargetGroupQuery.hasParent(iTNCommunityDistributionQuery));
    return this.isChildIn_SUBSELECT(iTNCommunityTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    return this.isChildIn(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    return this.isChildIn_SUBSELECT(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDistributionQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDistributionQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    iTNDistributionTargetGroupQuery.AND(iTNDistributionTargetGroupQuery.hasParent(iTNDistributionQuery));
    return this.isChildIn(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    iTNDistributionTargetGroupQuery.AND(iTNDistributionTargetGroupQuery.hasParent(iTNDistributionQuery));
    return this.isChildIn_SUBSELECT(iTNDistributionTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition individualInstance()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_individualInstance()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition individualInstance(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.isChildIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualInstance(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.isChildIn_SUBSELECT(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualInstanceQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualInstanceQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasParent(individualInstanceQuery));
    return this.isChildIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasParent(individualInstanceQuery));
    return this.isChildIn_SUBSELECT(individualCaseSymptomQuery);
  }


  public com.runwaysdk.query.Condition individualPremiseVisits()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    return this.isChildIn(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    return this.isChildIn_SUBSELECT(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualPremiseVisitQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualPremiseVisitQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    individualPremiseVisitMethodQuery.AND(individualPremiseVisitMethodQuery.hasParent(individualPremiseVisitQuery));
    return this.isChildIn(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    individualPremiseVisitMethodQuery.AND(individualPremiseVisitMethodQuery.hasParent(individualPremiseVisitQuery));
    return this.isChildIn_SUBSELECT(individualPremiseVisitMethodQuery);
  }


  public com.runwaysdk.query.Condition parentTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_parentTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.isChildIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.isChildIn_SUBSELECT(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition parentTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(termQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(termQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasParent(termQuery));
    return this.isChildIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasParent(termQuery));
    return this.isChildIn_SUBSELECT(termRelationshipQuery);
  }


  public com.runwaysdk.query.Condition patientAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    return this.isChildIn(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    return this.isChildIn_SUBSELECT(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    iPTPatientsQuery.AND(iPTPatientsQuery.hasParent(aggregatedIPTQuery));
    return this.isChildIn(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    iPTPatientsQuery.AND(iPTPatientsQuery.hasParent(aggregatedIPTQuery));
    return this.isChildIn_SUBSELECT(iPTPatientsQuery);
  }


  public com.runwaysdk.query.Condition personInterventionMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    return this.isChildIn(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    return this.isChildIn_SUBSELECT(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(personInterventionQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(personInterventionQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    personInterventionMethodQuery.AND(personInterventionMethodQuery.hasParent(personInterventionQuery));
    return this.isChildIn(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    personInterventionMethodQuery.AND(personInterventionMethodQuery.hasParent(personInterventionQuery));
    return this.isChildIn_SUBSELECT(personInterventionMethodQuery);
  }


  public com.runwaysdk.query.Condition personsWithTreatmentLocations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.isChildIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.isChildIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasParent(surveyedPersonQuery));
    return this.isChildIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasParent(surveyedPersonQuery));
    return this.isChildIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }


  public com.runwaysdk.query.Condition personsWithTreatments()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.isChildIn(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.isChildIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasParent(surveyedPersonQuery));
    return this.isChildIn(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasParent(surveyedPersonQuery));
    return this.isChildIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }


  public com.runwaysdk.query.Condition premiseTaxons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition premiseTaxons(dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    return this.isChildIn(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons(dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    return this.isChildIn_SUBSELECT(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(premiseTaxonQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(premiseTaxonQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    collectionContainerQuery.AND(collectionContainerQuery.hasParent(premiseTaxonQuery));
    return this.isChildIn(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    collectionContainerQuery.AND(collectionContainerQuery.hasParent(premiseTaxonQuery));
    return this.isChildIn_SUBSELECT(collectionContainerQuery);
  }


  public com.runwaysdk.query.Condition pupalContainerAmounts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.isChildIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.isChildIn_SUBSELECT(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(pupalContainerQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(pupalContainerQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasParent(pupalContainerQuery));
    return this.isChildIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasParent(pupalContainerQuery));
    return this.isChildIn_SUBSELECT(pupalContainerAmountQuery);
  }


  public com.runwaysdk.query.Condition treatmentAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);

    return this.isChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    return this.isChildIn(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    return this.isChildIn_SUBSELECT(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    iPTTreatmentQuery.AND(iPTTreatmentQuery.hasParent(aggregatedIPTQuery));
    return this.isChildIn(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    iPTTreatmentQuery.AND(iPTTreatmentQuery.hasParent(aggregatedIPTQuery));
    return this.isChildIn_SUBSELECT(iPTTreatmentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    return this.isNotChildIn(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    return this.isNotChildIn_SUBSELECT(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTANCVisit.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    iPTANCVisitQuery.AND(iPTANCVisitQuery.hasParent(aggregatedIPTQuery));
    return this.isNotChildIn(iPTANCVisitQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aNCVisitAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTANCVisitQuery iPTANCVisitQuery)
  {
    iPTANCVisitQuery.AND(iPTANCVisitQuery.hasParent(aggregatedIPTQuery));
    return this.isNotChildIn_SUBSELECT(iPTANCVisitQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.isNotChildIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    return this.isNotChildIn_SUBSELECT(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasParent(iTNDataQuery));
    return this.isNotChildIn(iTNNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithNets(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNNetQuery iTNNetQuery)
  {
    iTNNetQuery.AND(iTNNetQuery.hasParent(iTNDataQuery));
    return this.isNotChildIn_SUBSELECT(iTNNetQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.isNotChildIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    return this.isNotChildIn_SUBSELECT(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNService.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasParent(iTNDataQuery));
    return this.isNotChildIn(iTNServiceQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithService(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNServiceQuery iTNServiceQuery)
  {
    iTNServiceQuery.AND(iTNServiceQuery.hasParent(iTNDataQuery));
    return this.isNotChildIn_SUBSELECT(iTNServiceQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.isNotChildIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    return this.isNotChildIn_SUBSELECT(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDataQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasParent(iTNDataQuery));
    return this.isNotChildIn(iTNTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedITNsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNDataQuery iTNDataQuery, dss.vector.solutions.intervention.monitor.ITNTargetGroupQuery iTNTargetGroupQuery)
  {
    iTNTargetGroupQuery.AND(iTNTargetGroupQuery.hasParent(iTNDataQuery));
    return this.isNotChildIn_SUBSELECT(iTNTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    return this.isNotChildIn(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    return this.isNotChildIn_SUBSELECT(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    aggregatedPremiseMethodQuery.AND(aggregatedPremiseMethodQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.isNotChildIn(aggregatedPremiseMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseMethod(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseMethodQuery aggregatedPremiseMethodQuery)
  {
    aggregatedPremiseMethodQuery.AND(aggregatedPremiseMethodQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.isNotChildIn_SUBSELECT(aggregatedPremiseMethodQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    return this.isNotChildIn(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    return this.isNotChildIn_SUBSELECT(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.AggregatedPremiseReason.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedPremiseVisitQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    aggregatedPremiseReasonQuery.AND(aggregatedPremiseReasonQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.isNotChildIn(aggregatedPremiseReasonQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_aggregatedPremiseReasons(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitQuery aggregatedPremiseVisitQuery, dss.vector.solutions.intervention.monitor.AggregatedPremiseReasonQuery aggregatedPremiseReasonQuery)
  {
    aggregatedPremiseReasonQuery.AND(aggregatedPremiseReasonQuery.hasParent(aggregatedPremiseVisitQuery));
    return this.isNotChildIn_SUBSELECT(aggregatedPremiseReasonQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    return this.isNotChildIn(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    return this.isNotChildIn_SUBSELECT(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiagnosisTypeQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiagnosisTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiagnosisTypeQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    caseDiagnosisTypeAmountQuery.AND(caseDiagnosisTypeAmountQuery.hasParent(caseDiagnosisTypeQuery));
    return this.isNotChildIn(caseDiagnosisTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiagnosisTypes(dss.vector.solutions.surveillance.CaseDiagnosisTypeQuery caseDiagnosisTypeQuery, dss.vector.solutions.surveillance.CaseDiagnosisTypeAmountQuery caseDiagnosisTypeAmountQuery)
  {
    caseDiagnosisTypeAmountQuery.AND(caseDiagnosisTypeAmountQuery.hasParent(caseDiagnosisTypeQuery));
    return this.isNotChildIn_SUBSELECT(caseDiagnosisTypeAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    return this.isNotChildIn(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    return this.isNotChildIn_SUBSELECT(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiseaseManifestationQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CaseDiseaseManifestationAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(caseDiseaseManifestationQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    caseDiseaseManifestationAmountQuery.AND(caseDiseaseManifestationAmountQuery.hasParent(caseDiseaseManifestationQuery));
    return this.isNotChildIn(caseDiseaseManifestationAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_caseDiseaseManifestations(dss.vector.solutions.surveillance.CaseDiseaseManifestationQuery caseDiseaseManifestationQuery, dss.vector.solutions.surveillance.CaseDiseaseManifestationAmountQuery caseDiseaseManifestationAmountQuery)
  {
    caseDiseaseManifestationAmountQuery.AND(caseDiseaseManifestationAmountQuery.hasParent(caseDiseaseManifestationQuery));
    return this.isNotChildIn_SUBSELECT(caseDiseaseManifestationAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    return this.isNotChildIn(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    return this.isNotChildIn_SUBSELECT(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(casePatientTypeQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.CasePatientTypeAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(casePatientTypeQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    casePatientTypeAmountQuery.AND(casePatientTypeAmountQuery.hasParent(casePatientTypeQuery));
    return this.isNotChildIn(casePatientTypeAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_casePatientTypes(dss.vector.solutions.surveillance.CasePatientTypeQuery casePatientTypeQuery, dss.vector.solutions.surveillance.CasePatientTypeAmountQuery casePatientTypeAmountQuery)
  {
    casePatientTypeAmountQuery.AND(casePatientTypeAmountQuery.hasParent(casePatientTypeQuery));
    return this.isNotChildIn_SUBSELECT(casePatientTypeAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    return this.isNotChildIn(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    return this.isNotChildIn_SUBSELECT(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTDose.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    iPTDoseQuery.AND(iPTDoseQuery.hasParent(aggregatedIPTQuery));
    return this.isNotChildIn(iPTDoseQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_doseAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTDoseQuery iPTDoseQuery)
  {
    iPTDoseQuery.AND(iPTDoseQuery.hasParent(aggregatedIPTQuery));
    return this.isNotChildIn_SUBSELECT(iPTDoseQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    return this.isNotChildIn(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    return this.isNotChildIn_SUBSELECT(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityNet.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    iTNCommunityNetQuery.AND(iTNCommunityNetQuery.hasParent(iTNCommunityDistributionQuery));
    return this.isNotChildIn(iTNCommunityNetQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityNetQuery iTNCommunityNetQuery)
  {
    iTNCommunityNetQuery.AND(iTNCommunityNetQuery.hasParent(iTNCommunityDistributionQuery));
    return this.isNotChildIn_SUBSELECT(iTNCommunityNetQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    return this.isNotChildIn(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    return this.isNotChildIn_SUBSELECT(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNCommunityDistributionQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    iTNCommunityTargetGroupQuery.AND(iTNCommunityTargetGroupQuery.hasParent(iTNCommunityDistributionQuery));
    return this.isNotChildIn(iTNCommunityTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNCommunityDistributionsWithTargetGroups(dss.vector.solutions.intervention.monitor.ITNCommunityDistributionQuery iTNCommunityDistributionQuery, dss.vector.solutions.intervention.monitor.ITNCommunityTargetGroupQuery iTNCommunityTargetGroupQuery)
  {
    iTNCommunityTargetGroupQuery.AND(iTNCommunityTargetGroupQuery.hasParent(iTNCommunityDistributionQuery));
    return this.isNotChildIn_SUBSELECT(iTNCommunityTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    return this.isNotChildIn(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    return this.isNotChildIn_SUBSELECT(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDistributionQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroup.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(iTNDistributionQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    iTNDistributionTargetGroupQuery.AND(iTNDistributionTargetGroupQuery.hasParent(iTNDistributionQuery));
    return this.isNotChildIn(iTNDistributionTargetGroupQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_iTNFacilityDistributionsWithNets(dss.vector.solutions.intervention.monitor.ITNDistributionQuery iTNDistributionQuery, dss.vector.solutions.intervention.monitor.ITNDistributionTargetGroupQuery iTNDistributionTargetGroupQuery)
  {
    iTNDistributionTargetGroupQuery.AND(iTNDistributionTargetGroupQuery.hasParent(iTNDistributionQuery));
    return this.isNotChildIn_SUBSELECT(iTNDistributionTargetGroupQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_individualInstance()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualInstance(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.isNotChildIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance(dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    return this.isNotChildIn_SUBSELECT(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualInstanceQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.surveillance.IndividualCaseSymptom.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualInstanceQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasParent(individualInstanceQuery));
    return this.isNotChildIn(individualCaseSymptomQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualInstance(dss.vector.solutions.intervention.monitor.IndividualInstanceQuery individualInstanceQuery, dss.vector.solutions.surveillance.IndividualCaseSymptomQuery individualCaseSymptomQuery)
  {
    individualCaseSymptomQuery.AND(individualCaseSymptomQuery.hasParent(individualInstanceQuery));
    return this.isNotChildIn_SUBSELECT(individualCaseSymptomQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    return this.isNotChildIn(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    return this.isNotChildIn_SUBSELECT(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualPremiseVisitQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(individualPremiseVisitQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    individualPremiseVisitMethodQuery.AND(individualPremiseVisitMethodQuery.hasParent(individualPremiseVisitQuery));
    return this.isNotChildIn(individualPremiseVisitMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_individualPremiseVisits(dss.vector.solutions.intervention.monitor.IndividualPremiseVisitQuery individualPremiseVisitQuery, dss.vector.solutions.intervention.monitor.IndividualPremiseVisitMethodQuery individualPremiseVisitMethodQuery)
  {
    individualPremiseVisitMethodQuery.AND(individualPremiseVisitMethodQuery.hasParent(individualPremiseVisitQuery));
    return this.isNotChildIn_SUBSELECT(individualPremiseVisitMethodQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_parentTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.isNotChildIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm(dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    return this.isNotChildIn_SUBSELECT(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(termQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.ontology.TermRelationship.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(termQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasParent(termQuery));
    return this.isNotChildIn(termRelationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_parentTerm(dss.vector.solutions.ontology.TermQuery termQuery, dss.vector.solutions.ontology.TermRelationshipQuery termRelationshipQuery)
  {
    termRelationshipQuery.AND(termRelationshipQuery.hasParent(termQuery));
    return this.isNotChildIn_SUBSELECT(termRelationshipQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    return this.isNotChildIn(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    return this.isNotChildIn_SUBSELECT(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTPatients.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    iPTPatientsQuery.AND(iPTPatientsQuery.hasParent(aggregatedIPTQuery));
    return this.isNotChildIn(iPTPatientsQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_patientAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTPatientsQuery iPTPatientsQuery)
  {
    iPTPatientsQuery.AND(iPTPatientsQuery.hasParent(aggregatedIPTQuery));
    return this.isNotChildIn_SUBSELECT(iPTPatientsQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    return this.isNotChildIn(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    return this.isNotChildIn_SUBSELECT(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(personInterventionQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.PersonInterventionMethod.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(personInterventionQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    personInterventionMethodQuery.AND(personInterventionMethodQuery.hasParent(personInterventionQuery));
    return this.isNotChildIn(personInterventionMethodQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personInterventionMethod(dss.vector.solutions.intervention.monitor.PersonInterventionQuery personInterventionQuery, dss.vector.solutions.intervention.monitor.PersonInterventionMethodQuery personInterventionMethodQuery)
  {
    personInterventionMethodQuery.AND(personInterventionMethodQuery.hasParent(personInterventionQuery));
    return this.isNotChildIn_SUBSELECT(personInterventionMethodQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.isNotChildIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    return this.isNotChildIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocation.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasParent(surveyedPersonQuery));
    return this.isNotChildIn(surveyedPersonTreatmentLocationQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatmentLocations(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentLocationQuery surveyedPersonTreatmentLocationQuery)
  {
    surveyedPersonTreatmentLocationQuery.AND(surveyedPersonTreatmentLocationQuery.hasParent(surveyedPersonQuery));
    return this.isNotChildIn_SUBSELECT(surveyedPersonTreatmentLocationQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.isNotChildIn(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    return this.isNotChildIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.SurveyedPersonTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(surveyedPersonQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasParent(surveyedPersonQuery));
    return this.isNotChildIn(surveyedPersonTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_personsWithTreatments(dss.vector.solutions.intervention.monitor.SurveyedPersonQuery surveyedPersonQuery, dss.vector.solutions.intervention.monitor.SurveyedPersonTreatmentQuery surveyedPersonTreatmentQuery)
  {
    surveyedPersonTreatmentQuery.AND(surveyedPersonTreatmentQuery.hasParent(surveyedPersonQuery));
    return this.isNotChildIn_SUBSELECT(surveyedPersonTreatmentQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons(dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    return this.isNotChildIn(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons(dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    return this.isNotChildIn_SUBSELECT(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(premiseTaxonQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.CollectionContainer.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(premiseTaxonQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    collectionContainerQuery.AND(collectionContainerQuery.hasParent(premiseTaxonQuery));
    return this.isNotChildIn(collectionContainerQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_premiseTaxons(dss.vector.solutions.entomology.PremiseTaxonQuery premiseTaxonQuery, dss.vector.solutions.entomology.CollectionContainerQuery collectionContainerQuery)
  {
    collectionContainerQuery.AND(collectionContainerQuery.hasParent(premiseTaxonQuery));
    return this.isNotChildIn_SUBSELECT(collectionContainerQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.isNotChildIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    return this.isNotChildIn_SUBSELECT(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(pupalContainerQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.entomology.PupalContainerAmount.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(pupalContainerQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasParent(pupalContainerQuery));
    return this.isNotChildIn(pupalContainerAmountQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_pupalContainerAmounts(dss.vector.solutions.entomology.PupalContainerQuery pupalContainerQuery, dss.vector.solutions.entomology.PupalContainerAmountQuery pupalContainerAmountQuery)
  {
    pupalContainerAmountQuery.AND(pupalContainerAmountQuery.hasParent(pupalContainerQuery));
    return this.isNotChildIn_SUBSELECT(pupalContainerAmountQuery);
  }


  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);

    return this.isNotChildIn(relationshipQuery);
  }


  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs()
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    return this.isNotChildIn(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    return this.isNotChildIn_SUBSELECT(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isNotChildIn(relationshipQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery)
  {
    com.runwaysdk.query.QueryFactory queryFactory = this.getQueryFactory();
    com.runwaysdk.business.RelationshipQuery relationshipQuery = queryFactory.relationshipQuery(dss.vector.solutions.intervention.monitor.IPTTreatment.CLASS);
    relationshipQuery.AND(relationshipQuery.hasParent(aggregatedIPTQuery));

    return this.isNotChildIn_SUBSELECT(relationshipQuery);
  }

  public com.runwaysdk.query.Condition NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    iPTTreatmentQuery.AND(iPTTreatmentQuery.hasParent(aggregatedIPTQuery));
    return this.isNotChildIn(iPTTreatmentQuery);
  }

  public com.runwaysdk.query.Condition SUBSELECT_NOT_IN_treatmentAggregatedIPTs(dss.vector.solutions.intervention.monitor.AggregatedIPTQuery aggregatedIPTQuery, dss.vector.solutions.intervention.monitor.IPTTreatmentQuery iPTTreatmentQuery)
  {
    iPTTreatmentQuery.AND(iPTTreatmentQuery.hasParent(aggregatedIPTQuery));
    return this.isNotChildIn_SUBSELECT(iPTTreatmentQuery);
  }

  protected com.runwaysdk.query.AttributeReference referenceFactory( com.runwaysdk.dataaccess.MdAttributeRefDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdBusinessDAOIF referenceMdBusinessIF, String referenceTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.ontology.Term.CREATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.ENTITYDOMAIN)) 
    {
       return new com.runwaysdk.system.metadata.MdDomainQuery.MdDomainQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.LASTUPDATEDBY)) 
    {
       return new com.runwaysdk.system.SingleActorQuery.SingleActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.LOCKEDBY)) 
    {
       return new com.runwaysdk.system.UsersQuery.UsersQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.ONTOLOGY)) 
    {
       return new dss.vector.solutions.ontology.OntologyQuery.OntologyQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else if (name.equals(dss.vector.solutions.ontology.Term.OWNER)) 
    {
       return new com.runwaysdk.system.ActorQuery.ActorQueryReference((com.runwaysdk.dataaccess.MdAttributeRefDAOIF)mdAttributeIF, attributeNamespace, definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  protected com.runwaysdk.query.AttributeLocal localFactory( com.runwaysdk.dataaccess.MdAttributeLocalDAOIF mdAttributeIF, String attributeNamespace, String definingTableName, String definingTableAlias,  com.runwaysdk.dataaccess.MdLocalStructDAOIF mdLocalStructIF, String structTableAlias, com.runwaysdk.query.ComponentQuery rootQuery, java.util.Set<com.runwaysdk.query.Join> tableJoinSet, String userDefinedAlias, String userDefinedDisplayLabel)
  {
    String name = mdAttributeIF.definesAttribute();
    
    if (name.equals(dss.vector.solutions.ontology.Term.TERMDISPLAYLABEL)) 
    {
       return new dss.vector.solutions.ontology.TermTermDisplayLabelQuery.TermTermDisplayLabelQueryStruct((com.runwaysdk.dataaccess.MdAttributeLocalDAOIF)mdAttributeIF,  attributeNamespace, definingTableName, definingTableAlias, mdLocalStructIF, structTableAlias, rootQuery, tableJoinSet, userDefinedAlias, userDefinedDisplayLabel);
    }
    else 
    {
      String error = "Attribute type ["+mdAttributeIF.getType()+"] is invalid.";
      throw new com.runwaysdk.query.QueryException(error);
    }
  }

  }
}
