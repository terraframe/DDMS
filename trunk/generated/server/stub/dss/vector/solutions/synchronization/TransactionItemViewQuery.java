package dss.vector.solutions.synchronization;

import com.terraframe.mojo.generation.loader.Reloadable;
import com.terraframe.mojo.query.QueryFactory;
import com.terraframe.mojo.query.ViewQueryBuilder;
import com.terraframe.mojo.query.OrderBy.SortOrder;
import com.terraframe.mojo.system.transaction.TransactionItemQuery;

/**
 *
 * @author Autogenerated by TerraFrame
 */
public class TransactionItemViewQuery extends dss.vector.solutions.synchronization.TransactionItemViewQueryBase  implements Reloadable
{
  private static final long serialVersionUID = 1648474451;
  
  private String recordID;
  
  private String sortAttribute;
  
  private SortOrder sortOrder;
  
  private Integer pageSize;
  
  private Integer pageNumber;
  
  private TransactionItemQuery transactionItemQuery;

  public TransactionItemViewQuery(QueryFactory queryFactory, String recordID)
  {
    this(queryFactory, recordID, "", true, 20, 1);
  }
  
  public TransactionItemViewQuery(QueryFactory queryFactory, String recordId, String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    super(queryFactory);

    this.recordID = recordId;
    this.sortAttribute = sortAttribute;
    this.sortOrder = ascending==null ? null : ascending ? SortOrder.ASC : SortOrder.DESC;
    this.pageSize = pageSize;
    this.pageNumber = pageNumber;
    
    transactionItemQuery = new TransactionItemQuery(queryFactory);
    this.buildQuery(new DefaultTransactionItemViewBuilder(queryFactory));
  }

  public TransactionItemViewQuery(QueryFactory queryFactory, ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultTransactionItemViewBuilder extends ViewQueryBuilder implements Reloadable
  {
    public DefaultTransactionItemViewBuilder(QueryFactory queryFactory)
    {
      super(queryFactory);
    }

    protected TransactionItemViewQuery getViewQuery()
    {
      return (TransactionItemViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      TransactionItemViewQuery vQuery = this.getViewQuery();
      
      vQuery.map(TransactionItemView.ITEMID, transactionItemQuery.getId());
      vQuery.map(TransactionItemView.COMPONENTID, transactionItemQuery.getComponentId());
      vQuery.map(TransactionItemView.ACTIONLABEL, transactionItemQuery.getItemAction().getDisplayLabel().localize());
      vQuery.map(TransactionItemView.COMPONENTSEQ, transactionItemQuery.getComponentSeq());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      TransactionItemViewQuery vQuery = this.getViewQuery();
      
      transactionItemQuery.WHERE(transactionItemQuery.getTransactionRecord().getId().EQ(recordID));
      
      if (sortAttribute!=null)
      {
        if (sortAttribute.equals(TransactionItemView.COMPONENTID)) vQuery.ORDER_BY(getComponentId(), sortOrder);
        if (sortAttribute.equals(TransactionItemView.ACTIONLABEL)) vQuery.ORDER_BY(getActionLabel(), sortOrder);
        if (sortAttribute.equals(TransactionItemView.COMPONENTSEQ)) vQuery.ORDER_BY(getComponentSeq(), sortOrder);
      }

      if(pageSize == null || pageNumber == null)
      {
        pageSize = 20;
        pageNumber = 1;
      }
      vQuery.restrictRows(pageSize, pageNumber);
    }

  }
}
