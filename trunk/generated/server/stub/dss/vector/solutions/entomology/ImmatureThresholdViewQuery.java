package dss.vector.solutions.entomology;

import dss.vector.solutions.general.Disease;

/**
 *
 * @author Autogenerated by RunwaySDK
 */
public class ImmatureThresholdViewQuery extends dss.vector.solutions.entomology.ImmatureThresholdViewQueryBase  implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = -112604093;

  public ImmatureThresholdViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultImmatureThresholdViewBuilder(queryFactory));
  }

  public ImmatureThresholdViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultImmatureThresholdViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    private ImmatureThresholdQuery query;
    
    public DefaultImmatureThresholdViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
      
      this.query = new ImmatureThresholdQuery(queryFactory);
    }

    protected ImmatureThresholdViewQuery getViewQuery()
    {
      return (ImmatureThresholdViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      ImmatureThresholdViewQuery vQuery = this.getViewQuery();
      
      vQuery.map(ImmatureThresholdView.CONCRETEID, query.getId());
      vQuery.map(ImmatureThresholdView.THRESHOLDINDEX, query.getThresholdIndex());
      vQuery.map(ImmatureThresholdView.DISPLAYLABEL, query.getDisplayLabel());
      vQuery.map(ImmatureThresholdView.THRESHOLDVALUE, query.getThresholdValue());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      ImmatureThresholdViewQuery vQuery = this.getViewQuery();
      
      vQuery.WHERE(query.getDisease().EQ(Disease.getCurrent()));
    }

  }
}
