/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.entomology;

@com.runwaysdk.business.ClassSignature(hash = 1306276107)
/**
 *
 * @author Autogenerated by TerraFrame
 */
public class PooledInfectionAssayViewQuery extends dss.vector.solutions.entomology.PooledInfectionAssayViewQueryBase implements com.runwaysdk.generation.loader.Reloadable
{
  private static final long serialVersionUID = 1306276107;

  public PooledInfectionAssayViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultPooledInfectionAssayViewBuilder(queryFactory));
  }

  public PooledInfectionAssayViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultPooledInfectionAssayViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    private PooledInfectionAssayQuery query;

    public DefaultPooledInfectionAssayViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);

      query = new PooledInfectionAssayQuery(queryFactory);
    }

    protected PooledInfectionAssayViewQuery getViewQuery()
    {
      return (PooledInfectionAssayViewQuery) super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      PooledInfectionAssayViewQuery vQuery = this.getViewQuery();

      vQuery.map(PooledInfectionAssayView.UNIQUEASSAYID, query.getUniqueAssayId());
      vQuery.map(PooledInfectionAssayView.CONCRETEID, query.getId());
      vQuery.map(PooledInfectionAssayView.COLLECTION, query.getCollection());
      vQuery.map(PooledInfectionAssayView.IDENTMETHOD, query.getIdentMethod());
      vQuery.map(PooledInfectionAssayView.INFECTED, query.getInfected());
      vQuery.map(PooledInfectionAssayView.POOLID, query.getPoolId());
      vQuery.map(PooledInfectionAssayView.NUMBERPOSITIVE, query.getNumberPositive());
      vQuery.map(PooledInfectionAssayView.MOSQUITOSTESTED, query.getMosquitosTested());
      vQuery.map(PooledInfectionAssayView.POOLSTESTED, query.getPoolsTested());
      vQuery.map(PooledInfectionAssayView.PARASITE, query.getParasite());
      vQuery.map(PooledInfectionAssayView.SEX, query.getSex());
      vQuery.map(PooledInfectionAssayView.SPECIES, query.getSpecies());
      vQuery.map(PooledInfectionAssayView.TESTMETHOD, query.getTestMethod());
      vQuery.map(PooledInfectionAssayView.DISEASE, query.getDisease());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {

    }

  }
}
