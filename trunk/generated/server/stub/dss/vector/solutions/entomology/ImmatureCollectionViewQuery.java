package dss.vector.solutions.entomology;

import com.runwaysdk.generation.loader.Reloadable;
import com.runwaysdk.query.AND;
import com.runwaysdk.query.Condition;
import com.runwaysdk.query.QueryFactory;

import dss.vector.solutions.geo.AllPathsQuery;

/**
 * 
 * @author Autogenerated by RunwaySDK
 */
public class ImmatureCollectionViewQuery extends dss.vector.solutions.entomology.ImmatureCollectionViewQueryBase implements com.runwaysdk.generation.loader.Reloadable
{
  private static final long serialVersionUID = -581485318;

  public ImmatureCollectionViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultImmatureCollectionViewBuilder(queryFactory));
  }

  public ImmatureCollectionViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  static class DefaultImmatureCollectionViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    private ImmatureCollectionQuery collectionQuery;

    private CollectionPremiseQuery  premiseQuery;

    private PremiseTaxonQuery       taxonQuery;

    public DefaultImmatureCollectionViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);

      collectionQuery = new ImmatureCollectionQuery(queryFactory);
      premiseQuery = new CollectionPremiseQuery(queryFactory);
      taxonQuery = new PremiseTaxonQuery(queryFactory);
    }

    protected ImmatureCollectionViewQuery getViewQuery()
    {
      return (ImmatureCollectionViewQuery) super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      ImmatureCollectionViewQuery vQuery = this.getViewQuery();

      vQuery.map(ImmatureCollectionView.CONCRETEID, collectionQuery.getId());
      vQuery.map(ImmatureCollectionView.GEOENTITY, collectionQuery.getGeoEntity());
      vQuery.map(ImmatureCollectionView.STARTDATE, collectionQuery.getStartDate());
      vQuery.map(ImmatureCollectionView.ENDDATE, collectionQuery.getEndDate());
      vQuery.map(ImmatureCollectionView.COLLECTIONID, collectionQuery.getCollectionId());
      vQuery.map(ImmatureCollectionView.NOTES, collectionQuery.getNotes());
      vQuery.map(ImmatureCollectionView.PREMISEID, premiseQuery.getId());
      vQuery.map(ImmatureCollectionView.PREMISETYPE, premiseQuery.getPremiseType());
      vQuery.map(ImmatureCollectionView.NUMBEREXAMINED, premiseQuery.getNumberExamined());
      vQuery.map(ImmatureCollectionView.PREMISESIZE, premiseQuery.getPremiseSize());
      vQuery.map(ImmatureCollectionView.NUMBERINHABITANTS, premiseQuery.getNumberInhabitants());
      vQuery.map(ImmatureCollectionView.TAXONID, taxonQuery.getId());
      vQuery.map(ImmatureCollectionView.TAXON, taxonQuery.getTaxon());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      ImmatureCollectionViewQuery vQuery = this.getViewQuery();
      vQuery.WHERE(collectionQuery.getId().EQ(premiseQuery.getCollection().getId()));
      vQuery.AND(premiseQuery.getId().EQ(taxonQuery.getPremise().getId()));
    }
  }

  private static class SearchQueryBuilder extends DefaultImmatureCollectionViewBuilder implements Reloadable
  {
    private ImmatureCollectionView                      view;

    private Condition                                   condition;

    private AllPathsQuery                               geoPathsQuery;

    private dss.vector.solutions.ontology.AllPathsQuery ontologyPathsQuery;

    protected SearchQueryBuilder(QueryFactory queryFactory, ImmatureCollectionView view)
    {
      super(queryFactory);

      this.view = view;
      this.geoPathsQuery = new AllPathsQuery(queryFactory);
      this.ontologyPathsQuery = new dss.vector.solutions.ontology.AllPathsQuery(queryFactory);
      this.condition = null;
    }

    @Override
    protected void buildWhereClause()
    {
      super.buildWhereClause();

      ImmatureCollectionViewQuery vQuery = this.getViewQuery();

      if (view.getGeoEntity() != null)
      {
        this.geoPathsQuery.WHERE(this.geoPathsQuery.getParentGeoEntity().EQ(view.getGeoEntity()));

        this.addCondition(vQuery.getGeoEntity().EQ(this.geoPathsQuery.getChildGeoEntity()));
      }

      if (view.getStartDate() != null)
      {
        this.addCondition(vQuery.getStartDate().GE(view.getStartDate()));
      }

      if (view.getEndDate() != null)
      {
        this.addCondition(vQuery.getEndDate().LE(view.getEndDate()));
      }

      if (view.getCollectionId() != null && !view.getCollectionId().equals(""))
      {
        this.addCondition(vQuery.getCollectionId().EQi(view.getCollectionId()));
      }

      if (view.getPremiseType() != null)
      {
        this.addCondition(vQuery.getPremiseType().EQ(view.getPremiseType()));
      }

      if (view.getTaxon() != null)
      {
        this.ontologyPathsQuery.WHERE(this.ontologyPathsQuery.getParentTerm().EQ(view.getTaxon()));

        this.addCondition(vQuery.getTaxon().EQ(this.ontologyPathsQuery.getChildTerm()));
      }

      if (condition != null)
      {
        vQuery.WHERE(condition);
      }
    }

    private void addCondition(Condition newCondition)
    {
      if (condition == null)
      {
        condition = newCondition;
      }
      else
      {
        condition = AND.get(condition, newCondition);
      }
    }
  }

  public static ImmatureCollectionViewQuery searchCollections()
  {
    ImmatureCollectionViewQuery query = new ImmatureCollectionViewQuery(new QueryFactory());
    query.restrictRows(15, 1);

    return query;
  }

  public static ImmatureCollectionViewQuery searchCollections(ImmatureCollectionView collection)
  {
    QueryFactory factory = new QueryFactory();
    SearchQueryBuilder builder = new SearchQueryBuilder(factory, collection);

    ImmatureCollectionViewQuery query = new ImmatureCollectionViewQuery(factory, builder);
    query.restrictRows(15, 1);

    return query;
  }
}
