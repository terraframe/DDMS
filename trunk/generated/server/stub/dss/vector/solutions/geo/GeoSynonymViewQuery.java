package dss.vector.solutions.geo;

import com.runwaysdk.query.ViewQueryBuilder;

/**
 *
 * @author Autogenerated by RunwaySDK
 */
public class GeoSynonymViewQuery extends dss.vector.solutions.geo.GeoSynonymViewQueryBase  implements com.runwaysdk.generation.loader.Reloadable
{
  public GeoSynonymViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultGeoSynonymViewBuilder(queryFactory));
  }
  
  public GeoSynonymViewQuery(com.runwaysdk.query.QueryFactory queryFactory, GeoSynonymView view)
  {
    super(queryFactory);
    this.buildQuery(new DefaultGeoSynonymViewBuilder(queryFactory));
  }

  public GeoSynonymViewQuery(com.runwaysdk.query.QueryFactory queryFactory, ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultGeoSynonymViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    public DefaultGeoSynonymViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
    }

    protected GeoSynonymViewQuery getViewQuery()
    {
      return (GeoSynonymViewQuery)super.getViewQuery();
    }
    
    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      throw new UnsupportedOperationException();
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
     
    }
  }
}
