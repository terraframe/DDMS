package dss.vector.solutions.form;

import com.runwaysdk.generation.loader.Reloadable;
import com.runwaysdk.query.F;
import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.ViewQueryBuilder;
import com.runwaysdk.system.metadata.MdBusiness;
import com.runwaysdk.system.metadata.MdTypeQuery;
import com.runwaysdk.system.metadata.MdWebBoolean;
import com.runwaysdk.system.metadata.MdWebBreak;
import com.runwaysdk.system.metadata.MdWebCharacter;
import com.runwaysdk.system.metadata.MdWebComment;
import com.runwaysdk.system.metadata.MdWebDate;
import com.runwaysdk.system.metadata.MdWebDecimal;
import com.runwaysdk.system.metadata.MdWebDouble;
import com.runwaysdk.system.metadata.MdWebFloat;
import com.runwaysdk.system.metadata.MdWebGeo;
import com.runwaysdk.system.metadata.MdWebHeader;
import com.runwaysdk.system.metadata.MdWebInteger;
import com.runwaysdk.system.metadata.MdWebLong;
import com.runwaysdk.system.metadata.MdWebMultipleTerm;
import com.runwaysdk.system.metadata.MdWebSingleTerm;
import com.runwaysdk.system.metadata.MdWebSingleTermGrid;
import com.runwaysdk.system.metadata.MdWebText;

import dss.vector.solutions.generator.MdWebIndicator;

/**
 * 
 * @author Autogenerated by RunwaySDK
 */
public class MdFieldTypeQuery extends dss.vector.solutions.form.MdFieldTypeQueryBase implements Reloadable
{
  private static final long serialVersionUID = 1649662279;

  public MdFieldTypeQuery(QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultMdFieldTypeBuilder(queryFactory));
  }

  public MdFieldTypeQuery(QueryFactory queryFactory, ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  public static class DefaultMdFieldTypeBuilder extends ViewQueryBuilder implements Reloadable
  {
    protected MdTypeQuery mdTypeQuery;

    public DefaultMdFieldTypeBuilder(QueryFactory queryFactory)
    {
      super(queryFactory);

      this.mdTypeQuery = new MdTypeQuery(queryFactory);
    }

    protected MdFieldTypeQuery getViewQuery()
    {
      return (MdFieldTypeQuery) super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      MdFieldTypeQuery query = this.getViewQuery();
      query.map(MdFieldType.MDFIELDID, mdTypeQuery.getId("mdFieldId"));
      query.map(MdFieldType.DISPLAYLABEL, mdTypeQuery.getDisplayLabel().localize("displayLabel"));
      query.map(MdFieldType.DESCRIPTION, mdTypeQuery.getDescription().localize("description"));
      query.map(MdFieldType.MDFIELDTYPE, F.CONCAT(mdTypeQuery.getPackageName(), F.CONCAT(".", mdTypeQuery.getTypeName())));
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      MdFieldTypeQuery query = this.getViewQuery();

      MdBusiness mdWebIndicator = MdBusiness.getMdBusiness(MdWebIndicator.CLASS);
      
      String[] mdFieldIds = new String[] { MdBusiness.getMdBusiness(MdWebBoolean.CLASS).getId(), MdBusiness.getMdBusiness(MdWebCharacter.CLASS).getId(), MdBusiness.getMdBusiness(MdWebText.CLASS).getId(), MdBusiness.getMdBusiness(MdWebInteger.CLASS).getId(), MdBusiness.getMdBusiness(MdWebLong.CLASS).getId(), MdBusiness.getMdBusiness(MdWebDouble.CLASS).getId(), MdBusiness.getMdBusiness(MdWebDecimal.CLASS).getId(), MdBusiness.getMdBusiness(MdWebFloat.CLASS).getId(),
          MdBusiness.getMdBusiness(MdWebDate.CLASS).getId(), MdBusiness.getMdBusiness(MdWebBreak.CLASS).getId(), MdBusiness.getMdBusiness(MdWebHeader.CLASS).getId(), MdBusiness.getMdBusiness(MdWebComment.CLASS).getId(), MdBusiness.getMdBusiness(MdWebSingleTerm.CLASS).getId(), MdBusiness.getMdBusiness(MdWebMultipleTerm.CLASS).getId(), MdBusiness.getMdBusiness(MdWebGeo.CLASS).getId(),
          MdBusiness.getMdBusiness(MdWebSingleTermGrid.CLASS).getId(), mdWebIndicator.getId()};

      query.WHERE(mdTypeQuery.getId().IN(mdFieldIds));

      query.ORDER_BY_ASC(mdTypeQuery.getDisplayLabel().localize("displayLabel"));
    }
  }

  public static class CompositeMdFieldTypeBuilder extends DefaultMdFieldTypeBuilder implements Reloadable
  {
    public CompositeMdFieldTypeBuilder(QueryFactory queryFactory)
    {
      super(queryFactory);
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      MdFieldTypeQuery query = this.getViewQuery();

      String[] mdFieldIds = new String[] { MdBusiness.getMdBusiness(MdWebBoolean.CLASS).getId(), MdBusiness.getMdBusiness(MdWebInteger.CLASS).getId(), MdBusiness.getMdBusiness(MdWebLong.CLASS).getId(), MdBusiness.getMdBusiness(MdWebDouble.CLASS).getId(), MdBusiness.getMdBusiness(MdWebDecimal.CLASS).getId(), MdBusiness.getMdBusiness(MdWebFloat.CLASS).getId() };

      query.WHERE(mdTypeQuery.getId().IN(mdFieldIds));

      query.ORDER_BY_ASC(mdTypeQuery.getDisplayLabel().localize("displayLabel"));
    }
  }
}
