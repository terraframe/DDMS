/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions;

import com.runwaysdk.business.rbac.RoleDAOIF;
import com.runwaysdk.generation.loader.Reloadable;
import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.ViewQueryBuilder;
import com.runwaysdk.system.AssignmentsQuery;

/**
 * 
 * @author Autogenerated by TerraFrame
 */
public class MDSSUserViewQuery extends MDSSUserViewQueryBase implements Reloadable
{
  private static final long serialVersionUID = 1242427875693L;

  public MDSSUserViewQuery(QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultMDSSUserViewBuilder(queryFactory));
  }

  public MDSSUserViewQuery(QueryFactory queryFactory, ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  static class DefaultMDSSUserViewBuilder extends ViewQueryBuilder implements Reloadable
  {
    protected PersonQuery   personQuery;

    protected MDSSUserQuery userQuery;

    public DefaultMDSSUserViewBuilder(QueryFactory queryFactory)
    {
      super(queryFactory);

      this.personQuery = new PersonQuery(queryFactory);
      this.userQuery = new MDSSUserQuery(queryFactory);
    }

    protected MDSSUserViewQuery getViewQuery()
    {
      return (MDSSUserViewQuery) super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      MDSSUserViewQuery vQuery = this.getViewQuery();

      vQuery.map(MDSSUserView.FIRSTNAME, personQuery.getFirstName());
      vQuery.map(MDSSUserView.LASTNAME, personQuery.getLastName());
      vQuery.map(MDSSUserView.PERSONID, personQuery.getId());
      vQuery.map(MDSSUserView.USERNAME, userQuery.getUsername());
      vQuery.map(MDSSUserView.USERID, userQuery.getId());

      // IMPORTANT: The roles attribute is a marker to assign permissions and
      // ontology roots. However it is a required value, and as such it needs
      // a value to work with the query api. Therefore, fill in a random value
      // knowing it will never be used.
      vQuery.map(MDSSUserView.ROLES, userQuery.getId());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      MDSSUserViewQuery vQuery = this.getViewQuery();

      vQuery.WHERE(userQuery.getPerson().EQ(personQuery));
    }
  }

  static class NonAdminUserViewBuilder extends DefaultMDSSUserViewBuilder implements Reloadable
  {
    protected AssignmentsQuery assignmentQuery;

    public NonAdminUserViewBuilder(QueryFactory queryFactory)
    {
      super(queryFactory);

      this.assignmentQuery = new AssignmentsQuery(queryFactory);
    }

    @Override
    protected void buildWhereClause()
    {
      MDSSUserViewQuery vQuery = this.getViewQuery();
            
      assignmentQuery.WHERE(assignmentQuery.childId().EQ(RoleDAOIF.ADMIN_ROLE_ID));
      
      vQuery.WHERE(userQuery.getPerson().EQ(personQuery));
      vQuery.AND(userQuery.SUBSELECT_NOT_IN_assignedRole(assignmentQuery));
    }

  }
}
