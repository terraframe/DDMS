package dss.vector.solutions.ontology;

import com.runwaysdk.generation.loader.Reloadable;
import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.ViewQueryBuilder;
import com.runwaysdk.system.metadata.MdAttributeQuery;

import dss.vector.solutions.general.Disease;

/**
 *
 * @author Autogenerated by TerraFrame
 */
public class BrowserRootViewQuery extends dss.vector.solutions.ontology.BrowserRootViewQueryBase  implements Reloadable
{
private static final long serialVersionUID = 1252959712966L;

  public BrowserRootViewQuery(QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultBrowserRootViewBuilder(queryFactory));
  }

  public BrowserRootViewQuery(QueryFactory queryFactory, ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  public class DefaultBrowserRootViewBuilder extends ViewQueryBuilder implements Reloadable
  {
    private BrowserRootQuery browserRootQuery;
    private TermQuery termQuery;
    private MdAttributeQuery mdAttributeQuery;
    private BrowserFieldQuery browserFieldQuery;

    public DefaultBrowserRootViewBuilder(QueryFactory queryFactory)
    {
      super(queryFactory);

      this.browserRootQuery = new BrowserRootQuery(queryFactory);
      this.termQuery = new TermQuery(queryFactory);
      this.mdAttributeQuery = new MdAttributeQuery(queryFactory);
      this.browserFieldQuery = new BrowserFieldQuery(queryFactory);
    }

    protected BrowserRootViewQuery getViewQuery()
    {
      return (BrowserRootViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      BrowserRootViewQuery query = this.getViewQuery();

      // Add all to FROM to avoid cross-product
      query.valueQuery.FROM(this.browserRootQuery);
      query.valueQuery.FROM(this.termQuery);
      query.valueQuery.FROM(this.mdAttributeQuery);
      query.valueQuery.FROM(this.browserFieldQuery);

      query.map(BrowserRootView.BROWSERROOTID, this.browserRootQuery.getId());
      query.map(BrowserRootView.TERMID, this.termQuery.getId());
//      query.map(BrowserRootView.TERMNAME, this.termQuery.getName());
      query.map(BrowserRootView.TERMNAME, this.termQuery.getTermDisplayLabel().localize());
      query.map(BrowserRootView.TERMONTOLOGYID, this.termQuery.getTermId());
      query.map(BrowserRootView.SELECTABLE, this.browserRootQuery.getSelectable());
      query.map(BrowserRootView.MDATTRIBUTEID, this.mdAttributeQuery.getId());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      BrowserRootViewQuery query = this.getViewQuery();

      query.WHERE(this.browserRootQuery.getTerm().EQ(this.termQuery));
      query.AND(this.browserRootQuery.getDisease().EQ(Disease.getCurrent()));
      query.AND(this.browserRootQuery.field(this.browserFieldQuery));
      query.AND(this.browserFieldQuery.getMdAttribute().EQ(this.mdAttributeQuery));
    }
  }
  
  public static class BrowserRootViewBuilder extends ViewQueryBuilder implements Reloadable
  {
    private BrowserRootQuery browserRootQuery;
    private TermQuery termQuery;
    private BrowserFieldQuery browserFieldQuery;
    private BrowserField field;

    public BrowserRootViewBuilder(QueryFactory queryFactory, BrowserField field)
    {
      super(queryFactory);

      this.field = field;
      this.browserRootQuery = new BrowserRootQuery(queryFactory);
      this.termQuery = new TermQuery(queryFactory);
      this.browserFieldQuery = new BrowserFieldQuery(queryFactory);
    }

    protected BrowserRootViewQuery getViewQuery()
    {
      return (BrowserRootViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      BrowserRootViewQuery query = this.getViewQuery();

      // Add all to FROM to avoid cross-product
      query.valueQuery.FROM(this.browserRootQuery);
      query.valueQuery.FROM(this.termQuery);
      query.valueQuery.FROM(this.browserFieldQuery);

      query.map(BrowserRootView.BROWSERROOTID, this.browserRootQuery.getId());
      query.map(BrowserRootView.TERMID, this.termQuery.getId());
      query.map(BrowserRootView.TERMNAME, this.termQuery.getTermDisplayLabel().localize());
      query.map(BrowserRootView.TERMONTOLOGYID, this.termQuery.getTermId());
      query.map(BrowserRootView.SELECTABLE, this.browserRootQuery.getSelectable());
      query.map(BrowserRootView.MDATTRIBUTEID, this.browserFieldQuery.getMdAttribute());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
      BrowserRootViewQuery query = this.getViewQuery();

      query.WHERE(this.browserRootQuery.getTerm().EQ(this.termQuery));
      query.AND(this.browserRootQuery.getDisease().EQ(Disease.getCurrent()));
      query.AND(this.browserRootQuery.field(this.browserFieldQuery));
      query.AND(this.browserFieldQuery.getId().EQ(field.getId()));
    }
  }
  
  public static BrowserRootViewQuery getRootsFromField(BrowserField field)
  {
    QueryFactory factory = new QueryFactory();

    BrowserRootViewBuilder builder = new BrowserRootViewBuilder(factory, field);
    
    return new BrowserRootViewQuery(factory, builder);
  }

}
