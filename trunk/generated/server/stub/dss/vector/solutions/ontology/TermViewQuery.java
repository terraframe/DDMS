package dss.vector.solutions.ontology;

import com.runwaysdk.generation.loader.Reloadable;
import com.runwaysdk.query.GeneratedViewQuery;
import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.SelectableSQLInteger;
import com.runwaysdk.query.ValueQuery;
import com.runwaysdk.query.ViewQueryBuilder;
import com.runwaysdk.query.OrderBy.SortOrder;

import dss.vector.solutions.general.Disease;

/**
 *
 * @author Autogenerated by TerraFrame
 */
public class TermViewQuery extends dss.vector.solutions.ontology.TermViewQueryBase  implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = 1253134809484L;

  public TermViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultTermViewBuilder(queryFactory));
  }

  public TermViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultTermViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    public DefaultTermViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
    }

    protected TermViewQuery getViewQuery()
    {
      return (TermViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      String errMsg = "buildSelectClause() method in class DefaultTermViewBuilder needs to be overwritten.";
      throw new com.runwaysdk.query.QueryException(errMsg);
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {

    }

  }
  
  /**
   * Query builder to fetch all parent terms for a given child.
   */
  public static class GetParentsQueryBuilder extends ViewQueryBuilder implements Reloadable
  {
    private Term                  child;

    private TermQuery             termQuery;

    private TermRelationshipQuery termRelQuery;

    private Boolean               filterObsolete;

    private InactivePropertyQuery inactivePropQuery;

    protected GetParentsQueryBuilder(QueryFactory queryFactory, Term child, Boolean filterObsolete)
    {
      super(queryFactory);

      this.child = child;
      this.termQuery = new TermQuery(queryFactory);
      this.termRelQuery = new TermRelationshipQuery(queryFactory);
      this.filterObsolete = filterObsolete;
      this.inactivePropQuery = new InactivePropertyQuery(queryFactory);
    }

    @Override
    protected void buildSelectClause()
    {
      GeneratedViewQuery query = this.getViewQuery();

      query.map(TermView.TERMID, termQuery.getId());
      query.map(TermView.TERMNAME, termQuery.getTermDisplayLabel().localize());
      query.map(TermView.TERMONTOLOGYID, termQuery.getTermId());
      query.map(TermView.INACTIVE, this.inactivePropQuery.getInactive());
    }

    @Override
    protected void buildWhereClause()
    {
      GeneratedViewQuery query = this.getViewQuery();

      query.WHERE(this.termRelQuery.childId().EQ(this.child.getId()));
      query.AND(termQuery.childTerm(this.termRelQuery));

      Disease disease = Disease.getCurrent();

      if (this.filterObsolete)
      {
        this.inactivePropQuery.AND(this.inactivePropQuery.getInactive().EQ(false));

      }

      this.inactivePropQuery.AND(this.inactivePropQuery.getDisease().EQ(disease));

      query.AND(termQuery.inactiveProperties(this.inactivePropQuery));

      // query.ORDER_BY_ASC(this.termQuery.getName());
      query.ORDER_BY_ASC(this.termQuery.getTermDisplayLabel().localize());
    }

  }
  
  /**
   * Query builder to fetch all parent terms for a given child.
   */
  public static class AncestorsQueryBuilder extends ViewQueryBuilder implements Reloadable
  {
    private Term                  child;

    private TermQuery             termQuery;

    private InactivePropertyQuery inactivePropQuery;
    
    private AllPathsQuery         apq;
    
    private SelectableSQLInteger  depth;

    protected AncestorsQueryBuilder(QueryFactory queryFactory, Term child)
    {
      super(queryFactory);

      this.child = child;
      this.termQuery = new TermQuery(queryFactory);
      this.inactivePropQuery = new InactivePropertyQuery(queryFactory);
      this.apq = new AllPathsQuery(queryFactory);
    }

    @Override
    protected void buildSelectClause()
    {
      TermViewQuery query = (TermViewQuery) this.getViewQuery();
      ValueQuery vq = query.valueQuery;
      
      query.map(TermView.TERMID, termQuery.getId());
      query.map(TermView.TERMNAME, termQuery.getTermDisplayLabel().localize());
      query.map(TermView.TERMONTOLOGYID, termQuery.getTermId());
      query.map(TermView.INACTIVE, inactivePropQuery.getInactive());
      
      String apq_table_name = apq.getTableAlias();
      String apq_parent_col = apq.getParentTerm().getDbColumnName();
      String depthSQL = "(SELECT count(*) FROM allpaths_ontology WHERE child_term=" + apq_table_name + "." + apq_parent_col + ")";
      depth = vq.aSQLInteger("depth", depthSQL, "depth");
      
      vq.SELECT(depth);
    }

    @Override
    protected void buildWhereClause()
    {
      GeneratedViewQuery query = this.getViewQuery();
      Disease disease = Disease.getCurrent();

      query.WHERE(apq.getParentTerm().EQ(termQuery));
      query.AND(apq.getChildTerm().EQ(child.getId()));
      query.AND(apq.getParentTerm().NE(child.getId()));
//      query.AND(apq.getParentTerm().NE(RootTerm.getRootInstance()));
      query.AND(termQuery.inactiveProperties(inactivePropQuery));
      query.AND(inactivePropQuery.getDisease().EQ(disease));
      
      query.ORDER_BY(depth, SortOrder.ASC);
    }

  }
}
