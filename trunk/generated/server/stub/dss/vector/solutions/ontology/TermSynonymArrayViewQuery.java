/*******************************************************************************
 * Copyright (C) 2018 IVCC
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package dss.vector.solutions.ontology;

import java.util.HashSet;

import com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF;
import com.runwaysdk.dataaccess.MdBusinessDAOIF;
import com.runwaysdk.dataaccess.metadata.MdBusinessDAO;
import com.runwaysdk.query.AND;
import com.runwaysdk.query.Coalesce;
import com.runwaysdk.query.Condition;
import com.runwaysdk.query.Join;
import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.Selectable;
import com.runwaysdk.query.SelectableChar;
import com.runwaysdk.query.SelectableReference;
import com.runwaysdk.query.SelectableSQLCharacter;
import com.runwaysdk.query.ValueQuery;
import com.runwaysdk.system.metadata.MdBusinessQuery;

import dss.vector.solutions.ontology.HasSynonymQuery;
import dss.vector.solutions.ontology.TermQuery.TermQueryReference;

/**
 *
 * @author Autogenerated by RunwaySDK
 */
public class TermSynonymArrayViewQuery extends dss.vector.solutions.ontology.TermSynonymArrayViewQueryBase  implements com.runwaysdk.generation.loader.Reloadable
{

  public TermSynonymArrayViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultTermSynonymArrayViewBuilder(queryFactory));
  }

  public TermSynonymArrayViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultTermSynonymArrayViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
		TermQueryReference term;
		SelectableChar termId;
	    TermSynonymQuery termSynonymQuery;
	    HasSynonymQuery synonymRelQuery;
	    TermQuery termQuery;
	    ValueQuery vq;
	    TermSynonymArrayView view;
	    Condition condition;
	    
	    Coalesce termLabel;
	    Selectable synonymNames;
	    Selectable synonymIds;
		    
	    public DefaultTermSynonymArrayViewBuilder(com.runwaysdk.query.QueryFactory queryFactory, TermSynonymArrayView view)
	    {
	      this(queryFactory);
	      
	      this.view = view;
	    }
	    
	    public DefaultTermSynonymArrayViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
	    {
	      super(queryFactory);
	      
	      termSynonymQuery = new TermSynonymQuery(queryFactory);
	      synonymRelQuery = new HasSynonymQuery(queryFactory);
	      termQuery = new TermQuery(queryFactory);
	      
	      this.condition = null;
	    }

	    protected TermSynonymArrayViewQuery getViewQuery()
	    {
	      return (TermSynonymArrayViewQuery)super.getViewQuery();
	    }

	    /**
	     * build the select clause
	     */
	    protected void buildSelectClause()
	    {
	      TermSynonymArrayViewQuery vQuery = this.getViewQuery();
	      vq = vQuery.valueQuery;
	      
	      final String entity_name = MdBusinessDAO.getMdBusinessDAO(TermSynonym.CLASS).definesAttribute(TermSynonym.TERMNAME).getColumnName();
	      final String id = MdBusinessDAO.getMdBusinessDAO(TermSynonym.CLASS).definesAttribute(TermSynonym.ID).getColumnName();
	     
	      termLabel = termQuery.getTermDisplayLabel().localize();
	      synonymNames = vq.aSQLAggregateCharacter(TermSynonymArrayView.SYNONYMNAMES, "string_agg(" + entity_name + ", ',')", TermSynonymArrayView.SYNONYMNAMES, TermSynonymArrayView.SYNONYMNAMES);
	      synonymIds = vq.aSQLAggregateCharacter(TermSynonymArrayView.SYNONYMIDS, "string_agg(" + termSynonymQuery.getTableAlias() + "." + id + ", ',')", TermSynonymArrayView.SYNONYMIDS, TermSynonymArrayView.SYNONYMIDS);
	      termId = termQuery.getTermId();
	      
	      // Hack: There needs to be a geoEntityQuery.reference() method that will return a GeoEntityQueryReference object built for us. Because this method doesn't exist, we're going to do it manually.
	      SelectableReference ref = synonymRelQuery.getParent();
	      MdAttributeReferenceDAOIF mdAttributeReferenceDAOIF = (MdAttributeReferenceDAOIF) ref.getMdAttributeIF();
	      String definingTableName = termQuery.getMdClassIF().getTableName();
	      String definingTableAlias = termQuery.getTableAlias();
	      MdBusinessDAOIF referenceMdBusinessIF = mdAttributeReferenceDAOIF.getReferenceMdBusinessDAO();
	      String referenceTableName = referenceMdBusinessIF.getTableName();
	      String referenceTableAlias = vq.getQueryFactory().getTableAlias(mdAttributeReferenceDAOIF.definesAttribute(), referenceTableName);
	      term = new TermQueryReference(mdAttributeReferenceDAOIF, mdAttributeReferenceDAOIF.definesAttribute(), definingTableName, definingTableAlias, referenceMdBusinessIF, referenceTableAlias, vq, new HashSet<Join>(), TermSynonymArrayView.TERM, TermSynonymArrayView.TERM);
	      
	      
	      vQuery.map(TermSynonymArrayView.SYNONYMIDS, synonymIds);
	      vQuery.map(TermSynonymArrayView.SYNONYMNAMES, synonymNames);
	      vQuery.map(TermSynonymArrayView.TERMNAME, termLabel);
	      vQuery.map(TermSynonymArrayView.TERMINSTANCEID, termId);
	      vQuery.map(TermSynonymArrayView.TERM, term);
	    
	    }

	    /**
	     * Implement only if additional join criteria is required.
	     */
	    protected void buildWhereClause()
	    {
	      TermSynonymArrayViewQuery vQuery = this.getViewQuery();
	      vq = vQuery.valueQuery;
	      
	      vq.FROM(termSynonymQuery);
	      vq.WHERE(synonymRelQuery.getChild().EQ(termSynonymQuery).AND(synonymRelQuery.getParent().EQ(termQuery)));
	      vq.GROUP_BY(term, termId.getAttribute(), termLabel);
	      
	      if (this.view != null)
	      {
	        if (view.getTerm() != null)
	        {
	          this.addCondition(vQuery.getTerm().EQ(view.getTerm()));
	        }
	        
//	        if (view.getSynonymNames() != null && !view.getSynonymNames().equals(""))
//	        {
//	          String search = "%" + view.getSynonymNames() + "%";
//	          search = search.replace(" ", "% ");
//	          
//	          this.addCondition(vQuery.getSynonymNames().LIKEi(search));
//	        }
	        
	        if (condition != null)
	        {
	          vQuery.WHERE(condition);
	        }
	      }
	    }
	    
	    private void addCondition(Condition newCondition)
	    {
	      if (condition == null)
	      {
	        condition = newCondition;
	      }
	      else
	      {
	        condition = AND.get(condition, newCondition);
	      }
	    }
  }
  
  public static TermSynonymArrayViewQuery search(TermSynonymArrayView view)
  {
    TermSynonymArrayViewQuery query;
    
    if (view == null)
    {
      query = new TermSynonymArrayViewQuery(new QueryFactory());
    }
    else
    {
      query = new TermSynonymArrayViewQuery(new QueryFactory(), view);
    }
    
    query.restrictRows(15, 1);

    return query;
  }
  
  public TermSynonymArrayViewQuery(com.runwaysdk.query.QueryFactory queryFactory, TermSynonymArrayView view)
  {
    super(queryFactory);
    this.buildQuery(new DefaultTermSynonymArrayViewBuilder(queryFactory, view));
  }
  
  public Selectable getSelectableRef(String attributeAlias)
  {
    return valueQuery.getSelectableRef(attributeAlias);
  }
}
