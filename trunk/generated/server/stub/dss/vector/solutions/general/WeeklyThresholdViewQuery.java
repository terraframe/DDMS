package dss.vector.solutions.general;

import com.runwaysdk.query.GeneratedViewQuery;

/**
 *
 * @author Autogenerated by TerraFrame
 */
public class WeeklyThresholdViewQuery extends dss.vector.solutions.general.WeeklyThresholdViewQueryBase  implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = -461675369;

  public WeeklyThresholdViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultWeeklyThresholdViewBuilder(queryFactory));
  }

  public WeeklyThresholdViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultWeeklyThresholdViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    private ThresholdDataQuery thresholdQuery;
    private EpiWeekQuery epiWeekQuery;
    private WeeklyThresholdQuery query;
    
    public DefaultWeeklyThresholdViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
      
      thresholdQuery = new ThresholdDataQuery(queryFactory);
      epiWeekQuery = new EpiWeekQuery(queryFactory);
      query = new WeeklyThresholdQuery(queryFactory);
    }

    protected WeeklyThresholdViewQuery getViewQuery()
    {
      return (WeeklyThresholdViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      WeeklyThresholdViewQuery vQuery = this.getViewQuery();
      
      vQuery.map(ThresholdData.GEOENTITY, thresholdQuery.getGeoEntity());
      vQuery.map(EpiWeek.PERIOD, epiWeekQuery.getPeriod());
      vQuery.map(EpiWeek.YEAROFWEEK, epiWeekQuery.getYearOfWeek());
      vQuery.map(WeeklyThreshold.IDENTIFICATION, query.getIdentification());
      vQuery.map(WeeklyThreshold.NOTIFICATION, query.getNotification());
      vQuery.map(WeeklyThreshold.IDENTIFICATION, query.getIdentification());
      vQuery.map(WeeklyThreshold.FACILITYNOTIFICATION, query.getFacilityNotification());
      vQuery.map(WeeklyThreshold.FACILITYIDENTIFICATION, query.getFacilityIdentification());
      vQuery.map(WeeklyThreshold.LASTNOTIFICATION, query.getLastNotification());
      vQuery.map(WeeklyThreshold.LASTIDENTIFICATION, query.getLastIdentification());
      vQuery.map(WeeklyThreshold.LASTFACILITYNOTIFICATION, query.getLastFacilityNotification());
      vQuery.map(WeeklyThreshold.LASTFACILITYIDENTIFICATION, query.getLastFacilityIdentification());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {      
      GeneratedViewQuery vQuery = this.getViewQuery();

      vQuery.WHERE(thresholdQuery.getId().EQ(query.parentId()));
      vQuery.AND(epiWeekQuery.getId().EQ(query.childId()));
    }

  }
}
