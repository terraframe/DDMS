<!--SET THESE THINGS IN GEOSERVER
  <parameter value = "mdss_zambia" name = "user" />
  <parameter value = "mdss_zambia" name = "passwd" />
  <parameter value = "mdss_zambia" name = "database" />
  <propertyfile file="${stage.classes}/local.properties">
    <entry key="environment" value="deploy" />
    <entry key="web.dir" value="${deploy.path}/webDir/" />
  </propertyfile>

  # Database dump executabledataDumpExecutable=pg_dump
  # Database import executabledataImportExecutable=pg_restore        \        export_credentials_singleton    export_tomcat_classloader   
  <target name="import_geodata" />
  <target name="compile_generated"/>
-->
<project name="MDSS" default="build" basedir=".">
  <property name="project.root" location="C:/cruisecontrol-bin-2.8.3/projects/mdss" />
  <property name="local.root" location="../trunk" />
  <property name="country" value="blank" />
  <property name="geodata.db" value="mrc_${country}" />
  <property name="deploy.db" value="mdssdeploy" />
  <property name="develop.db" value="mdssdevelop" />
  <property name="nsis.dir" location="C:/Program Files (x86)/NSIS" />
  <property name="postgres.bin" location="C:/Program Files (x86)/PostgreSQL/8.4/bin"/>
  <property name="profile.root" location="${local.root}/profiles" />
  <property name="install.dir" location="../installer-windows" />
  <property name="stage.dir" location="." />
  <property name="stage.webapp" location = "./webapp"/>
  <property name="stage.classes" location = "${stage.webapp}/WEB-INF/classes"/>
  <property name="root.user" value="postgres" />
  <property name="root.pass" value="postgres" />
  <property name="root.db" value="template_postgis" />
  <property name="max_memory_use" value="1024m" />
  <property name="domain" value="0.mdss.ivcc.com" />
  <property name="deploy.root" location="${stage.dir}/tomcat6" />
  <property name="manager.dest" location="${stage.dir}/manager" />
  <property name="manager.dest.lib" location="${manager.dest}/lib" />
  <property name="manager.dest.bin" location="${manager.dest}/bin" />  
  <property name="manager.dest.profiles" location="${manager.dest}/profiles" />  
  <property name="manager.source" location="../standalone" />
  <property name="manager.source.lib" location="${manager.source}/lib" />
  <property name="manager.source.profiles" location="${manager.source}/profiles" />    
  <property name="manager.src" location="${manager.source}/src" />
  
  <!-- SVN task definitions -->
  <taskdef resource="org/tigris/subversion/svnant/svnantlib.xml">
    <classpath>
    <fileset dir="${local.root}/lib/ant">
      <include name="svnant.jar" />
      <include name="svnClientAdapter.jar" />
      <include name="svnkit.jar" />
      <include name="svnjavahl.jar" />
      <include name="ganymed.jar" />
    </fileset>
  </classpath>
  </taskdef>
  
  <!-- ANT Contrib task defitions -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="C:/cruisecontrol-bin-2.8.3/lib/ant-contrib-1.0b3.jar" />
  
  <!-- AspectJ task definitions -->
  <taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
    <classpath>
      <fileset dir="${local.root}/lib">
        <include name="**/*.jar" />
      </fileset>
    </classpath>
  </taskdef>
  
  <path id="manager.classpath">
    <fileset dir="${manager.source.lib}">
      <include name="**/*.jar" />
    </fileset>
  </path>


  <target name="testes">
  <ant inheritall="false" antfile="deploy.xml" dir="${local.root}/scripts/ant/deploy">
      <property name="root.user" value="${root.user}" />
      <property name="root.pass" value="${root.pass}" />
      <property name="root.db" value="${root.db}" />
      <property name="geodata.db" value="${geodata.db}" />
      <property name="profile.root" value="${profile.root}" />
      <property name="profile.name" value="installer" />
      <property name="deploy.path" value="${stage.webapp}" />
      <target name="deploy_all_files"/>    
    </ant>
  </target>
  <target name="build">
    <!--
      <antcall target="write_revision" />
    <delete includeemptydirs="true">
        <fileset dir="bin" includes="**/*"/>       
      </delete>
      <delete dir="src/test" />       
    -->
  
    <!--<echo message="Deleting directory: ${stage.webapp}/" /> -->
    <!--<delete dir="${stage.webapp}" />-->
    <propertyfile file="${profile.root}/default/common/terraframe.properties">
      <entry key="local.root" value="${local.root}" />
      <entry key="deploy.root" value="${deploy.root}" />
      <entry key="deploy.appname" value="DDMS" />
      <entry key="domain" value="${domain}" />
    </propertyfile>
    <propertyfile file="${profile.root}/default/server/server.properties">
      <entry key="logTransactions" value="false" />
    </propertyfile>
    <replaceregexp flags="g" byline="true" file="${profile.root}/default/common/terraframe.properties" match='\\\\' replace="/" />
    <replaceregexp flags="g" byline="true" file="${profile.root}/default/common/terraframe.properties" match='\\\:' replace=":" />

    <ant inheritall="false" antfile="deploy.xml" dir="${local.root}/scripts/ant/deploy">
      <property name="profile.root" value="${profile.root}" />
      <property name="profile.name" value="installer" />
      <target name="compile_generated" />
    </ant>

    <antcall target="remove_generated_universals" />
    <antcall target="copy_country_schema" />
  
    <ant inheritall="false" antfile="deploy.xml" dir="${local.root}/scripts/ant/deploy">
      <property name="root.user" value="${root.user}" />
      <property name="root.pass" value="${root.pass}" />
      <property name="root.db" value="${root.db}" />
      <property name="geodata.db" value="${geodata.db}" />
      <property name="profile.root" value="${profile.root}" />
      <property name="profile.name" value="installer" />
      <target name="rebuild_db" /> 
      <target name="rebuild_model" />
      <target name="import_most_recent" />
      <target name="deploy" />
      <target name="deploy_all_files"/>
      <target name="import_ontology" />
      <target name="import_menuitems" />
      <target name="import_ontology_roots" />
      <target name="build_all_paths_ontology" />
      <target name="import_geodata" />
      <target name="build_all_paths_geodata" />
      <target name="create_universal_queries"/>
    </ant>
  
    <!-- Multi-install Localization requires some property manipulation -->
    <copy file="${profile.root}/install.properties" tofile="${profile.root}/install.properties.bak" />
  
    <trycatch property="foo" reference="bar">
      <try>
        <copy file="./install-stage.properties" tofile="${profile.root}/install.properties" />
        <ant inheritall="false" antfile="deploy.xml" dir="${local.root}/scripts/ant/deploy">
          <property name="profile.root" value="${profile.root}" />
          <property name="profile.name" value="installer" />
          <target name="import_localization_disease_defaults"/>
        </ant>
      </try>
      <finally>
        <copy file="${profile.root}/install.properties.bak" tofile="${profile.root}/install.properties" />
        <delete file="${profile.root}/install.properties.bak" />
      </finally>
    </trycatch>

    <!-- We deploy all files after localization because we need to push the updated MDSS.properties files -->  
    <ant inheritall="false" antfile="deploy.xml" dir="${local.root}/scripts/ant/deploy">
      <property name="profile.root" value="${profile.root}" />
      <property name="profile.name" value="installer" />

      <target name="load_permissions"/>    
      <target name="deploy_all_files"/>    
    </ant>
  
    <!-- We need to update the deploy database with the source and class. -->  
    <!-- This is important because on the case of rollback or errors we -->
    <!-- must be able to regenerate the source and classes of the file system. -->
    <antcall target="deploy_update_db_source_and_classes" />  
  
    <antcall target="set_vital_properties" />
    <antcall target="dump_db" />
    <antcall target="build_installer_exe" />
  </target>

  <target name="deploy_update_db_source_and_classes" depends="" description="Update DB Source and Classes">
    <echo message="Updating DB source and classes" />
    <ant inheritall="false" antfile="deploy.xml" dir="${local.root}/scripts/ant/deploy">
      <property name="profile.root" value="${profile.root}" />
      <property name="profile.name" value="installerdeploy" />
      <target name="update_db_source_and_classes" />        
    </ant>
  </target>
  
  <target name="set_vital_properties" depends="">
    <delete dir="${stage.webapp}/WEB-INF/logs" />
    <mkdir dir="${stage.webapp}/WEB-INF/logs"/>
    <delete dir="${deploy.root}/logs" />
    <mkdir dir="${deploy.root}/logs"/>
    <touch file="${stage.webapp}/WEB-INF/logs/seriousErrorLog.txt"/>
    <touch file="${stage.webapp}/WEB-INF/logs/errorLog.txt"/>
    <propertyfile file="${stage.classes}/database.properties">
      <entry key="user" value="${deploy.db}" />
      <entry key="password" value="${deploy.db}" />
      <entry key="databaseName" value="${deploy.db}" />
      <entry key="port" value="5444" />
      <entry key="db.connection.initial" value="10" />
      <entry key="db.connection.max" value="15" />
      <entry key="databaseBinDirectory" value="C:/MDSS/PostgreSQL/8.4/bin/" />
      <entry key="dataDumpExecutable" value="pg_dump" />
      <entry key="dataImportExecutable" value="pg_restore" />
    </propertyfile>

    <replaceregexp flags="g" byline="true" file="${stage.classes}/database.properties" match='\\\\' replace="/" />
    <replaceregexp flags="g" byline="true" file="${stage.classes}/database.properties" match='\\\:' replace=":" />
    <replaceregexp byline="true" file="${stage.classes}/terraframe.properties" match='^local.root=.*$' replace="local.root=C:/MDSS/tomcat6/" />
    <replaceregexp byline="true" file="${stage.classes}/terraframe.properties" match='^deploy.root=.*$' replace="deploy.root=C:/MDSS/tomcat6/" />

    <propertyfile file="${stage.classes}/jawr.properties">
      <entry key="jawr.debug.on" value="false" />
    </propertyfile>
    <propertyfile file="${stage.classes}/server.properties">
      <entry key="logTransactions" value="true" />
      <entry key="compileTimeWeaving" value="true" />
    </propertyfile>
    <propertyfile file="${stage.classes}/install.properties">
      <entry key="master" value="false" />
    </propertyfile>
    <propertyfile file="${stage.classes}/MdssControlPanel.properties">
      <entry key="command.start" value="cmd /c C:/MDSS/tomcat6/bin/startup.bat" />
      <entry key="command.stop" value="cmd /c C:/MDSS/tomcat6/bin/shutdown.bat" />
    </propertyfile>
  </target>
  
  <target name="dump_db" depends="">
    <echo message="dumping the develop db to a sql file " />
    <exec executable="${postgres.bin}/pg_dump" dir="." failonerror="true" searchpath="true" logError="true">
      <arg line="--blobs -h 127.0.0.1 -U ${root.user} ${develop.db}" />
      <redirector output="MDSS.backup">
        <outputfilterchain>
          <!--make sql dump stop on errors -->
          <concatfilter prepend="${local.root}/scripts/ant/deploy/drop_deploy.sql" />
          <!--change 'mdssdevelop' to 'mdssdeploy' -->
          <tokenfilter>
            <replacestring from="${develop.db}" to="${deploy.db}" />
          </tokenfilter>
        </outputfilterchain>
      </redirector>
    </exec>
  <!--
    <copy file="MDSS.backup" todir="${stage.dir}" overwrite="true"/>
    <delete file="MDSS.backup"/>
  <sleep seconds="30" />
  -->
  </target>
  
  <target name="build_installer_exe">
    <!-- Copy in cache files -->
  <copy file="${local.root}/DDMS.data" todir="${stage.dir}"/>
  <copy file="${local.root}/DDMS.index" todir="${stage.dir}"/>
  
    <!-- Get revision info from svn -->
    <svn svnkit="true" javahl="false" username="cruisecontrol@terraframe.com" password="Mr.Sparkle">
      <info target="${project.root}/trunk" verbose="true" propPrefix="svn.info." />
      <info target="${project.root}/trunk/doc/ontology/MOterms.xls" verbose="true" propPrefix="moterms.svn." />
      <info target="${project.root}/trunk/doc/ontology/MOroots.xls" verbose="true" propPrefix="moroots.svn." />
      <info target="${project.root}/trunk/doc/menu/MenuItems.xls" verbose="true" propPrefix="menuitems.svn." />
      <info target="${project.root}/trunk/doc/DiseaseLocalizationDefaults.xls" verbose="true" propPrefix="localization.svn." />
      <info target="${project.root}/trunk/doc/permissions/Permissions.xls" verbose="true" propPrefix="permissions.svn." />
    </svn>
    
    <!-- Write revision info into Installer.nsi -->
    <replaceregexp match="StrCpy \$PatchVersion \d*" replace="StrCpy $PatchVersion ${svn.info.lastRev}" file="${stage.dir}/Installer.nsi" byline="true" />
    <replaceregexp match="StrCpy \$TermsVersion \d*" replace="StrCpy $TermsVersion ${moterms.svn.lastRev}" file="${stage.dir}/Installer.nsi" byline="true" />
    <replaceregexp match="StrCpy \$RootsVersion \d*" replace="StrCpy $RootsVersion ${moroots.svn.lastRev}" file="${stage.dir}/Installer.nsi" byline="true" />
    <replaceregexp match="StrCpy \$MenuVersion \d*" replace="StrCpy $MenuVersion ${menuitems.svn.lastRev}" file="${stage.dir}/Installer.nsi" byline="true" />
    <replaceregexp match="StrCpy \$LocalizationVersion \d*" replace="StrCpy $LocalizationVersion ${localization.svn.lastRev}" file="${stage.dir}/Installer.nsi" byline="true" />
    <replaceregexp match="StrCpy \$PermissionsVersion \d*" replace="StrCpy $PermissionsVersion ${permissions.svn.lastRev}" file="${stage.dir}/Installer.nsi" byline="true" />
    
    <exec executable="${nsis.dir}/makensis" dir="${stage.dir}" failonerror="true" searchpath="true" logError="true">
      <arg line="Installer.nsi" />
    </exec>
    <copy file="${stage.dir}/InstallDDMS.exe" tofile="${install.dir}/InstallDDMS${country}.exe" overwrite="true"/>
    <delete file="${stage.dir}/InstallDDMS.exe"/>
  </target>

  <target name="remove_generated_universals" depends="" description="Remove all java files for selected (old) generated universals">
    <patternset id="generated.artifacts">
      <include name="**/*" />
      <exclude name="Earth*" />
      <exclude name="GeoEntity*" />
      <exclude name=".svn*" />
    </patternset>
    <delete failonerror="false">
      <fileset dir="generated/client/stub/dss/vector/solutions/geo/generated/">
        <patternset refid="generated.artifacts" />
      </fileset>
    </delete>
    <delete failonerror="false">
      <fileset dir="generated/client/base/dss/vector/solutions/geo/generated/">
        <patternset refid="generated.artifacts" />
      </fileset>
    </delete>
    <delete failonerror="false">
      <fileset dir="generated/server/stub/dss/vector/solutions/geo/generated/">
        <patternset refid="generated.artifacts" />
      </fileset>
    </delete>
    <delete failonerror="false">
      <fileset dir="generated/server/base/dss/vector/solutions/geo/generated/">
        <patternset refid="generated.artifacts" />
      </fileset>
    </delete>
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="webapp/WEB-INF/dss/vector/solutions/geo/generated" defaultexcludes="false">
        <patternset refid="generated.artifacts" />
      </fileset>
    </delete>
  </target>
  <target name="copy_country_schema" depends="" description="Copy the appropriate country schema file">
    <echo message="Switching to country: ${geodata.db}" />
    <copy file="${local.root}/doc/country/${geodata.db}-schema(0001238646707001).xml" tofile="doc/individual/schema(0001238646707001).xml" overwrite="true" />
    <copy file="${local.root}/webapp/imgs/flags/${geodata.db}.gif" tofile="${local.root}/webapp/imgs/flags/current" overwrite="true" />
  </target>
  <target name="svn_update"  description="Writes the current svn revision info to an html file">
    <svn>
      <update target="." verbose="true" />
    </svn>
  </target>
  <target name="write_revision"  description="Writes the current svn revision info to an html file">
    <svn>
      <info target="local.root" verbose="true" />
    </svn>
    <echo file="webapp/revision.html" append="false">Last Changed Revision: ${svn.info.lastRev}Last Changed Date: ${svn.info.lastDate}    </echo>
    <echo message="Last Changed Revision: ${svn.info.lastRev}"></echo>
  </target>
</project>

