<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================= -->
<!-- This file is for interaction between the developing framework and       -->
<!-- projects that use the framework.  Tasks for creating terraframe jars,   -->
<!-- creating new projects, and propogating changes in the framework to      -->
<!-- exisitng projects are included.                                         -->
<!-- ======================================================================= -->
<project name="test">

	<!-- =================================================================== -->
	<!-- Set up our properties                                               -->
	<!-- =================================================================== -->

	<property name="profile.root" value="D:/Apps/eclipse/workspace/mrsparkle/trunk/profiles" />
	<taskdef name="tfproperties" classname="com.terraframe.mrsparkle.ant.TFProperties"
		classpath="${profile.root};tfprops.jar" />
	<tfproperties root="${profile.root}"/>
	
	<!-- execution path -->
	<path id="framework.classpath">
		<fileset dir="${framework.lib}">
			<exclude name="**/terraframe.jar" />
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${framework.bin}" />
		<pathelement location="${profile.root}" />
	</path>
	
	<!-- Add in AspectJ task definitions -->
	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" >
		<classpath>
			<pathelement path="${server.lib}/aspectjtools.jar" />
		</classpath>
	</taskdef>
	
	<!-- =================================================================== -->
	<!-- Create a new Project                                                -->
	<!-- =================================================================== -->
	<target name="new_project" description="Creates a new Terraframe MOJO Project">
		<input message="Project Name?" addproperty="new.project" />
		<property name="new.project.path" value="${framework.workspace}/${new.project}" />
		
		<!-- First build the directory structure -->
		<mkdir dir="${new.project.path}/adminApp" />
		<mkdir dir="${new.project.path}/bin" />
		<mkdir dir="${new.project.path}/doc" />
		<mkdir dir="${new.project.path}/generated/client/base" />
		<mkdir dir="${new.project.path}/generated/client/bin" />
		<mkdir dir="${new.project.path}/generated/client/stub" />
		<mkdir dir="${new.project.path}/generated/common/base" />
		<mkdir dir="${new.project.path}/generated/common/bin" />
		<mkdir dir="${new.project.path}/generated/common/stub" />
		<mkdir dir="${new.project.path}/generated/server/base" />
		<mkdir dir="${new.project.path}/generated/server/bin" />
		<mkdir dir="${new.project.path}/generated/server/stub" />
		<mkdir dir="${new.project.path}/lib/client" />
		<mkdir dir="${new.project.path}/lib/common" />
		<mkdir dir="${new.project.path}/lib/server" />
		<mkdir dir="${new.project.path}/logs" />
		<mkdir dir="${new.project.path}/profiles/default/client" />
		<mkdir dir="${new.project.path}/profiles/default/common" />
		<mkdir dir="${new.project.path}/profiles/default/server" />
		<mkdir dir="${new.project.path}/profiles/default/test" />
		<mkdir dir="${new.project.path}/scripts" />
		<mkdir dir="${new.project.path}/scripts/ant" />
		<mkdir dir="${new.project.path}/scripts/ant/deploy" />
		<mkdir dir="${new.project.path}/src" />
		<mkdir dir="${new.project.path}/webapp" />
		<mkdir dir="${new.project.path}/webapp/css" />
		<mkdir dir="${new.project.path}/webapp/images" />
		<mkdir dir="${new.project.path}/webapp/js" />
		<mkdir dir="${new.project.path}/webapp/META-INF" />
		<mkdir dir="${new.project.path}/webapp/WEB-INF" />
		
		<!-- Copy in all the libs -->
		<copy todir="${new.project.path}/lib">
			<fileset dir="${framework.lib}" />
		</copy>
		
		<!-- Copy in the admin page -->
		<copy todir="${new.project.path}/adminApp">
			<fileset dir="${framework.webapp}" />
		</copy>
		
		<!-- Copy in metadata -->
		<copy todir="${new.project.path}/doc">
			<fileset dir="${framework.webapp}" />
		</copy>
		
		<!-- Finally, create the custom .project and .classpath files -->
		
		
	</target>
	
	<!-- =================================================================== -->
	<!-- Define terraframe.jar tasks                                         -->
	<!-- =================================================================== -->

    <!-- Exports a jar containing client, server, and common code -->
	<target name="export_all_jar" description="Exports the server/common/client source into a jar">

		<mkdir dir="temp" />
		<mkdir dir="temp/META-INF" />

		<copy file="${framework.ant}/deploy/aopBuild/META-INF/aop.xml" todir="temp/META-INF" />

		<copy todir="temp" overwrite="true">
		  <fileset dir="${framework.src.client}">
			<include name="**/*.java" />
		  </fileset>
		  <fileset dir="${framework.src.common}">
			<include name="**/*.java" />
		  </fileset>
		  <fileset dir="${framework.src.server}">
			<include name="**/*.java" />
		  </fileset>
	    </copy>

		<iajc destDir="temp" source="1.5" target="1.5" verbose="false" X="notReweavable">
			<src path="${framework.src.common};${framework.src.server};${framework.src.client}" />
			<exclude name="**/TomcatLoader.java" />
			<exclude name="com/terraframe/mrsparkle/web/applet/*.java"/>
			<classpath>
				<path>
					<fileset dir="${framework.lib}">
						<include name="**/*.jar" />
					</fileset>
				</path>
			</classpath>
		</iajc>

		<jar destfile="${local.lib}/terraframe.jar" compress="true">
			<fileset dir="temp" />
		</jar>

		<delete dir="temp" />

		<echo message="JAR file '${local.lib}/terraframe.jar' has been created" />
	</target>
	
	<!-- Exports a jar containing upload applet code -->
	<target name="export_upload_jar" description="Exports the upload source into a jar">

		<mkdir dir="temp" />
		<mkdir dir="temp/META-INF" />

		<copy file="${framework.ant}/deploy/aopBuild/META-INF/aop.xml" todir="temp/META-INF" />

		<iajc destDir="temp" source="1.5" target="1.5" verbose="false" X="notReweavable">
			<src path="${framework.src.client}" />
			<include name="com/terraframe/mrsparkle/web/applet/*.java"/>
			<include name="com/terraframe/mrsparkle/web/applet/common/*.java"/>
			<classpath>
				<path>
					<fileset dir="${framework.lib}">
						<include name="**/*.jar" />
					</fileset>
				</path>
			</classpath>
		</iajc>

		<jar destfile="${deploy.webapps.root}/damLittle/upload.jar" compress="true">
			<manifest>
			    <attribute name="Class-Path" value="rmiio-signed.jar commons-logging-1.0.4.jar"/>
			</manifest>
			<fileset dir="temp" />
		</jar>

		<delete dir="temp" />

		<echo message="JAR file '${deploy.webapps.root}/damLittle/upload.jar' has been created" />
	</target>


	<!-- Exports a jar containing server code -->
	<target name="export_server_jar" description="Exports the server/common source into a jar">

		<mkdir dir="temp" />
		<mkdir dir="temp/META-INF" />

		<copy file="${framework.ant}/deploy/aopBuild/META-INF/aop.xml" todir="temp/META-INF" />

		<iajc destDir="temp" source="1.5" target="1.5" verbose="false" X="notReweavable">
			<src path="${framework.src.common};${framework.src.server}" />
			<exclude name="**/TomcatLoader.java" />
			<classpath>
				<path>
					<fileset dir="${framework.lib}">
						<include name="**/*.jar" />
					</fileset>
				</path>
			</classpath>
		</iajc>

		<jar destfile="${deploy.jar}" compress="true">
			<fileset dir="temp" />
		</jar>

		<delete dir="temp" />

		<echo message="JAR file '${deploy.jar}' has been created" />
	</target>

	<!-- Exports a jar containing client code -->
	<target name="export_client_jar" description="Exports the common/client source into a jar">

		<mkdir dir="temp" />
		<mkdir dir="temp/META-INF" />

		<copy file="${framework.ant}/deploy/aopBuild/META-INF/aop.xml" todir="temp/META-INF" />

		<iajc destDir="temp" source="1.5" target="1.5" verbose="false" X="notReweavable">
			<src path="${framework.src.common};${framework.src.client}" />
			<exclude name="**/JavaProxy.java" />
			<exclude name="**/JSONJavaProxy.java" />
			<exclude name="**/TomcatLoader.java" />
			<classpath>
				<path>
					<fileset dir="${framework.lib}">
						<include name="**/*.jar" />
					</fileset>
				</path>
			</classpath>
		</iajc>

		<jar destfile="${deploy.jar}" compress="true">
			<fileset dir="temp" />
		</jar>

		<delete dir="temp" />

		<echo message="JAR file '${deploy.jar}' has been created" />
	</target>

	<target name="copy_jar" description="moves the exported jar to a new location">
		<copy file="${deploy.jar}" toDir="${deploy.lib}" overwrite="true" />
		<echo message="The JAR file '${deploy.jar} has been moved to '${deploy.lib}'." />
	</target>
</project>