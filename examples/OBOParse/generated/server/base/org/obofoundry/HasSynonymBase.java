package org.obofoundry;

/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to HasSynonym.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class HasSynonymBase extends com.terraframe.mojo.business.Relationship implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "org.obofoundry.HasSynonym";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String TYPE = "type";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String ID = "id";
  public static java.lang.String CREATEDBY = "createdBy";
  private static final long serialVersionUID = 1229530369021L;
  
  public HasSynonymBase(String parentId, String childId)
  {
    super(parentId, childId);
  }
  
  public com.terraframe.mojo.system.Actor getOwner()
  {
    try
    {
      return com.terraframe.mojo.system.Actor.get(getValue(OWNER));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getOwnerMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(org.obofoundry.HasSynonym.CLASS);
    return mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.terraframe.mojo.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getId());
    }
  }
  
  public com.terraframe.mojo.system.metadata.MdDomain getEntityDomain()
  {
    try
    {
      return com.terraframe.mojo.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getEntityDomainMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(org.obofoundry.HasSynonym.CLASS);
    return mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.terraframe.mojo.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public org.obofoundry.Term getParent()
  {
    return (org.obofoundry.Term) super.getParent();
  }
  
  public org.obofoundry.TermSynonym getChild()
  {
    return (org.obofoundry.TermSynonym) super.getChild();
  }
  
  public static HasSynonym get(String id)
  {
    return (HasSynonym) HasSynonymBase.get(id);
  }
  
  public static org.obofoundry.HasSynonym lock(java.lang.String id)
  {
    HasSynonym _instance = HasSynonym.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static org.obofoundry.HasSynonym unlock(java.lang.String id)
  {
    HasSynonym _instance = HasSynonym.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
