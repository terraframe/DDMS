<?xml version="1.0"?>
<TerraFrame xsi:noNamespaceSchemaLocation="file:/Users/nathan/Documents/workspace/mojo_demo/trunk/profiles/datatype.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<create>

  <mdBusiness 
      name        = "org.obofoundry.Component" 
      label       = "OBO Term" 
      description = "OBO Term" 
      isAbstract  = "false"
      extendable  = "true">
    <attributes>
      <char 
          name		= "oboId"
          label		= "OBO ID"
          size		= "64"
          required	= "true"/>
      <char 
          name		= "componentName"
          label		= "Name"
          size		= "255"
          required	= "true"/>
      <char 
          name		= "nameSpace"
          label		= "Namespace"
          size		= "64"
          required	= "true"/>
      <text 
          name		= "def"
          label		= "Definition"
          required	= "false"/>
      <text 
          name		= "componentComment"
          label		= "Comment"
          required	= "false"/>
    </attributes>
    <stubSource>package org.obofoundry;

public class Component extends ComponentBase implements com.terraframe.mojo.generation.loader.Reloadable
{
  public Component()
  {
    super();
  }
  
  public String toString()
  {
    return this.getClassDisplayLabel()+": "+this.getComponentName();
  }
  
}
    </stubSource>
  </mdBusiness>


  <mdBusiness 
      name        = "org.obofoundry.Term" 
      label       = "OBO Term" 
      description = "OBO Term" 
      isAbstract  = "true"
      extendable  = "true"
      extends     = "org.obofoundry.Component">
    <attributes/>
  </mdBusiness>

  <mdRelationship name="org.obofoundry.OBORelationship" 
                  label="Is A" 
                  description="Is A Relationship" 
                  isAbstract="true"
                  extendable  = "true"
                  composition="false">
   <parent cardinality="*" 
           label="Parent Relationship" 
           method="ParentRelationship" 
           name="org.obofoundry.Component"/>
    <child cardinality="*" 
           label="Child Relationship" 
           method="ChildRelationship" 
           name="org.obofoundry.Component"/>
  </mdRelationship>

  <mdRelationship name="org.obofoundry.IsA" 
                  label="Is A" 
                  description="Is A Relationship" 
                  isAbstract="false"
                  composition="false"
                  extends="org.obofoundry.OBORelationship">
   <parent cardinality="*" 
           label="Is A (Superclass)" 
           method="IsASuperClasses" 
           name="org.obofoundry.Component"/>
    <child cardinality="*" 
           label="Is A (Sub Classes)" 
           method="IsASubClasses" 
           name="org.obofoundry.Component"/>
  </mdRelationship>

  <mdBusiness 
      name        = "org.obofoundry.Typedef" 
      label       = "OBO Relation Ontology" 
      description = "OBO Relation Ontology" 
      isAbstract  = "false"
      extendable  = "true"
      extends     = "org.obofoundry.Component">
    <attributes>
      <reference 
          name	    = "mdRelationship"
          label     = "Relationship MetaData" 
          description = "Definition of the Relationship that defines methods for this relationship on the Term class."
          required	= "false"
          type      = "com.terraframe.mojo.system.metadata.MdRelationship"/>
      <reference 
          name	    = "inverseof"
          label     = "Inverse Of" 
          description = "Definition of the Relationship that defines methods for this relationship on the Term class."
          required	= "false"
          type      = "org.obofoundry.Typedef"/>
      <boolean 
          name		    = "isParent"
          label		    = "Is Parent"
          description   = "Is this OBO relationship the parent in the TF Relationship."
          default_value = "false"
      	  required	    = "true"/>
      <boolean 
          name		    = "isChild"
          label		    = "Is Child"
          description   = "Is this OBO relationship the child in the TF Relationship."
          default_value = "false"
      	  required	    = "true"/>
      <boolean 
          name		    = "isReflexive"
          label		    = "Is Reflexive"
      	  default_value = "false"
      	  required	    = "true"/>
      <boolean 
          name		    = "isTransitive"
          label		    = "Is Transitive"
      	  default_value = "false"
      	  required	    = "true"/>
      <boolean 
          name		    = "isAntiSymmetric"
          label		    = "Is Anti Symmetric"
      	  default_value = "false"
      	  required	    = "true"/>
    </attributes>
    <stubSource><![CDATA[
package org.obofoundry;

import com.terraframe.mojo.query.OIterator;
import com.terraframe.mojo.query.QueryFactory;
import com.terraframe.mojo.system.metadata.MdRelationship;

public class Typedef extends TypedefBase implements com.terraframe.mojo.generation.loader.Reloadable
{
  public Typedef()
  {
    super();
  }  

  public void delete()
  {
    MdRelationship mdRelationship = this.getMdRelationship();
    if (mdRelationship != null)
    {
      this.getMdRelationship().delete();
    }
    super.delete();
  }
  
  public static Typedef getByName(String name)
  {
    TypedefQuery q = new TypedefQuery(new QueryFactory());
    q.WHERE(q.getComponentName().EQ(name));
    
    OIterator<? extends Typedef> iterator = q.getIterator();
    
    if (iterator.hasNext())
    {
      return iterator.next();
    }
    else
    {
      return null;
    }
  }
}]]>
    </stubSource>
  </mdBusiness>

  <mdBusiness 
      name        = "org.obofoundry.TermSynonym" 
      label       = "Term Synonym" 
      description = "Synonym for a Term" 
      isAbstract  = "false"
      extendable  = "true">
    <attributes>
      <char 
          name		= "synonymName"
          label		= "Name"
          size		= "255"
          indexType = "unique index" 
          required	= "true"/>
    </attributes>
    <stubSource><![CDATA[
package org.obofoundry;

import com.terraframe.mojo.query.OIterator;
import com.terraframe.mojo.query.QueryFactory;

public class TermSynonym extends TermSynonymBase implements com.terraframe.mojo.generation.loader.Reloadable
{
  public TermSynonym()
  {
    super();
  }
  
  public String toString()
  {
    return this.getSynonymName().replace("\"", " ");
  }
 
  public static TermSynonym getSynonymByName(String synonymName)
  {
    TermSynonymQuery q = new TermSynonymQuery(new QueryFactory());
    
    q.WHERE(q.getSynonymName().EQ(synonymName));
    
    OIterator<? extends TermSynonym> iterator = q.getIterator();
    
    if (iterator.hasNext())
    {
      return iterator.next();
    }
    else
    {
      return null;
    }
  }
}]]>
    </stubSource>
  </mdBusiness>

  <mdRelationship name="org.obofoundry.HasSynonym" 
                  label="HasSynonym" 
                  description="Terms have synonyms" 
                  isAbstract="false"
                  composition="false">
   <parent cardinality="*" 
           label="Has Synonym" 
           method="Terms" 
           name="org.obofoundry.Term"/>
    <child cardinality="*" 
           label="Is Synonym For" 
           method="Synonyms" 
           name="org.obofoundry.TermSynonym"/>
  </mdRelationship>

</create>

</TerraFrame>