
import edu.stanford.smi.protegex.owl.model.*;
import java.util.*;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 *
 * @version generated on Mon Jan 19 17:55:02 MST 2009
 */
public class MyFactory {

    private OWLModel owlModel;


    public MyFactory(OWLModel owlModel) {
        this.owlModel = owlModel;
    }


    public RDFSNamedClass getContinuantClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#Continuant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Continuant createContinuant(String name) {
        final RDFSNamedClass cls = getContinuantClass();
        return (Continuant) cls.createInstance(name).as(Continuant.class);
    }

    public Continuant getContinuant(String name) {
        return (Continuant) owlModel.getRDFResource(name).as(Continuant.class);
    }

    public Collection<Continuant> getAllContinuantInstances() {
        return getAllContinuantInstances(false);
    }

    public Collection<Continuant> getAllContinuantInstances(boolean transitive) {
        Collection<Continuant> result = new ArrayList<Continuant>();
        final RDFSNamedClass cls = getContinuantClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Continuant) owlIndividual.as(Continuant.class) );
        }
        return result;
    }


    public RDFSNamedClass getOccurrentClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#Occurrent";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Occurrent createOccurrent(String name) {
        final RDFSNamedClass cls = getOccurrentClass();
        return (Occurrent) cls.createInstance(name).as(Occurrent.class);
    }

    public Occurrent getOccurrent(String name) {
        return (Occurrent) owlModel.getRDFResource(name).as(Occurrent.class);
    }

    public Collection<Occurrent> getAllOccurrentInstances() {
        return getAllOccurrentInstances(false);
    }

    public Collection<Occurrent> getAllOccurrentInstances(boolean transitive) {
        Collection<Occurrent> result = new ArrayList<Occurrent>();
        final RDFSNamedClass cls = getOccurrentClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Occurrent) owlIndividual.as(Occurrent.class) );
        }
        return result;
    }


    public RDFSNamedClass getDependentContinuantClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#DependentContinuant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public DependentContinuant createDependentContinuant(String name) {
        final RDFSNamedClass cls = getDependentContinuantClass();
        return (DependentContinuant) cls.createInstance(name).as(DependentContinuant.class);
    }

    public DependentContinuant getDependentContinuant(String name) {
        return (DependentContinuant) owlModel.getRDFResource(name).as(DependentContinuant.class);
    }

    public Collection<DependentContinuant> getAllDependentContinuantInstances() {
        return getAllDependentContinuantInstances(false);
    }

    public Collection<DependentContinuant> getAllDependentContinuantInstances(boolean transitive) {
        Collection<DependentContinuant> result = new ArrayList<DependentContinuant>();
        final RDFSNamedClass cls = getDependentContinuantClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (DependentContinuant) owlIndividual.as(DependentContinuant.class) );
        }
        return result;
    }


    public RDFSNamedClass getIndependentContinuantClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#IndependentContinuant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public IndependentContinuant createIndependentContinuant(String name) {
        final RDFSNamedClass cls = getIndependentContinuantClass();
        return (IndependentContinuant) cls.createInstance(name).as(IndependentContinuant.class);
    }

    public IndependentContinuant getIndependentContinuant(String name) {
        return (IndependentContinuant) owlModel.getRDFResource(name).as(IndependentContinuant.class);
    }

    public Collection<IndependentContinuant> getAllIndependentContinuantInstances() {
        return getAllIndependentContinuantInstances(false);
    }

    public Collection<IndependentContinuant> getAllIndependentContinuantInstances(boolean transitive) {
        Collection<IndependentContinuant> result = new ArrayList<IndependentContinuant>();
        final RDFSNamedClass cls = getIndependentContinuantClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (IndependentContinuant) owlIndividual.as(IndependentContinuant.class) );
        }
        return result;
    }


    public RDFSNamedClass getSpatialRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#SpatialRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SpatialRegion createSpatialRegion(String name) {
        final RDFSNamedClass cls = getSpatialRegionClass();
        return (SpatialRegion) cls.createInstance(name).as(SpatialRegion.class);
    }

    public SpatialRegion getSpatialRegion(String name) {
        return (SpatialRegion) owlModel.getRDFResource(name).as(SpatialRegion.class);
    }

    public Collection<SpatialRegion> getAllSpatialRegionInstances() {
        return getAllSpatialRegionInstances(false);
    }

    public Collection<SpatialRegion> getAllSpatialRegionInstances(boolean transitive) {
        Collection<SpatialRegion> result = new ArrayList<SpatialRegion>();
        final RDFSNamedClass cls = getSpatialRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (SpatialRegion) owlIndividual.as(SpatialRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getGenericallyDependentContinuantClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#GenericallyDependentContinuant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public GenericallyDependentContinuant createGenericallyDependentContinuant(String name) {
        final RDFSNamedClass cls = getGenericallyDependentContinuantClass();
        return (GenericallyDependentContinuant) cls.createInstance(name).as(GenericallyDependentContinuant.class);
    }

    public GenericallyDependentContinuant getGenericallyDependentContinuant(String name) {
        return (GenericallyDependentContinuant) owlModel.getRDFResource(name).as(GenericallyDependentContinuant.class);
    }

    public Collection<GenericallyDependentContinuant> getAllGenericallyDependentContinuantInstances() {
        return getAllGenericallyDependentContinuantInstances(false);
    }

    public Collection<GenericallyDependentContinuant> getAllGenericallyDependentContinuantInstances(boolean transitive) {
        Collection<GenericallyDependentContinuant> result = new ArrayList<GenericallyDependentContinuant>();
        final RDFSNamedClass cls = getGenericallyDependentContinuantClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (GenericallyDependentContinuant) owlIndividual.as(GenericallyDependentContinuant.class) );
        }
        return result;
    }


    public RDFSNamedClass getSpecificallyDependentContinuantClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#SpecificallyDependentContinuant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SpecificallyDependentContinuant createSpecificallyDependentContinuant(String name) {
        final RDFSNamedClass cls = getSpecificallyDependentContinuantClass();
        return (SpecificallyDependentContinuant) cls.createInstance(name).as(SpecificallyDependentContinuant.class);
    }

    public SpecificallyDependentContinuant getSpecificallyDependentContinuant(String name) {
        return (SpecificallyDependentContinuant) owlModel.getRDFResource(name).as(SpecificallyDependentContinuant.class);
    }

    public Collection<SpecificallyDependentContinuant> getAllSpecificallyDependentContinuantInstances() {
        return getAllSpecificallyDependentContinuantInstances(false);
    }

    public Collection<SpecificallyDependentContinuant> getAllSpecificallyDependentContinuantInstances(boolean transitive) {
        Collection<SpecificallyDependentContinuant> result = new ArrayList<SpecificallyDependentContinuant>();
        final RDFSNamedClass cls = getSpecificallyDependentContinuantClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (SpecificallyDependentContinuant) owlIndividual.as(SpecificallyDependentContinuant.class) );
        }
        return result;
    }


    public RDFSNamedClass getDispositionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#Disposition";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Disposition createDisposition(String name) {
        final RDFSNamedClass cls = getDispositionClass();
        return (Disposition) cls.createInstance(name).as(Disposition.class);
    }

    public Disposition getDisposition(String name) {
        return (Disposition) owlModel.getRDFResource(name).as(Disposition.class);
    }

    public Collection<Disposition> getAllDispositionInstances() {
        return getAllDispositionInstances(false);
    }

    public Collection<Disposition> getAllDispositionInstances(boolean transitive) {
        Collection<Disposition> result = new ArrayList<Disposition>();
        final RDFSNamedClass cls = getDispositionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Disposition) owlIndividual.as(Disposition.class) );
        }
        return result;
    }


    public RDFSNamedClass getFiatObjectPartClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#FiatObjectPart";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public FiatObjectPart createFiatObjectPart(String name) {
        final RDFSNamedClass cls = getFiatObjectPartClass();
        return (FiatObjectPart) cls.createInstance(name).as(FiatObjectPart.class);
    }

    public FiatObjectPart getFiatObjectPart(String name) {
        return (FiatObjectPart) owlModel.getRDFResource(name).as(FiatObjectPart.class);
    }

    public Collection<FiatObjectPart> getAllFiatObjectPartInstances() {
        return getAllFiatObjectPartInstances(false);
    }

    public Collection<FiatObjectPart> getAllFiatObjectPartInstances(boolean transitive) {
        Collection<FiatObjectPart> result = new ArrayList<FiatObjectPart>();
        final RDFSNamedClass cls = getFiatObjectPartClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (FiatObjectPart) owlIndividual.as(FiatObjectPart.class) );
        }
        return result;
    }


    public RDFSNamedClass getFunctionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#Function";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Function createFunction(String name) {
        final RDFSNamedClass cls = getFunctionClass();
        return (Function) cls.createInstance(name).as(Function.class);
    }

    public Function getFunction(String name) {
        return (Function) owlModel.getRDFResource(name).as(Function.class);
    }

    public Collection<Function> getAllFunctionInstances() {
        return getAllFunctionInstances(false);
    }

    public Collection<Function> getAllFunctionInstances(boolean transitive) {
        Collection<Function> result = new ArrayList<Function>();
        final RDFSNamedClass cls = getFunctionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Function) owlIndividual.as(Function.class) );
        }
        return result;
    }


    public RDFSNamedClass getObjectClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#Object";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Object createObject(String name) {
        final RDFSNamedClass cls = getObjectClass();
        return (Object) cls.createInstance(name).as(Object.class);
    }

    public Object getObject(String name) {
        return (Object) owlModel.getRDFResource(name).as(Object.class);
    }

    public Collection<Object> getAllObjectInstances() {
        return getAllObjectInstances(false);
    }

    public Collection<Object> getAllObjectInstances(boolean transitive) {
        Collection<Object> result = new ArrayList<Object>();
        final RDFSNamedClass cls = getObjectClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Object) owlIndividual.as(Object.class) );
        }
        return result;
    }


    public RDFSNamedClass getObjectAggregateClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#ObjectAggregate";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ObjectAggregate createObjectAggregate(String name) {
        final RDFSNamedClass cls = getObjectAggregateClass();
        return (ObjectAggregate) cls.createInstance(name).as(ObjectAggregate.class);
    }

    public ObjectAggregate getObjectAggregate(String name) {
        return (ObjectAggregate) owlModel.getRDFResource(name).as(ObjectAggregate.class);
    }

    public Collection<ObjectAggregate> getAllObjectAggregateInstances() {
        return getAllObjectAggregateInstances(false);
    }

    public Collection<ObjectAggregate> getAllObjectAggregateInstances(boolean transitive) {
        Collection<ObjectAggregate> result = new ArrayList<ObjectAggregate>();
        final RDFSNamedClass cls = getObjectAggregateClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ObjectAggregate) owlIndividual.as(ObjectAggregate.class) );
        }
        return result;
    }


    public RDFSNamedClass getObjectBoundaryClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#ObjectBoundary";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ObjectBoundary createObjectBoundary(String name) {
        final RDFSNamedClass cls = getObjectBoundaryClass();
        return (ObjectBoundary) cls.createInstance(name).as(ObjectBoundary.class);
    }

    public ObjectBoundary getObjectBoundary(String name) {
        return (ObjectBoundary) owlModel.getRDFResource(name).as(ObjectBoundary.class);
    }

    public Collection<ObjectBoundary> getAllObjectBoundaryInstances() {
        return getAllObjectBoundaryInstances(false);
    }

    public Collection<ObjectBoundary> getAllObjectBoundaryInstances(boolean transitive) {
        Collection<ObjectBoundary> result = new ArrayList<ObjectBoundary>();
        final RDFSNamedClass cls = getObjectBoundaryClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ObjectBoundary) owlIndividual.as(ObjectBoundary.class) );
        }
        return result;
    }


    public RDFSNamedClass getSiteClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#Site";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Site createSite(String name) {
        final RDFSNamedClass cls = getSiteClass();
        return (Site) cls.createInstance(name).as(Site.class);
    }

    public Site getSite(String name) {
        return (Site) owlModel.getRDFResource(name).as(Site.class);
    }

    public Collection<Site> getAllSiteInstances() {
        return getAllSiteInstances(false);
    }

    public Collection<Site> getAllSiteInstances(boolean transitive) {
        Collection<Site> result = new ArrayList<Site>();
        final RDFSNamedClass cls = getSiteClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Site) owlIndividual.as(Site.class) );
        }
        return result;
    }


    public RDFSNamedClass getOneDimensionalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#OneDimensionalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public OneDimensionalRegion createOneDimensionalRegion(String name) {
        final RDFSNamedClass cls = getOneDimensionalRegionClass();
        return (OneDimensionalRegion) cls.createInstance(name).as(OneDimensionalRegion.class);
    }

    public OneDimensionalRegion getOneDimensionalRegion(String name) {
        return (OneDimensionalRegion) owlModel.getRDFResource(name).as(OneDimensionalRegion.class);
    }

    public Collection<OneDimensionalRegion> getAllOneDimensionalRegionInstances() {
        return getAllOneDimensionalRegionInstances(false);
    }

    public Collection<OneDimensionalRegion> getAllOneDimensionalRegionInstances(boolean transitive) {
        Collection<OneDimensionalRegion> result = new ArrayList<OneDimensionalRegion>();
        final RDFSNamedClass cls = getOneDimensionalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (OneDimensionalRegion) owlIndividual.as(OneDimensionalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getQualityClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#Quality";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Quality createQuality(String name) {
        final RDFSNamedClass cls = getQualityClass();
        return (Quality) cls.createInstance(name).as(Quality.class);
    }

    public Quality getQuality(String name) {
        return (Quality) owlModel.getRDFResource(name).as(Quality.class);
    }

    public Collection<Quality> getAllQualityInstances() {
        return getAllQualityInstances(false);
    }

    public Collection<Quality> getAllQualityInstances(boolean transitive) {
        Collection<Quality> result = new ArrayList<Quality>();
        final RDFSNamedClass cls = getQualityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Quality) owlIndividual.as(Quality.class) );
        }
        return result;
    }


    public RDFSNamedClass getRealizableEntityClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#RealizableEntity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RealizableEntity createRealizableEntity(String name) {
        final RDFSNamedClass cls = getRealizableEntityClass();
        return (RealizableEntity) cls.createInstance(name).as(RealizableEntity.class);
    }

    public RealizableEntity getRealizableEntity(String name) {
        return (RealizableEntity) owlModel.getRDFResource(name).as(RealizableEntity.class);
    }

    public Collection<RealizableEntity> getAllRealizableEntityInstances() {
        return getAllRealizableEntityInstances(false);
    }

    public Collection<RealizableEntity> getAllRealizableEntityInstances(boolean transitive) {
        Collection<RealizableEntity> result = new ArrayList<RealizableEntity>();
        final RDFSNamedClass cls = getRealizableEntityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (RealizableEntity) owlIndividual.as(RealizableEntity.class) );
        }
        return result;
    }


    public RDFSNamedClass getRoleClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#Role";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Role createRole(String name) {
        final RDFSNamedClass cls = getRoleClass();
        return (Role) cls.createInstance(name).as(Role.class);
    }

    public Role getRole(String name) {
        return (Role) owlModel.getRDFResource(name).as(Role.class);
    }

    public Collection<Role> getAllRoleInstances() {
        return getAllRoleInstances(false);
    }

    public Collection<Role> getAllRoleInstances(boolean transitive) {
        Collection<Role> result = new ArrayList<Role>();
        final RDFSNamedClass cls = getRoleClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Role) owlIndividual.as(Role.class) );
        }
        return result;
    }


    public RDFSNamedClass getThreeDimensionalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#ThreeDimensionalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ThreeDimensionalRegion createThreeDimensionalRegion(String name) {
        final RDFSNamedClass cls = getThreeDimensionalRegionClass();
        return (ThreeDimensionalRegion) cls.createInstance(name).as(ThreeDimensionalRegion.class);
    }

    public ThreeDimensionalRegion getThreeDimensionalRegion(String name) {
        return (ThreeDimensionalRegion) owlModel.getRDFResource(name).as(ThreeDimensionalRegion.class);
    }

    public Collection<ThreeDimensionalRegion> getAllThreeDimensionalRegionInstances() {
        return getAllThreeDimensionalRegionInstances(false);
    }

    public Collection<ThreeDimensionalRegion> getAllThreeDimensionalRegionInstances(boolean transitive) {
        Collection<ThreeDimensionalRegion> result = new ArrayList<ThreeDimensionalRegion>();
        final RDFSNamedClass cls = getThreeDimensionalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ThreeDimensionalRegion) owlIndividual.as(ThreeDimensionalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getTwoDimensionalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#TwoDimensionalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public TwoDimensionalRegion createTwoDimensionalRegion(String name) {
        final RDFSNamedClass cls = getTwoDimensionalRegionClass();
        return (TwoDimensionalRegion) cls.createInstance(name).as(TwoDimensionalRegion.class);
    }

    public TwoDimensionalRegion getTwoDimensionalRegion(String name) {
        return (TwoDimensionalRegion) owlModel.getRDFResource(name).as(TwoDimensionalRegion.class);
    }

    public Collection<TwoDimensionalRegion> getAllTwoDimensionalRegionInstances() {
        return getAllTwoDimensionalRegionInstances(false);
    }

    public Collection<TwoDimensionalRegion> getAllTwoDimensionalRegionInstances(boolean transitive) {
        Collection<TwoDimensionalRegion> result = new ArrayList<TwoDimensionalRegion>();
        final RDFSNamedClass cls = getTwoDimensionalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (TwoDimensionalRegion) owlIndividual.as(TwoDimensionalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getZeroDimensionalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/snap#ZeroDimensionalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ZeroDimensionalRegion createZeroDimensionalRegion(String name) {
        final RDFSNamedClass cls = getZeroDimensionalRegionClass();
        return (ZeroDimensionalRegion) cls.createInstance(name).as(ZeroDimensionalRegion.class);
    }

    public ZeroDimensionalRegion getZeroDimensionalRegion(String name) {
        return (ZeroDimensionalRegion) owlModel.getRDFResource(name).as(ZeroDimensionalRegion.class);
    }

    public Collection<ZeroDimensionalRegion> getAllZeroDimensionalRegionInstances() {
        return getAllZeroDimensionalRegionInstances(false);
    }

    public Collection<ZeroDimensionalRegion> getAllZeroDimensionalRegionInstances(boolean transitive) {
        Collection<ZeroDimensionalRegion> result = new ArrayList<ZeroDimensionalRegion>();
        final RDFSNamedClass cls = getZeroDimensionalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ZeroDimensionalRegion) owlIndividual.as(ZeroDimensionalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getConnectedSpatiotemporalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#ConnectedSpatiotemporalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ConnectedSpatiotemporalRegion createConnectedSpatiotemporalRegion(String name) {
        final RDFSNamedClass cls = getConnectedSpatiotemporalRegionClass();
        return (ConnectedSpatiotemporalRegion) cls.createInstance(name).as(ConnectedSpatiotemporalRegion.class);
    }

    public ConnectedSpatiotemporalRegion getConnectedSpatiotemporalRegion(String name) {
        return (ConnectedSpatiotemporalRegion) owlModel.getRDFResource(name).as(ConnectedSpatiotemporalRegion.class);
    }

    public Collection<ConnectedSpatiotemporalRegion> getAllConnectedSpatiotemporalRegionInstances() {
        return getAllConnectedSpatiotemporalRegionInstances(false);
    }

    public Collection<ConnectedSpatiotemporalRegion> getAllConnectedSpatiotemporalRegionInstances(boolean transitive) {
        Collection<ConnectedSpatiotemporalRegion> result = new ArrayList<ConnectedSpatiotemporalRegion>();
        final RDFSNamedClass cls = getConnectedSpatiotemporalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ConnectedSpatiotemporalRegion) owlIndividual.as(ConnectedSpatiotemporalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getSpatiotemporalInstantClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInstant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SpatiotemporalInstant createSpatiotemporalInstant(String name) {
        final RDFSNamedClass cls = getSpatiotemporalInstantClass();
        return (SpatiotemporalInstant) cls.createInstance(name).as(SpatiotemporalInstant.class);
    }

    public SpatiotemporalInstant getSpatiotemporalInstant(String name) {
        return (SpatiotemporalInstant) owlModel.getRDFResource(name).as(SpatiotemporalInstant.class);
    }

    public Collection<SpatiotemporalInstant> getAllSpatiotemporalInstantInstances() {
        return getAllSpatiotemporalInstantInstances(false);
    }

    public Collection<SpatiotemporalInstant> getAllSpatiotemporalInstantInstances(boolean transitive) {
        Collection<SpatiotemporalInstant> result = new ArrayList<SpatiotemporalInstant>();
        final RDFSNamedClass cls = getSpatiotemporalInstantClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (SpatiotemporalInstant) owlIndividual.as(SpatiotemporalInstant.class) );
        }
        return result;
    }


    public RDFSNamedClass getSpatiotemporalIntervalClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#SpatiotemporalInterval";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SpatiotemporalInterval createSpatiotemporalInterval(String name) {
        final RDFSNamedClass cls = getSpatiotemporalIntervalClass();
        return (SpatiotemporalInterval) cls.createInstance(name).as(SpatiotemporalInterval.class);
    }

    public SpatiotemporalInterval getSpatiotemporalInterval(String name) {
        return (SpatiotemporalInterval) owlModel.getRDFResource(name).as(SpatiotemporalInterval.class);
    }

    public Collection<SpatiotemporalInterval> getAllSpatiotemporalIntervalInstances() {
        return getAllSpatiotemporalIntervalInstances(false);
    }

    public Collection<SpatiotemporalInterval> getAllSpatiotemporalIntervalInstances(boolean transitive) {
        Collection<SpatiotemporalInterval> result = new ArrayList<SpatiotemporalInterval>();
        final RDFSNamedClass cls = getSpatiotemporalIntervalClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (SpatiotemporalInterval) owlIndividual.as(SpatiotemporalInterval.class) );
        }
        return result;
    }


    public RDFSNamedClass getConnectedTemporalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#ConnectedTemporalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ConnectedTemporalRegion createConnectedTemporalRegion(String name) {
        final RDFSNamedClass cls = getConnectedTemporalRegionClass();
        return (ConnectedTemporalRegion) cls.createInstance(name).as(ConnectedTemporalRegion.class);
    }

    public ConnectedTemporalRegion getConnectedTemporalRegion(String name) {
        return (ConnectedTemporalRegion) owlModel.getRDFResource(name).as(ConnectedTemporalRegion.class);
    }

    public Collection<ConnectedTemporalRegion> getAllConnectedTemporalRegionInstances() {
        return getAllConnectedTemporalRegionInstances(false);
    }

    public Collection<ConnectedTemporalRegion> getAllConnectedTemporalRegionInstances(boolean transitive) {
        Collection<ConnectedTemporalRegion> result = new ArrayList<ConnectedTemporalRegion>();
        final RDFSNamedClass cls = getConnectedTemporalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ConnectedTemporalRegion) owlIndividual.as(ConnectedTemporalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getTemporalInstantClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#TemporalInstant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public TemporalInstant createTemporalInstant(String name) {
        final RDFSNamedClass cls = getTemporalInstantClass();
        return (TemporalInstant) cls.createInstance(name).as(TemporalInstant.class);
    }

    public TemporalInstant getTemporalInstant(String name) {
        return (TemporalInstant) owlModel.getRDFResource(name).as(TemporalInstant.class);
    }

    public Collection<TemporalInstant> getAllTemporalInstantInstances() {
        return getAllTemporalInstantInstances(false);
    }

    public Collection<TemporalInstant> getAllTemporalInstantInstances(boolean transitive) {
        Collection<TemporalInstant> result = new ArrayList<TemporalInstant>();
        final RDFSNamedClass cls = getTemporalInstantClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (TemporalInstant) owlIndividual.as(TemporalInstant.class) );
        }
        return result;
    }


    public RDFSNamedClass getTemporalIntervalClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#TemporalInterval";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public TemporalInterval createTemporalInterval(String name) {
        final RDFSNamedClass cls = getTemporalIntervalClass();
        return (TemporalInterval) cls.createInstance(name).as(TemporalInterval.class);
    }

    public TemporalInterval getTemporalInterval(String name) {
        return (TemporalInterval) owlModel.getRDFResource(name).as(TemporalInterval.class);
    }

    public Collection<TemporalInterval> getAllTemporalIntervalInstances() {
        return getAllTemporalIntervalInstances(false);
    }

    public Collection<TemporalInterval> getAllTemporalIntervalInstances(boolean transitive) {
        Collection<TemporalInterval> result = new ArrayList<TemporalInterval>();
        final RDFSNamedClass cls = getTemporalIntervalClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (TemporalInterval) owlIndividual.as(TemporalInterval.class) );
        }
        return result;
    }


    public RDFSNamedClass getFiatProcessPartClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#FiatProcessPart";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public FiatProcessPart createFiatProcessPart(String name) {
        final RDFSNamedClass cls = getFiatProcessPartClass();
        return (FiatProcessPart) cls.createInstance(name).as(FiatProcessPart.class);
    }

    public FiatProcessPart getFiatProcessPart(String name) {
        return (FiatProcessPart) owlModel.getRDFResource(name).as(FiatProcessPart.class);
    }

    public Collection<FiatProcessPart> getAllFiatProcessPartInstances() {
        return getAllFiatProcessPartInstances(false);
    }

    public Collection<FiatProcessPart> getAllFiatProcessPartInstances(boolean transitive) {
        Collection<FiatProcessPart> result = new ArrayList<FiatProcessPart>();
        final RDFSNamedClass cls = getFiatProcessPartClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (FiatProcessPart) owlIndividual.as(FiatProcessPart.class) );
        }
        return result;
    }


    public RDFSNamedClass getProcessualEntityClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#ProcessualEntity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ProcessualEntity createProcessualEntity(String name) {
        final RDFSNamedClass cls = getProcessualEntityClass();
        return (ProcessualEntity) cls.createInstance(name).as(ProcessualEntity.class);
    }

    public ProcessualEntity getProcessualEntity(String name) {
        return (ProcessualEntity) owlModel.getRDFResource(name).as(ProcessualEntity.class);
    }

    public Collection<ProcessualEntity> getAllProcessualEntityInstances() {
        return getAllProcessualEntityInstances(false);
    }

    public Collection<ProcessualEntity> getAllProcessualEntityInstances(boolean transitive) {
        Collection<ProcessualEntity> result = new ArrayList<ProcessualEntity>();
        final RDFSNamedClass cls = getProcessualEntityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ProcessualEntity) owlIndividual.as(ProcessualEntity.class) );
        }
        return result;
    }


    public RDFSNamedClass getSpatiotemporalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#SpatiotemporalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SpatiotemporalRegion createSpatiotemporalRegion(String name) {
        final RDFSNamedClass cls = getSpatiotemporalRegionClass();
        return (SpatiotemporalRegion) cls.createInstance(name).as(SpatiotemporalRegion.class);
    }

    public SpatiotemporalRegion getSpatiotemporalRegion(String name) {
        return (SpatiotemporalRegion) owlModel.getRDFResource(name).as(SpatiotemporalRegion.class);
    }

    public Collection<SpatiotemporalRegion> getAllSpatiotemporalRegionInstances() {
        return getAllSpatiotemporalRegionInstances(false);
    }

    public Collection<SpatiotemporalRegion> getAllSpatiotemporalRegionInstances(boolean transitive) {
        Collection<SpatiotemporalRegion> result = new ArrayList<SpatiotemporalRegion>();
        final RDFSNamedClass cls = getSpatiotemporalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (SpatiotemporalRegion) owlIndividual.as(SpatiotemporalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getTemporalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#TemporalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public TemporalRegion createTemporalRegion(String name) {
        final RDFSNamedClass cls = getTemporalRegionClass();
        return (TemporalRegion) cls.createInstance(name).as(TemporalRegion.class);
    }

    public TemporalRegion getTemporalRegion(String name) {
        return (TemporalRegion) owlModel.getRDFResource(name).as(TemporalRegion.class);
    }

    public Collection<TemporalRegion> getAllTemporalRegionInstances() {
        return getAllTemporalRegionInstances(false);
    }

    public Collection<TemporalRegion> getAllTemporalRegionInstances(boolean transitive) {
        Collection<TemporalRegion> result = new ArrayList<TemporalRegion>();
        final RDFSNamedClass cls = getTemporalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (TemporalRegion) owlIndividual.as(TemporalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getProcessClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#Process";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Process createProcess(String name) {
        final RDFSNamedClass cls = getProcessClass();
        return (Process) cls.createInstance(name).as(Process.class);
    }

    public Process getProcess(String name) {
        return (Process) owlModel.getRDFResource(name).as(Process.class);
    }

    public Collection<Process> getAllProcessInstances() {
        return getAllProcessInstances(false);
    }

    public Collection<Process> getAllProcessInstances(boolean transitive) {
        Collection<Process> result = new ArrayList<Process>();
        final RDFSNamedClass cls = getProcessClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Process) owlIndividual.as(Process.class) );
        }
        return result;
    }


    public RDFSNamedClass getProcessAggregateClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#ProcessAggregate";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ProcessAggregate createProcessAggregate(String name) {
        final RDFSNamedClass cls = getProcessAggregateClass();
        return (ProcessAggregate) cls.createInstance(name).as(ProcessAggregate.class);
    }

    public ProcessAggregate getProcessAggregate(String name) {
        return (ProcessAggregate) owlModel.getRDFResource(name).as(ProcessAggregate.class);
    }

    public Collection<ProcessAggregate> getAllProcessAggregateInstances() {
        return getAllProcessAggregateInstances(false);
    }

    public Collection<ProcessAggregate> getAllProcessAggregateInstances(boolean transitive) {
        Collection<ProcessAggregate> result = new ArrayList<ProcessAggregate>();
        final RDFSNamedClass cls = getProcessAggregateClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ProcessAggregate) owlIndividual.as(ProcessAggregate.class) );
        }
        return result;
    }


    public RDFSNamedClass getProcessBoundaryClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#ProcessBoundary";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ProcessBoundary createProcessBoundary(String name) {
        final RDFSNamedClass cls = getProcessBoundaryClass();
        return (ProcessBoundary) cls.createInstance(name).as(ProcessBoundary.class);
    }

    public ProcessBoundary getProcessBoundary(String name) {
        return (ProcessBoundary) owlModel.getRDFResource(name).as(ProcessBoundary.class);
    }

    public Collection<ProcessBoundary> getAllProcessBoundaryInstances() {
        return getAllProcessBoundaryInstances(false);
    }

    public Collection<ProcessBoundary> getAllProcessBoundaryInstances(boolean transitive) {
        Collection<ProcessBoundary> result = new ArrayList<ProcessBoundary>();
        final RDFSNamedClass cls = getProcessBoundaryClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ProcessBoundary) owlIndividual.as(ProcessBoundary.class) );
        }
        return result;
    }


    public RDFSNamedClass getProcessualContextClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#ProcessualContext";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ProcessualContext createProcessualContext(String name) {
        final RDFSNamedClass cls = getProcessualContextClass();
        return (ProcessualContext) cls.createInstance(name).as(ProcessualContext.class);
    }

    public ProcessualContext getProcessualContext(String name) {
        return (ProcessualContext) owlModel.getRDFResource(name).as(ProcessualContext.class);
    }

    public Collection<ProcessualContext> getAllProcessualContextInstances() {
        return getAllProcessualContextInstances(false);
    }

    public Collection<ProcessualContext> getAllProcessualContextInstances(boolean transitive) {
        Collection<ProcessualContext> result = new ArrayList<ProcessualContext>();
        final RDFSNamedClass cls = getProcessualContextClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ProcessualContext) owlIndividual.as(ProcessualContext.class) );
        }
        return result;
    }


    public RDFSNamedClass getScatteredSpatiotemporalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#ScatteredSpatiotemporalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ScatteredSpatiotemporalRegion createScatteredSpatiotemporalRegion(String name) {
        final RDFSNamedClass cls = getScatteredSpatiotemporalRegionClass();
        return (ScatteredSpatiotemporalRegion) cls.createInstance(name).as(ScatteredSpatiotemporalRegion.class);
    }

    public ScatteredSpatiotemporalRegion getScatteredSpatiotemporalRegion(String name) {
        return (ScatteredSpatiotemporalRegion) owlModel.getRDFResource(name).as(ScatteredSpatiotemporalRegion.class);
    }

    public Collection<ScatteredSpatiotemporalRegion> getAllScatteredSpatiotemporalRegionInstances() {
        return getAllScatteredSpatiotemporalRegionInstances(false);
    }

    public Collection<ScatteredSpatiotemporalRegion> getAllScatteredSpatiotemporalRegionInstances(boolean transitive) {
        Collection<ScatteredSpatiotemporalRegion> result = new ArrayList<ScatteredSpatiotemporalRegion>();
        final RDFSNamedClass cls = getScatteredSpatiotemporalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ScatteredSpatiotemporalRegion) owlIndividual.as(ScatteredSpatiotemporalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getScatteredTemporalRegionClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1/span#ScatteredTemporalRegion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ScatteredTemporalRegion createScatteredTemporalRegion(String name) {
        final RDFSNamedClass cls = getScatteredTemporalRegionClass();
        return (ScatteredTemporalRegion) cls.createInstance(name).as(ScatteredTemporalRegion.class);
    }

    public ScatteredTemporalRegion getScatteredTemporalRegion(String name) {
        return (ScatteredTemporalRegion) owlModel.getRDFResource(name).as(ScatteredTemporalRegion.class);
    }

    public Collection<ScatteredTemporalRegion> getAllScatteredTemporalRegionInstances() {
        return getAllScatteredTemporalRegionInstances(false);
    }

    public Collection<ScatteredTemporalRegion> getAllScatteredTemporalRegionInstances(boolean transitive) {
        Collection<ScatteredTemporalRegion> result = new ArrayList<ScatteredTemporalRegion>();
        final RDFSNamedClass cls = getScatteredTemporalRegionClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (ScatteredTemporalRegion) owlIndividual.as(ScatteredTemporalRegion.class) );
        }
        return result;
    }


    public RDFSNamedClass getEntityClass() {
        final String uri = "http://www.ifomis.org/bfo/1.1#Entity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Entity createEntity(String name) {
        final RDFSNamedClass cls = getEntityClass();
        return (Entity) cls.createInstance(name).as(Entity.class);
    }

    public Entity getEntity(String name) {
        return (Entity) owlModel.getRDFResource(name).as(Entity.class);
    }

    public Collection<Entity> getAllEntityInstances() {
        return getAllEntityInstances(false);
    }

    public Collection<Entity> getAllEntityInstances(boolean transitive) {
        Collection<Entity> result = new ArrayList<Entity>();
        final RDFSNamedClass cls = getEntityClass();
        RDFResource owlIndividual;
        for (Iterator it = cls.getInstances(transitive).iterator();it.hasNext();) {
            owlIndividual = (RDFResource) it.next();
            result.add( (Entity) owlIndividual.as(Entity.class) );
        }
        return result;
    }
}
