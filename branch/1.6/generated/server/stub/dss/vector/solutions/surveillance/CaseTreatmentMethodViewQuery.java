package dss.vector.solutions.surveillance;

/**
 *
 * @author Autogenerated by RunwaySDK
 */
public class CaseTreatmentMethodViewQuery extends dss.vector.solutions.surveillance.CaseTreatmentMethodViewQueryBase  implements com.runwaysdk.generation.loader.Reloadable
{
private static final long serialVersionUID = -687951270;

  public CaseTreatmentMethodViewQuery(com.runwaysdk.query.QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultCaseTreatmentMethodViewBuilder(queryFactory));
  }

  public CaseTreatmentMethodViewQuery(com.runwaysdk.query.QueryFactory queryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  class DefaultCaseTreatmentMethodViewBuilder extends com.runwaysdk.query.ViewQueryBuilder implements com.runwaysdk.generation.loader.Reloadable
  {
    private CaseTreatmentMethodQuery query;

    public DefaultCaseTreatmentMethodViewBuilder(com.runwaysdk.query.QueryFactory queryFactory)
    {
      super(queryFactory);
      
      this.query = new CaseTreatmentMethodQuery(queryFactory);
    }

    protected CaseTreatmentMethodViewQuery getViewQuery()
    {
      return (CaseTreatmentMethodViewQuery)super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      CaseTreatmentMethodViewQuery vQuery = this.getViewQuery();
      
      vQuery.map(CaseTreatmentMethodView.CONCRETEID, query.getId());
      vQuery.map(CaseTreatmentMethodView.AGGREGATEDCASE, query.getAggregatedCase());
      vQuery.map(CaseTreatmentMethodView.TERM, query.getTerm());
      vQuery.map(CaseTreatmentMethodView.AMOUNT, query.getAmount());
    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {

    }

  }
}
