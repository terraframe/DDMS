package dss.vector.solutions.entomology;

import java.util.List;

import com.runwaysdk.generation.loader.Reloadable;
import com.runwaysdk.query.AND;
import com.runwaysdk.query.Condition;
import com.runwaysdk.query.OR;
import com.runwaysdk.query.QueryFactory;
import com.runwaysdk.query.ViewQueryBuilder;

import dss.vector.solutions.geo.AllPathsQuery;

@com.runwaysdk.business.ClassSignature(hash = 1462504487)
/**
 *
 * @author Autogenerated by TerraFrame
 */
public class MosquitoCollectionViewQuery extends dss.vector.solutions.entomology.MosquitoCollectionViewQueryBase implements Reloadable
{
  private static final long serialVersionUID = 1462504487;

  public MosquitoCollectionViewQuery(QueryFactory queryFactory)
  {
    super(queryFactory);
    this.buildQuery(new DefaultMosquitoCollectionViewBuilder(queryFactory));
  }

  public MosquitoCollectionViewQuery(QueryFactory queryFactory, ViewQueryBuilder viewQueryBuilder)
  {
    super(queryFactory, viewQueryBuilder);
  }

  static class DefaultMosquitoCollectionViewBuilder extends ViewQueryBuilder implements Reloadable
  {
    private MosquitoCollectionQuery query;

    public DefaultMosquitoCollectionViewBuilder(QueryFactory queryFactory)
    {
      super(queryFactory);

      query = new MosquitoCollectionQuery(queryFactory);
    }

    protected MosquitoCollectionViewQuery getViewQuery()
    {
      return (MosquitoCollectionViewQuery) super.getViewQuery();
    }

    /**
     * build the select clause
     */
    protected void buildSelectClause()
    {
      MosquitoCollectionViewQuery vQuery = this.getViewQuery();

      vQuery.map(MosquitoCollectionView.CONCRETEID, query.getId());
      vQuery.map(MosquitoCollectionView.GEOENTITY, query.getGeoEntity());
      vQuery.map(MosquitoCollectionView.COLLECTIONDATE, query.getCollectionDate());
      vQuery.map(MosquitoCollectionView.COLLECTIONID, query.getCollectionId());
      vQuery.map(MosquitoCollectionView.COLLECTIONMETHOD, query.getCollectionMethod());
      vQuery.map(MosquitoCollectionView.LIFESTAGE, query.getLifeStage());
      vQuery.map(MosquitoCollectionView.ABUNDANCE, query.getAbundance());

    }

    /**
     * Implement only if additional join criteria is required.
     */
    protected void buildWhereClause()
    {
    }

  }

  public static class SearchQueryBuilder extends DefaultMosquitoCollectionViewBuilder implements Reloadable
  {
    private SearchMosquitoCollectionView view;

    private Condition                    condition;

    public SearchQueryBuilder(QueryFactory queryFactory, SearchMosquitoCollectionView view)
    {
      super(queryFactory);

      this.view = view;
      this.condition = null;
    }

    @Override
    protected void buildWhereClause()
    {
      MosquitoCollectionViewQuery vQuery = this.getViewQuery();

      if (view.getAbundance() != null)
      {
        this.addCondition(vQuery.getAbundance().EQ(view.getAbundance()));
      }

      if (view.getStartDate() != null)
      {
        this.addCondition(vQuery.getCollectionDate().GE(view.getStartDate()));
      }
      else if (view.getCollectionDate() != null)
      {
        this.addCondition(vQuery.getCollectionDate().GE(view.getCollectionDate()));
      }

      if (view.getEndDate() != null)
      {
        this.addCondition(vQuery.getCollectionDate().LE(view.getEndDate()));
      }

      if (view.getCollectionId() != null && !view.getCollectionId().equals(""))
      {
        this.addCondition(vQuery.getCollectionId().EQ(view.getCollectionId()));
      }

      if (view.getCollectionMethod() != null)
      {
        dss.vector.solutions.ontology.AllPathsQuery allPathsQuery = new dss.vector.solutions.ontology.AllPathsQuery(this.getQueryFactory());
        allPathsQuery.WHERE(allPathsQuery.getParentTerm().EQ(view.getCollectionMethod()));

        this.addCondition(vQuery.getCollectionMethod().EQ(allPathsQuery.getChildTerm()));
      }

      if (view.getGeoEntity() != null)
      {
        AllPathsQuery allPathsQuery = new AllPathsQuery(this.getQueryFactory());
        allPathsQuery.WHERE(allPathsQuery.getParentGeoEntity().EQ(view.getGeoEntity()));

        this.addCondition(vQuery.getGeoEntity().EQ(allPathsQuery.getChildGeoEntity()));
      }

      List<LifeStage> list = view.getLifeStage();

      if (list.size() > 0)
      {
        LifeStage[] array = list.toArray(new LifeStage[list.size()]);
        this.addCondition(vQuery.getLifeStage().containsAny(array));
      }

      if (condition != null)
      {
        vQuery.WHERE(condition);
      }
    }

    private void addCondition(Condition newCondition)
    {
      if (condition == null)
      {
        condition = newCondition;
      }
      else
      {
        condition = AND.get(condition, newCondition);
      }
    }
  }

  private static class ValueQueryBuilder extends DefaultMosquitoCollectionViewBuilder implements Reloadable
  {
    private String value;

    protected ValueQueryBuilder(QueryFactory queryFactory, String value)
    {
      super(queryFactory);

      this.value = value;
    }

    @Override
    protected void buildWhereClause()
    {
      MosquitoCollectionViewQuery vQuery = this.getViewQuery();

      String search = "%" + this.value + "%";
      search = search.replace(" ", "% ");

      Condition condition = vQuery.getCollectionId().LIKEi(search);
      condition = OR.get(condition, vQuery.getGeoEntity().getEntityLabel().localize().LIKEi(search));
      condition = OR.get(condition, vQuery.getGeoEntity().getGeoId().LIKEi(search));

      vQuery.WHERE(condition);
    }
  }

  public static MosquitoCollectionViewQuery searchCollections()
  {
    MosquitoCollectionViewQuery query = new MosquitoCollectionViewQuery(new QueryFactory());
    query.restrictRows(15, 1);

    return query;
  }

  public static MosquitoCollectionViewQuery searchCollections(SearchMosquitoCollectionView collection)
  {
    QueryFactory factory = new QueryFactory();
    SearchQueryBuilder builder = new SearchQueryBuilder(factory, collection);

    MosquitoCollectionViewQuery query = new MosquitoCollectionViewQuery(factory, builder);
    query.restrictRows(15, 1);

    return query;
  }

  public static MosquitoCollectionViewQuery searchCollections(String value)
  {
    QueryFactory factory = new QueryFactory();
    ValueQueryBuilder builder = new ValueQueryBuilder(factory, value);

    MosquitoCollectionViewQuery query = new MosquitoCollectionViewQuery(factory, builder);
    query.restrictRows(15, 1);
    query.ORDER_BY_ASC(query.getCollectionId());

    return query;
  }
}
