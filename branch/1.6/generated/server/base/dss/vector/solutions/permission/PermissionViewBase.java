package dss.vector.solutions.permission;

@com.runwaysdk.business.ClassSignature(hash = 1540331533)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to PermissionView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class PermissionViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.permission.PermissionView";
  public static java.lang.String ID = "id";
  public static java.lang.String LABEL = "label";
  public static java.lang.String PERMISSION = "permission";
  public static java.lang.String URLID = "urlId";
  private static final long serialVersionUID = 1540331533;
  
  public PermissionViewBase()
  {
    super();
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.permission.PermissionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getLabel()
  {
    return getValue(LABEL);
  }
  
  public void validateLabel()
  {
    this.validateAttribute(LABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.permission.PermissionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(LABEL);
  }
  
  public void setLabel(String value)
  {
    if(value == null)
    {
      setValue(LABEL, "");
    }
    else
    {
      setValue(LABEL, value);
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.permission.PermissionOption> getPermission()
  {
    return (java.util.List<dss.vector.solutions.permission.PermissionOption>) getEnumValues(PERMISSION);
  }
  
  public void addPermission(dss.vector.solutions.permission.PermissionOption value)
  {
    if(value != null)
    {
      addEnumItem(PERMISSION, value.getId());
    }
  }
  
  public void removePermission(dss.vector.solutions.permission.PermissionOption value)
  {
    if(value != null)
    {
      removeEnumItem(PERMISSION, value.getId());
    }
  }
  
  public void clearPermission()
  {
    clearEnum(PERMISSION);
  }
  
  public void validatePermission()
  {
    this.validateAttribute(PERMISSION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF getPermissionMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.permission.PermissionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeEnumerationDAOIF)mdClassIF.definesAttribute(PERMISSION);
  }
  
  public String getUrlId()
  {
    return getValue(URLID);
  }
  
  public void validateUrlId()
  {
    this.validateAttribute(URLID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getUrlIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.permission.PermissionView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(URLID);
  }
  
  public void setUrlId(String value)
  {
    if(value == null)
    {
      setValue(URLID, "");
    }
    else
    {
      setValue(URLID, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static PermissionView get(String id)
  {
    return (PermissionView) com.runwaysdk.business.View.get(id);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
