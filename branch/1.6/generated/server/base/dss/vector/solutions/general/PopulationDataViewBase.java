package dss.vector.solutions.general;

@com.runwaysdk.business.ClassSignature(hash = -6832981)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to PopulationDataView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class PopulationDataViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.general.PopulationDataView";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String ENTITYLABEL = "entityLabel";
  public static java.lang.String ESTIMATED = "estimated";
  public static java.lang.String GEOENTITY = "geoEntity";
  public static java.lang.String GROWTHRATE = "growthRate";
  public static java.lang.String ID = "id";
  public static java.lang.String POPULATION = "population";
  public static java.lang.String POPULATIONTYPE = "populationType";
  public static java.lang.String YEAROFDATA = "yearOfData";
  private static final long serialVersionUID = -6832981;
  
  public PopulationDataViewBase()
  {
    super();
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.PopulationDataView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public String getEntityLabel()
  {
    return getValue(ENTITYLABEL);
  }
  
  public void validateEntityLabel()
  {
    this.validateAttribute(ENTITYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getEntityLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.PopulationDataView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ENTITYLABEL);
  }
  
  public void setEntityLabel(String value)
  {
    if(value == null)
    {
      setValue(ENTITYLABEL, "");
    }
    else
    {
      setValue(ENTITYLABEL, value);
    }
  }
  
  public Boolean getEstimated()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ESTIMATED));
  }
  
  public void validateEstimated()
  {
    this.validateAttribute(ESTIMATED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getEstimatedMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.PopulationDataView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(ESTIMATED);
  }
  
  public void setEstimated(Boolean value)
  {
    if(value == null)
    {
      setValue(ESTIMATED, "");
    }
    else
    {
      setValue(ESTIMATED, java.lang.Boolean.toString(value));
    }
  }
  
  public String getGeoEntity()
  {
    return getValue(GEOENTITY);
  }
  
  public void validateGeoEntity()
  {
    this.validateAttribute(GEOENTITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getGeoEntityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.PopulationDataView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(GEOENTITY);
  }
  
  public void setGeoEntity(String value)
  {
    if(value == null)
    {
      setValue(GEOENTITY, "");
    }
    else
    {
      setValue(GEOENTITY, value);
    }
  }
  
  public Double getGrowthRate()
  {
    return com.runwaysdk.constants.MdAttributeDoubleUtil.getTypeSafeValue(getValue(GROWTHRATE));
  }
  
  public void validateGrowthRate()
  {
    this.validateAttribute(GROWTHRATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getGrowthRateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.PopulationDataView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(GROWTHRATE);
  }
  
  public void setGrowthRate(Double value)
  {
    if(value == null)
    {
      setValue(GROWTHRATE, "");
    }
    else
    {
      setValue(GROWTHRATE, java.lang.Double.toString(value));
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.PopulationDataView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public Long getPopulation()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(POPULATION));
  }
  
  public void validatePopulation()
  {
    this.validateAttribute(POPULATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getPopulationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.PopulationDataView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(POPULATION);
  }
  
  public void setPopulation(Long value)
  {
    if(value == null)
    {
      setValue(POPULATION, "");
    }
    else
    {
      setValue(POPULATION, java.lang.Long.toString(value));
    }
  }
  
  public Boolean getPopulationType()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(POPULATIONTYPE));
  }
  
  public void validatePopulationType()
  {
    this.validateAttribute(POPULATIONTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getPopulationTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.PopulationDataView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(POPULATIONTYPE);
  }
  
  public void setPopulationType(Boolean value)
  {
    if(value == null)
    {
      setValue(POPULATIONTYPE, "");
    }
    else
    {
      setValue(POPULATIONTYPE, java.lang.Boolean.toString(value));
    }
  }
  
  public Integer getYearOfData()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(YEAROFDATA));
  }
  
  public void validateYearOfData()
  {
    this.validateAttribute(YEAROFDATA);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getYearOfDataMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.general.PopulationDataView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(YEAROFDATA);
  }
  
  public void setYearOfData(Integer value)
  {
    if(value == null)
    {
      setValue(YEAROFDATA, "");
    }
    else
    {
      setValue(YEAROFDATA, java.lang.Integer.toString(value));
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static PopulationDataView get(String id)
  {
    return (PopulationDataView) com.runwaysdk.business.View.get(id);
  }
  
  public static dss.vector.solutions.general.PopulationDataView[] applyAll(dss.vector.solutions.general.PopulationDataView[] views)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.general.PopulationDataView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.general.PopulationDataView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    PopulationDataView _instance = PopulationDataView.get(id);
    _instance.deleteConcrete();
  }
  
  public java.lang.Long getCalculatedPopulation()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.general.PopulationDataView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.Long getCalculatedPopulation(java.lang.String id)
  {
    PopulationDataView _instance = PopulationDataView.get(id);
    return _instance.getCalculatedPopulation();
  }
  
  public static dss.vector.solutions.general.PopulationDataView[] getFacilityViews(java.lang.String geoId, java.lang.Integer yearOfData)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.general.PopulationDataView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.general.PopulationDataView[] getViews(java.lang.String geoId, java.lang.Integer yearOfData)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.general.PopulationDataView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
