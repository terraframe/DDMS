package dss.vector.solutions.irs;

@com.runwaysdk.business.ClassSignature(hash = 2124837604)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to InsecticideBrandView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class InsecticideBrandViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.irs.InsecticideBrandView";
  public static java.lang.String ACTIVEINGREDIENT = "activeIngredient";
  public static java.lang.String CONCENTRATIONQUALIFIER = "concentrationQualifier";
  public static java.lang.String CONCENTRATIONQUANTIFIER = "concentrationQuantifier";
  public static java.lang.String ENABLED = "enabled";
  public static java.lang.String ID = "id";
  public static java.lang.String INSECTICDEID = "insecticdeId";
  public static java.lang.String INSECTICIDEUSE = "insecticideUse";
  public static java.lang.String PRODUCTNAME = "productName";
  public static java.lang.String UNITQUALIFIER = "unitQualifier";
  public static java.lang.String UNITQUANTIFIER = "unitQuantifier";
  public static java.lang.String UNITSPERAPPLICATION = "unitsPerApplication";
  public static java.lang.String USEDETAIL = "useDetail";
  private static final long serialVersionUID = 2124837604;
  
  public InsecticideBrandViewBase()
  {
    super();
  }
  
  public dss.vector.solutions.ontology.Term getActiveIngredient()
  {
    if (getValue(ACTIVEINGREDIENT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(ACTIVEINGREDIENT));
    }
  }
  
  public String getActiveIngredientId()
  {
    return getValue(ACTIVEINGREDIENT);
  }
  
  public void validateActiveIngredient()
  {
    this.validateAttribute(ACTIVEINGREDIENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getActiveIngredientMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(ACTIVEINGREDIENT);
  }
  
  public void setActiveIngredient(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(ACTIVEINGREDIENT, "");
    }
    else
    {
      setValue(ACTIVEINGREDIENT, value.getId());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.irs.InsecticideBrandConcentrationQualifier> getConcentrationQualifier()
  {
    return (java.util.List<dss.vector.solutions.irs.InsecticideBrandConcentrationQualifier>) getEnumValues(CONCENTRATIONQUALIFIER);
  }
  
  public void addConcentrationQualifier(dss.vector.solutions.irs.InsecticideBrandConcentrationQualifier value)
  {
    if(value != null)
    {
      addEnumItem(CONCENTRATIONQUALIFIER, value.getId());
    }
  }
  
  public void removeConcentrationQualifier(dss.vector.solutions.irs.InsecticideBrandConcentrationQualifier value)
  {
    if(value != null)
    {
      removeEnumItem(CONCENTRATIONQUALIFIER, value.getId());
    }
  }
  
  public void clearConcentrationQualifier()
  {
    clearEnum(CONCENTRATIONQUALIFIER);
  }
  
  public void validateConcentrationQualifier()
  {
    this.validateAttribute(CONCENTRATIONQUALIFIER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getConcentrationQualifierMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(CONCENTRATIONQUALIFIER);
  }
  
  public java.math.BigDecimal getConcentrationQuantifier()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(CONCENTRATIONQUANTIFIER));
  }
  
  public void validateConcentrationQuantifier()
  {
    this.validateAttribute(CONCENTRATIONQUANTIFIER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getConcentrationQuantifierMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(CONCENTRATIONQUANTIFIER);
  }
  
  public void setConcentrationQuantifier(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(CONCENTRATIONQUANTIFIER, "");
    }
    else
    {
      setValue(CONCENTRATIONQUANTIFIER, value.toString());
    }
  }
  
  public Boolean getEnabled()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ENABLED));
  }
  
  public void validateEnabled()
  {
    this.validateAttribute(ENABLED);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getEnabledMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(ENABLED);
  }
  
  public void setEnabled(Boolean value)
  {
    if(value == null)
    {
      setValue(ENABLED, "");
    }
    else
    {
      setValue(ENABLED, java.lang.Boolean.toString(value));
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getInsecticdeId()
  {
    return getValue(INSECTICDEID);
  }
  
  public void validateInsecticdeId()
  {
    this.validateAttribute(INSECTICDEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getInsecticdeIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(INSECTICDEID);
  }
  
  public void setInsecticdeId(String value)
  {
    if(value == null)
    {
      setValue(INSECTICDEID, "");
    }
    else
    {
      setValue(INSECTICDEID, value);
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.irs.InsecticideBrandUse> getInsecticideUse()
  {
    return (java.util.List<dss.vector.solutions.irs.InsecticideBrandUse>) getEnumValues(INSECTICIDEUSE);
  }
  
  public void addInsecticideUse(dss.vector.solutions.irs.InsecticideBrandUse value)
  {
    if(value != null)
    {
      addEnumItem(INSECTICIDEUSE, value.getId());
    }
  }
  
  public void removeInsecticideUse(dss.vector.solutions.irs.InsecticideBrandUse value)
  {
    if(value != null)
    {
      removeEnumItem(INSECTICIDEUSE, value.getId());
    }
  }
  
  public void clearInsecticideUse()
  {
    clearEnum(INSECTICIDEUSE);
  }
  
  public void validateInsecticideUse()
  {
    this.validateAttribute(INSECTICIDEUSE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getInsecticideUseMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(INSECTICIDEUSE);
  }
  
  public dss.vector.solutions.ontology.Term getProductName()
  {
    if (getValue(PRODUCTNAME).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(PRODUCTNAME));
    }
  }
  
  public String getProductNameId()
  {
    return getValue(PRODUCTNAME);
  }
  
  public void validateProductName()
  {
    this.validateAttribute(PRODUCTNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getProductNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(PRODUCTNAME);
  }
  
  public void setProductName(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(PRODUCTNAME, "");
    }
    else
    {
      setValue(PRODUCTNAME, value.getId());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.irs.InsecticideBrandUnitQualifier> getUnitQualifier()
  {
    return (java.util.List<dss.vector.solutions.irs.InsecticideBrandUnitQualifier>) getEnumValues(UNITQUALIFIER);
  }
  
  public void addUnitQualifier(dss.vector.solutions.irs.InsecticideBrandUnitQualifier value)
  {
    if(value != null)
    {
      addEnumItem(UNITQUALIFIER, value.getId());
    }
  }
  
  public void removeUnitQualifier(dss.vector.solutions.irs.InsecticideBrandUnitQualifier value)
  {
    if(value != null)
    {
      removeEnumItem(UNITQUALIFIER, value.getId());
    }
  }
  
  public void clearUnitQualifier()
  {
    clearEnum(UNITQUALIFIER);
  }
  
  public void validateUnitQualifier()
  {
    this.validateAttribute(UNITQUALIFIER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getUnitQualifierMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(UNITQUALIFIER);
  }
  
  public java.math.BigDecimal getUnitQuantifier()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(UNITQUANTIFIER));
  }
  
  public void validateUnitQuantifier()
  {
    this.validateAttribute(UNITQUANTIFIER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getUnitQuantifierMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(UNITQUANTIFIER);
  }
  
  public void setUnitQuantifier(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(UNITQUANTIFIER, "");
    }
    else
    {
      setValue(UNITQUANTIFIER, value.toString());
    }
  }
  
  public Integer getUnitsPerApplication()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(UNITSPERAPPLICATION));
  }
  
  public void validateUnitsPerApplication()
  {
    this.validateAttribute(UNITSPERAPPLICATION);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getUnitsPerApplicationMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(UNITSPERAPPLICATION);
  }
  
  public void setUnitsPerApplication(Integer value)
  {
    if(value == null)
    {
      setValue(UNITSPERAPPLICATION, "");
    }
    else
    {
      setValue(UNITSPERAPPLICATION, java.lang.Integer.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getUseDetail()
  {
    if (getValue(USEDETAIL).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(USEDETAIL));
    }
  }
  
  public String getUseDetailId()
  {
    return getValue(USEDETAIL);
  }
  
  public void validateUseDetail()
  {
    this.validateAttribute(USEDETAIL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getUseDetailMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.irs.InsecticideBrandView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(USEDETAIL);
  }
  
  public void setUseDetail(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(USEDETAIL, "");
    }
    else
    {
      setValue(USEDETAIL, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static InsecticideBrandView get(String id)
  {
    return (InsecticideBrandView) com.runwaysdk.business.View.get(id);
  }
  
  public static dss.vector.solutions.irs.InsecticideBrandView[] applyAll(dss.vector.solutions.irs.InsecticideBrandView[] insecticides)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideBrandView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void deleteConcrete()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideBrandView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void deleteConcrete(java.lang.String id)
  {
    InsecticideBrandView _instance = InsecticideBrandView.get(id);
    _instance.deleteConcrete();
  }
  
  public static dss.vector.solutions.irs.InsecticideBrandView[] getAll()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideBrandView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.irs.InsecticideBrandView[] getAllActive()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideBrandView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.irs.InsecticideBrandView[] getControlInterventionInsecticideBrands()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideBrandView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.irs.InsecticideBrandView[] getEfficacyAssayInsecticideBrands()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideBrandView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.irs.InsecticideBrandView[] getIRSInsecticideBrands()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideBrandView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.irs.InsecticideBrandView[] getNozzleInsecticideBrands()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.irs.InsecticideBrandView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
