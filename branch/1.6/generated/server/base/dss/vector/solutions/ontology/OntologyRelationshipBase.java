package dss.vector.solutions.ontology;

@com.runwaysdk.business.ClassSignature(hash = -150652703)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to OntologyRelationship.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class OntologyRelationshipBase extends com.runwaysdk.business.Business implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.ontology.OntologyRelationship";
  public static java.lang.String ALTID = "altId";
  public static java.lang.String COMMENT = "comment";
  public static java.lang.String CREATEDATE = "createDate";
  public static java.lang.String CREATEDBY = "createdBy";
  public static java.lang.String DEF = "def";
  public static java.lang.String ENTITYDOMAIN = "entityDomain";
  public static java.lang.String ID = "id";
  public static java.lang.String INVERSEOF = "inverseOf";
  public static java.lang.String INVERSEOFONINSTANCELEVEL = "inverseOfOnInstanceLevel";
  public static java.lang.String ISANTISYMMETRIC = "isAntiSymmetric";
  public static java.lang.String ISBUILTIN = "isBuiltIn";
  public static java.lang.String ISOBSOLETE = "isObsolete";
  public static java.lang.String ISREFLEXIVE = "isReflexive";
  public static java.lang.String ISTRANSITIVE = "isTransitive";
  public static java.lang.String KEYNAME = "keyName";
  public static java.lang.String LASTUPDATEDATE = "lastUpdateDate";
  public static java.lang.String LASTUPDATEDBY = "lastUpdatedBy";
  public static java.lang.String LOCKEDBY = "lockedBy";
  public static java.lang.String NAME = "name";
  public static java.lang.String NAMESPACE = "namespace";
  public static java.lang.String OWNER = "owner";
  public static java.lang.String RELATIONSHIPID = "relationshipId";
  public static java.lang.String SEQ = "seq";
  public static java.lang.String SITEMASTER = "siteMaster";
  public static java.lang.String TYPE = "type";
  private static final long serialVersionUID = -150652703;
  
  public OntologyRelationshipBase()
  {
    super();
  }
  
  public String getAltId()
  {
    return getValue(ALTID);
  }
  
  public void validateAltId()
  {
    this.validateAttribute(ALTID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getAltIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ALTID);
  }
  
  public void setAltId(String value)
  {
    if(value == null)
    {
      setValue(ALTID, "");
    }
    else
    {
      setValue(ALTID, value);
    }
  }
  
  public String getComment()
  {
    return getValue(COMMENT);
  }
  
  public void validateComment()
  {
    this.validateAttribute(COMMENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getCommentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(COMMENT);
  }
  
  public void setComment(String value)
  {
    if(value == null)
    {
      setValue(COMMENT, "");
    }
    else
    {
      setValue(COMMENT, value);
    }
  }
  
  public java.util.Date getCreateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(CREATEDATE));
  }
  
  public void validateCreateDate()
  {
    this.validateAttribute(CREATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getCreateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(CREATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getCreatedBy()
  {
    if (getValue(CREATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(CREATEDBY));
    }
  }
  
  public String getCreatedById()
  {
    return getValue(CREATEDBY);
  }
  
  public void validateCreatedBy()
  {
    this.validateAttribute(CREATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getCreatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(CREATEDBY);
  }
  
  public String getDef()
  {
    return getValue(DEF);
  }
  
  public void validateDef()
  {
    this.validateAttribute(DEF);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getDefMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(DEF);
  }
  
  public void setDef(String value)
  {
    if(value == null)
    {
      setValue(DEF, "");
    }
    else
    {
      setValue(DEF, value);
    }
  }
  
  public com.runwaysdk.system.metadata.MdDomain getEntityDomain()
  {
    if (getValue(ENTITYDOMAIN).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.metadata.MdDomain.get(getValue(ENTITYDOMAIN));
    }
  }
  
  public String getEntityDomainId()
  {
    return getValue(ENTITYDOMAIN);
  }
  
  public void validateEntityDomain()
  {
    this.validateAttribute(ENTITYDOMAIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getEntityDomainMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ENTITYDOMAIN);
  }
  
  public void setEntityDomain(com.runwaysdk.system.metadata.MdDomain value)
  {
    if(value == null)
    {
      setValue(ENTITYDOMAIN, "");
    }
    else
    {
      setValue(ENTITYDOMAIN, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.ontology.OntologyRelationship getInverseOf()
  {
    if (getValue(INVERSEOF).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.OntologyRelationship.get(getValue(INVERSEOF));
    }
  }
  
  public String getInverseOfId()
  {
    return getValue(INVERSEOF);
  }
  
  public void validateInverseOf()
  {
    this.validateAttribute(INVERSEOF);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getInverseOfMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(INVERSEOF);
  }
  
  public void setInverseOf(dss.vector.solutions.ontology.OntologyRelationship value)
  {
    if(value == null)
    {
      setValue(INVERSEOF, "");
    }
    else
    {
      setValue(INVERSEOF, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.OntologyRelationship getInverseOfOnInstanceLevel()
  {
    if (getValue(INVERSEOFONINSTANCELEVEL).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.OntologyRelationship.get(getValue(INVERSEOFONINSTANCELEVEL));
    }
  }
  
  public String getInverseOfOnInstanceLevelId()
  {
    return getValue(INVERSEOFONINSTANCELEVEL);
  }
  
  public void validateInverseOfOnInstanceLevel()
  {
    this.validateAttribute(INVERSEOFONINSTANCELEVEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getInverseOfOnInstanceLevelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(INVERSEOFONINSTANCELEVEL);
  }
  
  public void setInverseOfOnInstanceLevel(dss.vector.solutions.ontology.OntologyRelationship value)
  {
    if(value == null)
    {
      setValue(INVERSEOFONINSTANCELEVEL, "");
    }
    else
    {
      setValue(INVERSEOFONINSTANCELEVEL, value.getId());
    }
  }
  
  public Boolean getIsAntiSymmetric()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISANTISYMMETRIC));
  }
  
  public void validateIsAntiSymmetric()
  {
    this.validateAttribute(ISANTISYMMETRIC);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsAntiSymmetricMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISANTISYMMETRIC);
  }
  
  public void setIsAntiSymmetric(Boolean value)
  {
    if(value == null)
    {
      setValue(ISANTISYMMETRIC, "");
    }
    else
    {
      setValue(ISANTISYMMETRIC, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getIsBuiltIn()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISBUILTIN));
  }
  
  public void validateIsBuiltIn()
  {
    this.validateAttribute(ISBUILTIN);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsBuiltInMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISBUILTIN);
  }
  
  public void setIsBuiltIn(Boolean value)
  {
    if(value == null)
    {
      setValue(ISBUILTIN, "");
    }
    else
    {
      setValue(ISBUILTIN, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getIsObsolete()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISOBSOLETE));
  }
  
  public void validateIsObsolete()
  {
    this.validateAttribute(ISOBSOLETE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsObsoleteMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISOBSOLETE);
  }
  
  public void setIsObsolete(Boolean value)
  {
    if(value == null)
    {
      setValue(ISOBSOLETE, "");
    }
    else
    {
      setValue(ISOBSOLETE, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getIsReflexive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISREFLEXIVE));
  }
  
  public void validateIsReflexive()
  {
    this.validateAttribute(ISREFLEXIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsReflexiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISREFLEXIVE);
  }
  
  public void setIsReflexive(Boolean value)
  {
    if(value == null)
    {
      setValue(ISREFLEXIVE, "");
    }
    else
    {
      setValue(ISREFLEXIVE, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getIsTransitive()
  {
    return com.runwaysdk.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISTRANSITIVE));
  }
  
  public void validateIsTransitive()
  {
    this.validateAttribute(ISTRANSITIVE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF getIsTransitiveMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeBooleanDAOIF)mdClassIF.definesAttribute(ISTRANSITIVE);
  }
  
  public void setIsTransitive(Boolean value)
  {
    if(value == null)
    {
      setValue(ISTRANSITIVE, "");
    }
    else
    {
      setValue(ISTRANSITIVE, java.lang.Boolean.toString(value));
    }
  }
  
  public String getKeyName()
  {
    return getValue(KEYNAME);
  }
  
  public void validateKeyName()
  {
    this.validateAttribute(KEYNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getKeyNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(KEYNAME);
  }
  
  public void setKeyName(String value)
  {
    if(value == null)
    {
      setValue(KEYNAME, "");
    }
    else
    {
      setValue(KEYNAME, value);
    }
  }
  
  public java.util.Date getLastUpdateDate()
  {
    return com.runwaysdk.constants.MdAttributeDateTimeUtil.getTypeSafeValue(getValue(LASTUPDATEDATE));
  }
  
  public void validateLastUpdateDate()
  {
    this.validateAttribute(LASTUPDATEDATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF getLastUpdateDateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeDateTimeDAOIF)mdClassIF.definesAttribute(LASTUPDATEDATE);
  }
  
  public com.runwaysdk.system.SingleActor getLastUpdatedBy()
  {
    if (getValue(LASTUPDATEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LASTUPDATEDBY));
    }
  }
  
  public String getLastUpdatedById()
  {
    return getValue(LASTUPDATEDBY);
  }
  
  public void validateLastUpdatedBy()
  {
    this.validateAttribute(LASTUPDATEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLastUpdatedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LASTUPDATEDBY);
  }
  
  public com.runwaysdk.system.SingleActor getLockedBy()
  {
    if (getValue(LOCKEDBY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.SingleActor.get(getValue(LOCKEDBY));
    }
  }
  
  public String getLockedById()
  {
    return getValue(LOCKEDBY);
  }
  
  public void validateLockedBy()
  {
    this.validateAttribute(LOCKEDBY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getLockedByMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(LOCKEDBY);
  }
  
  public String getName()
  {
    return getValue(NAME);
  }
  
  public void validateName()
  {
    this.validateAttribute(NAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(NAME);
  }
  
  public void setName(String value)
  {
    if(value == null)
    {
      setValue(NAME, "");
    }
    else
    {
      setValue(NAME, value);
    }
  }
  
  public String getNamespace()
  {
    return getValue(NAMESPACE);
  }
  
  public void validateNamespace()
  {
    this.validateAttribute(NAMESPACE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getNamespaceMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(NAMESPACE);
  }
  
  public void setNamespace(String value)
  {
    if(value == null)
    {
      setValue(NAMESPACE, "");
    }
    else
    {
      setValue(NAMESPACE, value);
    }
  }
  
  public com.runwaysdk.system.Actor getOwner()
  {
    if (getValue(OWNER).trim().equals(""))
    {
      return null;
    }
    else
    {
      return com.runwaysdk.system.Actor.get(getValue(OWNER));
    }
  }
  
  public String getOwnerId()
  {
    return getValue(OWNER);
  }
  
  public void validateOwner()
  {
    this.validateAttribute(OWNER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getOwnerMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(OWNER);
  }
  
  public void setOwner(com.runwaysdk.system.Actor value)
  {
    if(value == null)
    {
      setValue(OWNER, "");
    }
    else
    {
      setValue(OWNER, value.getId());
    }
  }
  
  public String getRelationshipId()
  {
    return getValue(RELATIONSHIPID);
  }
  
  public void validateRelationshipId()
  {
    this.validateAttribute(RELATIONSHIPID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getRelationshipIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(RELATIONSHIPID);
  }
  
  public void setRelationshipId(String value)
  {
    if(value == null)
    {
      setValue(RELATIONSHIPID, "");
    }
    else
    {
      setValue(RELATIONSHIPID, value);
    }
  }
  
  public Long getSeq()
  {
    return com.runwaysdk.constants.MdAttributeLongUtil.getTypeSafeValue(getValue(SEQ));
  }
  
  public void validateSeq()
  {
    this.validateAttribute(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public String getSiteMaster()
  {
    return getValue(SITEMASTER);
  }
  
  public void validateSiteMaster()
  {
    this.validateAttribute(SITEMASTER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSiteMasterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SITEMASTER);
  }
  
  public String getType()
  {
    return getValue(TYPE);
  }
  
  public void validateType()
  {
    this.validateAttribute(TYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.OntologyRelationship.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TYPE);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static OntologyRelationshipQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    OntologyRelationshipQuery query = new OntologyRelationshipQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public dss.vector.solutions.ontology.OntologyHasRelationship addOntology(dss.vector.solutions.ontology.Ontology ontology)
  {
    return (dss.vector.solutions.ontology.OntologyHasRelationship) addParent(ontology, dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
  }
  
  public void removeOntology(dss.vector.solutions.ontology.Ontology ontology)
  {
    removeAllParents(ontology, dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.Ontology> getAllOntology()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.Ontology>) getParents(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.OntologyHasRelationship> getAllOntologyRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.OntologyHasRelationship>) getParentRelationships(dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public dss.vector.solutions.ontology.OntologyHasRelationship getOntologyRel(dss.vector.solutions.ontology.Ontology ontology)
  {
    com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.OntologyHasRelationship> iterator = (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.ontology.OntologyHasRelationship>) getRelationshipsWithParent(ontology, dss.vector.solutions.ontology.OntologyHasRelationship.CLASS);
    try
    {
      if (iterator.hasNext())
      {
        return iterator.next();
      }
      else
      {
        return null;
      }
    }
    finally
    {
      iterator.close();
    }
  }
  
  public static OntologyRelationship get(String id)
  {
    return (OntologyRelationship) com.runwaysdk.business.Business.get(id);
  }
  
  public static OntologyRelationship getByKey(String key)
  {
    return (OntologyRelationship) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static OntologyRelationship lock(java.lang.String id)
  {
    OntologyRelationship _instance = OntologyRelationship.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static OntologyRelationship unlock(java.lang.String id)
  {
    OntologyRelationship _instance = OntologyRelationship.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
