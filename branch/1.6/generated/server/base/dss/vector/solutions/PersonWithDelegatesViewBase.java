package dss.vector.solutions;

@com.runwaysdk.business.ClassSignature(hash = 1156407229)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to PersonWithDelegatesView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class PersonWithDelegatesViewBase extends dss.vector.solutions.PersonView implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.PersonWithDelegatesView";
  public static java.lang.String IPTRECIPIENTDELEGATE = "iptRecipientDelegate";
  public static java.lang.String ITNRECIPIENTDELEGATE = "itnRecipientDelegate";
  public static java.lang.String PATIENTDELEGATE = "patientDelegate";
  public static java.lang.String PHYSICIANDELEGATE = "physicianDelegate";
  public static java.lang.String STOCKSTAFFDELEGATE = "stockStaffDelegate";
  public static java.lang.String SUPERVISORDELEGATE = "supervisorDelegate";
  public static java.lang.String TEAMMEMBERDELEGATE = "teamMemberDelegate";
  public static java.lang.String USERDELEGATE = "userDelegate";
  private static final long serialVersionUID = 1156407229;
  
  public PersonWithDelegatesViewBase()
  {
    super();
  }
  
  public dss.vector.solutions.intervention.monitor.IPTRecipient getIptRecipientDelegate()
  {
    if (getValue(IPTRECIPIENTDELEGATE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.intervention.monitor.IPTRecipient.get(getValue(IPTRECIPIENTDELEGATE));
    }
  }
  
  public String getIptRecipientDelegateId()
  {
    return getValue(IPTRECIPIENTDELEGATE);
  }
  
  public void validateIptRecipientDelegate()
  {
    this.validateAttribute(IPTRECIPIENTDELEGATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getIptRecipientDelegateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.PersonWithDelegatesView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(IPTRECIPIENTDELEGATE);
  }
  
  public void setIptRecipientDelegate(dss.vector.solutions.intervention.monitor.IPTRecipient value)
  {
    if(value == null)
    {
      setValue(IPTRECIPIENTDELEGATE, "");
    }
    else
    {
      setValue(IPTRECIPIENTDELEGATE, value.getId());
    }
  }
  
  public dss.vector.solutions.intervention.monitor.ITNRecipient getItnRecipientDelegate()
  {
    if (getValue(ITNRECIPIENTDELEGATE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.intervention.monitor.ITNRecipient.get(getValue(ITNRECIPIENTDELEGATE));
    }
  }
  
  public String getItnRecipientDelegateId()
  {
    return getValue(ITNRECIPIENTDELEGATE);
  }
  
  public void validateItnRecipientDelegate()
  {
    this.validateAttribute(ITNRECIPIENTDELEGATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getItnRecipientDelegateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.PersonWithDelegatesView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(ITNRECIPIENTDELEGATE);
  }
  
  public void setItnRecipientDelegate(dss.vector.solutions.intervention.monitor.ITNRecipient value)
  {
    if(value == null)
    {
      setValue(ITNRECIPIENTDELEGATE, "");
    }
    else
    {
      setValue(ITNRECIPIENTDELEGATE, value.getId());
    }
  }
  
  public dss.vector.solutions.Patient getPatientDelegate()
  {
    if (getValue(PATIENTDELEGATE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.Patient.get(getValue(PATIENTDELEGATE));
    }
  }
  
  public String getPatientDelegateId()
  {
    return getValue(PATIENTDELEGATE);
  }
  
  public void validatePatientDelegate()
  {
    this.validateAttribute(PATIENTDELEGATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getPatientDelegateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.PersonWithDelegatesView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(PATIENTDELEGATE);
  }
  
  public void setPatientDelegate(dss.vector.solutions.Patient value)
  {
    if(value == null)
    {
      setValue(PATIENTDELEGATE, "");
    }
    else
    {
      setValue(PATIENTDELEGATE, value.getId());
    }
  }
  
  public dss.vector.solutions.Physician getPhysicianDelegate()
  {
    if (getValue(PHYSICIANDELEGATE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.Physician.get(getValue(PHYSICIANDELEGATE));
    }
  }
  
  public String getPhysicianDelegateId()
  {
    return getValue(PHYSICIANDELEGATE);
  }
  
  public void validatePhysicianDelegate()
  {
    this.validateAttribute(PHYSICIANDELEGATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getPhysicianDelegateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.PersonWithDelegatesView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(PHYSICIANDELEGATE);
  }
  
  public void setPhysicianDelegate(dss.vector.solutions.Physician value)
  {
    if(value == null)
    {
      setValue(PHYSICIANDELEGATE, "");
    }
    else
    {
      setValue(PHYSICIANDELEGATE, value.getId());
    }
  }
  
  public dss.vector.solutions.stock.StockStaff getStockStaffDelegate()
  {
    if (getValue(STOCKSTAFFDELEGATE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.stock.StockStaff.get(getValue(STOCKSTAFFDELEGATE));
    }
  }
  
  public String getStockStaffDelegateId()
  {
    return getValue(STOCKSTAFFDELEGATE);
  }
  
  public void validateStockStaffDelegate()
  {
    this.validateAttribute(STOCKSTAFFDELEGATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getStockStaffDelegateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.PersonWithDelegatesView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(STOCKSTAFFDELEGATE);
  }
  
  public void setStockStaffDelegate(dss.vector.solutions.stock.StockStaff value)
  {
    if(value == null)
    {
      setValue(STOCKSTAFFDELEGATE, "");
    }
    else
    {
      setValue(STOCKSTAFFDELEGATE, value.getId());
    }
  }
  
  public dss.vector.solutions.irs.Supervisor getSupervisorDelegate()
  {
    if (getValue(SUPERVISORDELEGATE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.Supervisor.get(getValue(SUPERVISORDELEGATE));
    }
  }
  
  public String getSupervisorDelegateId()
  {
    return getValue(SUPERVISORDELEGATE);
  }
  
  public void validateSupervisorDelegate()
  {
    this.validateAttribute(SUPERVISORDELEGATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getSupervisorDelegateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.PersonWithDelegatesView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(SUPERVISORDELEGATE);
  }
  
  public void setSupervisorDelegate(dss.vector.solutions.irs.Supervisor value)
  {
    if(value == null)
    {
      setValue(SUPERVISORDELEGATE, "");
    }
    else
    {
      setValue(SUPERVISORDELEGATE, value.getId());
    }
  }
  
  public dss.vector.solutions.irs.TeamMember getTeamMemberDelegate()
  {
    if (getValue(TEAMMEMBERDELEGATE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.irs.TeamMember.get(getValue(TEAMMEMBERDELEGATE));
    }
  }
  
  public String getTeamMemberDelegateId()
  {
    return getValue(TEAMMEMBERDELEGATE);
  }
  
  public void validateTeamMemberDelegate()
  {
    this.validateAttribute(TEAMMEMBERDELEGATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getTeamMemberDelegateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.PersonWithDelegatesView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(TEAMMEMBERDELEGATE);
  }
  
  public void setTeamMemberDelegate(dss.vector.solutions.irs.TeamMember value)
  {
    if(value == null)
    {
      setValue(TEAMMEMBERDELEGATE, "");
    }
    else
    {
      setValue(TEAMMEMBERDELEGATE, value.getId());
    }
  }
  
  public dss.vector.solutions.MDSSUser getUserDelegate()
  {
    if (getValue(USERDELEGATE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.MDSSUser.get(getValue(USERDELEGATE));
    }
  }
  
  public String getUserDelegateId()
  {
    return getValue(USERDELEGATE);
  }
  
  public void validateUserDelegate()
  {
    this.validateAttribute(USERDELEGATE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getUserDelegateMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.PersonWithDelegatesView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(USERDELEGATE);
  }
  
  public void setUserDelegate(dss.vector.solutions.MDSSUser value)
  {
    if(value == null)
    {
      setValue(USERDELEGATE, "");
    }
    else
    {
      setValue(USERDELEGATE, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static PersonWithDelegatesView get(String id)
  {
    return (PersonWithDelegatesView) com.runwaysdk.business.View.get(id);
  }
  
  public static dss.vector.solutions.PersonWithDelegatesViewQuery getPage(java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.PersonWithDelegatesView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
