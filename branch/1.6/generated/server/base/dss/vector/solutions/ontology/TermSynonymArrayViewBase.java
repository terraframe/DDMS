package dss.vector.solutions.ontology;

@com.runwaysdk.business.ClassSignature(hash = 958184083)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TermSynonymArrayView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TermSynonymArrayViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.ontology.TermSynonymArrayView";
  public static java.lang.String ID = "id";
  public static java.lang.String SYNONYMIDS = "synonymIds";
  public static java.lang.String SYNONYMNAMES = "synonymNames";
  public static java.lang.String TERM = "term";
  public static java.lang.String TERMDISPLAYLABEL = "termDisplayLabel";
  public static java.lang.String TERMINSTANCEID = "termInstanceId";
  public static java.lang.String TERMNAME = "termName";
  private static final long serialVersionUID = 958184083;
  
  public TermSynonymArrayViewBase()
  {
    super();
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getSynonymIds()
  {
    return getValue(SYNONYMIDS);
  }
  
  public void validateSynonymIds()
  {
    this.validateAttribute(SYNONYMIDS);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSynonymIdsMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SYNONYMIDS);
  }
  
  public void setSynonymIds(String value)
  {
    if(value == null)
    {
      setValue(SYNONYMIDS, "");
    }
    else
    {
      setValue(SYNONYMIDS, value);
    }
  }
  
  public String getSynonymNames()
  {
    return getValue(SYNONYMNAMES);
  }
  
  public void validateSynonymNames()
  {
    this.validateAttribute(SYNONYMNAMES);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getSynonymNamesMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(SYNONYMNAMES);
  }
  
  public void setSynonymNames(String value)
  {
    if(value == null)
    {
      setValue(SYNONYMNAMES, "");
    }
    else
    {
      setValue(SYNONYMNAMES, value);
    }
  }
  
  public dss.vector.solutions.ontology.Term getTerm()
  {
    if (getValue(TERM).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(TERM));
    }
  }
  
  public String getTermId()
  {
    return getValue(TERM);
  }
  
  public void validateTerm()
  {
    this.validateAttribute(TERM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getTermMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(TERM);
  }
  
  public void setTerm(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(TERM, "");
    }
    else
    {
      setValue(TERM, value.getId());
    }
  }
  
  public String getTermDisplayLabel()
  {
    return getValue(TERMDISPLAYLABEL);
  }
  
  public void validateTermDisplayLabel()
  {
    this.validateAttribute(TERMDISPLAYLABEL);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTermDisplayLabelMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TERMDISPLAYLABEL);
  }
  
  public void setTermDisplayLabel(String value)
  {
    if(value == null)
    {
      setValue(TERMDISPLAYLABEL, "");
    }
    else
    {
      setValue(TERMDISPLAYLABEL, value);
    }
  }
  
  public String getTermInstanceId()
  {
    return getValue(TERMINSTANCEID);
  }
  
  public void validateTermInstanceId()
  {
    this.validateAttribute(TERMINSTANCEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTermInstanceIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TERMINSTANCEID);
  }
  
  public void setTermInstanceId(String value)
  {
    if(value == null)
    {
      setValue(TERMINSTANCEID, "");
    }
    else
    {
      setValue(TERMINSTANCEID, value);
    }
  }
  
  public String getTermName()
  {
    return getValue(TERMNAME);
  }
  
  public void validateTermName()
  {
    this.validateAttribute(TERMNAME);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getTermNameMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(TERMNAME);
  }
  
  public void setTermName(String value)
  {
    if(value == null)
    {
      setValue(TERMNAME, "");
    }
    else
    {
      setValue(TERMNAME, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TermSynonymArrayView get(String id)
  {
    return (TermSynonymArrayView) com.runwaysdk.business.View.get(id);
  }
  
  public void applyWithSynonyms(dss.vector.solutions.ontology.TermSynonymView[] synonyms)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.TermSynonymArrayView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void applyWithSynonyms(java.lang.String id, dss.vector.solutions.ontology.TermSynonymView[] synonyms)
  {
    TermSynonymArrayView _instance = TermSynonymArrayView.get(id);
    _instance.applyWithSynonyms(synonyms);
  }
  
  public static dss.vector.solutions.ontology.TermSynonymArrayViewQuery getMostRecent()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.TermSynonymArrayView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static dss.vector.solutions.ontology.TermSynonymArrayView getTermSynonym(java.lang.String termId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.TermSynonymArrayView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void lock()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.TermSynonymArrayView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void lock(java.lang.String id)
  {
    TermSynonymArrayView _instance = TermSynonymArrayView.get(id);
    _instance.lock();
  }
  
  public static dss.vector.solutions.ontology.TermSynonymArrayViewQuery searchByView(dss.vector.solutions.ontology.TermSynonymArrayView view, java.lang.String sortAttribute, java.lang.Boolean isAscending, java.lang.Integer pageSize, java.lang.Integer pageNumber)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.TermSynonymArrayView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void unlock()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ontology.TermSynonymArrayView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void unlock(java.lang.String id)
  {
    TermSynonymArrayView _instance = TermSynonymArrayView.get(id);
    _instance.unlock();
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
