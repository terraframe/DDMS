package dss.vector.solutions.intervention.monitor;

@com.runwaysdk.business.ClassSignature(hash = -1997830616)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AggregatedPremiseVisitView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public  abstract  class AggregatedPremiseVisitViewQueryBase extends com.runwaysdk.query.GeneratedViewQuery
 implements com.runwaysdk.generation.loader.Reloadable
{

  public AggregatedPremiseVisitViewQueryBase(com.runwaysdk.query.QueryFactory componentQueryFactory)
  {
    super(componentQueryFactory);
  }

  public AggregatedPremiseVisitViewQueryBase(com.runwaysdk.query.QueryFactory componentQueryFactory, com.runwaysdk.query.ViewQueryBuilder viewQueryBuilder)
  {
    super(componentQueryFactory, viewQueryBuilder);
  }
  public String getClassType()
  {
    return dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.CLASS;
  }
  public com.runwaysdk.query.SelectableChar getConcreteId()
  {
    return getConcreteId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getConcreteId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.CONCRETEID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getConcreteId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.CONCRETEID, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableChar getEntityLabel()
  {
    return getEntityLabel(null);

  }
 
  public com.runwaysdk.query.SelectableChar getEntityLabel(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.ENTITYLABEL, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getEntityLabel(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.ENTITYLABEL, alias, displayLabel);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity()
  {
    return getGeoEntity(null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias)
  {

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.GEOENTITY, alias, null);

  }
 
  public dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF getGeoEntity(String alias, String displayLabel)
  {

    return (dss.vector.solutions.geo.generated.GeoEntityQuery.GeoEntityQueryReferenceIF)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.GEOENTITY, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableChar getId()
  {
    return getId(null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.ID, alias, null);

  }
 
  public com.runwaysdk.query.SelectableChar getId(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableChar)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.ID, alias, displayLabel);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getInterventionMethod()
  {
    return getInterventionMethod(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getInterventionMethod(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.INTERVENTIONMETHOD, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getInterventionMethod(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.INTERVENTIONMETHOD, alias, displayLabel);

  }
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getNonTreatmentReason()
  {
    return getNonTreatmentReason(null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getNonTreatmentReason(String alias)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.NONTREATMENTREASON, alias, null);

  }
 
  public dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF getNonTreatmentReason(String alias, String displayLabel)
  {

    return (dss.vector.solutions.ontology.TermQuery.TermQueryReferenceIF)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.NONTREATMENTREASON, alias, displayLabel);

  }
  public dss.vector.solutions.intervention.monitor.ControlInterventionQuery.ControlInterventionQueryReferenceIF getPoint()
  {
    return getPoint(null);

  }
 
  public dss.vector.solutions.intervention.monitor.ControlInterventionQuery.ControlInterventionQueryReferenceIF getPoint(String alias)
  {

    return (dss.vector.solutions.intervention.monitor.ControlInterventionQuery.ControlInterventionQueryReferenceIF)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.POINT, alias, null);

  }
 
  public dss.vector.solutions.intervention.monitor.ControlInterventionQuery.ControlInterventionQueryReferenceIF getPoint(String alias, String displayLabel)
  {

    return (dss.vector.solutions.intervention.monitor.ControlInterventionQuery.ControlInterventionQueryReferenceIF)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.POINT, alias, displayLabel);

  }
  public com.runwaysdk.query.SelectableInteger getPremises()
  {
    return getPremises(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getPremises(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.PREMISES, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getPremises(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.PREMISES, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getPremisesAvailable()
  {
    return getPremisesAvailable(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getPremisesAvailable(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.PREMISESAVAILABLE, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getPremisesAvailable(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.PREMISESAVAILABLE, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getPremisesIncluded()
  {
    return getPremisesIncluded(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getPremisesIncluded(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.PREMISESINCLUDED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getPremisesIncluded(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.PREMISESINCLUDED, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getTreated()
  {
    return getTreated(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTreated(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.TREATED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getTreated(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.TREATED, alias, displayLabel);

  }
 
  public com.runwaysdk.query.SelectableInteger getVisited()
  {
    return getVisited(null);

  }
 
  public com.runwaysdk.query.SelectableInteger getVisited(String alias)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.VISITED, alias, null);

  }
 
  public com.runwaysdk.query.SelectableInteger getVisited(String alias, String displayLabel)
  {
    return (com.runwaysdk.query.SelectableInteger)this.getSelectable(dss.vector.solutions.intervention.monitor.AggregatedPremiseVisitView.VISITED, alias, displayLabel);

  }
 
  /**  
   * Returns an iterator of Business objects that match the query criteria specified
   * on this query object. 
   * @return iterator of Business objects that match the query criteria specified
   * on this query object.
   */
  @java.lang.SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends AggregatedPremiseVisitView> getIterator()
  {
    com.runwaysdk.query.ValueIterator valueIterator;
    if (_pageSize != null && _pageNumber != null)
    {
      valueIterator = (com.runwaysdk.query.ValueIterator<com.runwaysdk.dataaccess.ValueObject>)this.getComponentQuery().getIterator(_pageSize, _pageNumber);
    }
    else
    {
      valueIterator = (com.runwaysdk.query.ValueIterator<com.runwaysdk.dataaccess.ValueObject>)this.getComponentQuery().getIterator();
    }
    return new com.runwaysdk.query.ViewIterator<AggregatedPremiseVisitView>(this.getMdClassIF(), valueIterator);
  }

}
