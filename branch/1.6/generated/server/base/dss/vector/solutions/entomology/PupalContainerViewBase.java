package dss.vector.solutions.entomology;

@com.runwaysdk.business.ClassSignature(hash = 1090991178)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to PupalContainerView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class PupalContainerViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.entomology.PupalContainerView";
  public static java.lang.String CONCRETEID = "concreteId";
  public static java.lang.String CONTAINERID = "containerId";
  public static java.lang.String CONTAINERLENGTH = "containerLength";
  public static java.lang.String CONTAINERTYPE = "containerType";
  public static java.lang.String DIAMETER = "diameter";
  public static java.lang.String DRAWDOWNFREQUENCY = "drawdownFrequency";
  public static java.lang.String DRAWDOWNPERCENT = "drawdownPercent";
  public static java.lang.String FILLFREQUENCY = "fillFrequency";
  public static java.lang.String FILLMETHOD = "fillMethod";
  public static java.lang.String HEIGHT = "height";
  public static java.lang.String ID = "id";
  public static java.lang.String LID = "lid";
  public static java.lang.String OPENINGDIAMETER = "openingDiameter";
  public static java.lang.String OPENINGLENGTH = "openingLength";
  public static java.lang.String OPENINGWIDTH = "openingWidth";
  public static java.lang.String PREMISE = "premise";
  public static java.lang.String PUPAEAMOUNT = "pupaeAmount";
  public static java.lang.String ROOF = "roof";
  public static java.lang.String SHADING = "shading";
  public static java.lang.String SHAPE = "shape";
  public static java.lang.String WIDTH = "width";
  private static final long serialVersionUID = 1090991178;
  
  public PupalContainerViewBase()
  {
    super();
  }
  
  public String getConcreteId()
  {
    return getValue(CONCRETEID);
  }
  
  public void validateConcreteId()
  {
    this.validateAttribute(CONCRETEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getConcreteIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(CONCRETEID);
  }
  
  public void setConcreteId(String value)
  {
    if(value == null)
    {
      setValue(CONCRETEID, "");
    }
    else
    {
      setValue(CONCRETEID, value);
    }
  }
  
  public String getContainerId()
  {
    return getValue(CONTAINERID);
  }
  
  public void validateContainerId()
  {
    this.validateAttribute(CONTAINERID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getContainerIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(CONTAINERID);
  }
  
  public void setContainerId(String value)
  {
    if(value == null)
    {
      setValue(CONTAINERID, "");
    }
    else
    {
      setValue(CONTAINERID, value);
    }
  }
  
  public java.math.BigDecimal getContainerLength()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(CONTAINERLENGTH));
  }
  
  public void validateContainerLength()
  {
    this.validateAttribute(CONTAINERLENGTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getContainerLengthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(CONTAINERLENGTH);
  }
  
  public void setContainerLength(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(CONTAINERLENGTH, "");
    }
    else
    {
      setValue(CONTAINERLENGTH, value.toString());
    }
  }
  
  public dss.vector.solutions.ontology.Term getContainerType()
  {
    if (getValue(CONTAINERTYPE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(CONTAINERTYPE));
    }
  }
  
  public String getContainerTypeId()
  {
    return getValue(CONTAINERTYPE);
  }
  
  public void validateContainerType()
  {
    this.validateAttribute(CONTAINERTYPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getContainerTypeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(CONTAINERTYPE);
  }
  
  public void setContainerType(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(CONTAINERTYPE, "");
    }
    else
    {
      setValue(CONTAINERTYPE, value.getId());
    }
  }
  
  public java.math.BigDecimal getDiameter()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(DIAMETER));
  }
  
  public void validateDiameter()
  {
    this.validateAttribute(DIAMETER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getDiameterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(DIAMETER);
  }
  
  public void setDiameter(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(DIAMETER, "");
    }
    else
    {
      setValue(DIAMETER, value.toString());
    }
  }
  
  public dss.vector.solutions.ontology.Term getDrawdownFrequency()
  {
    if (getValue(DRAWDOWNFREQUENCY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(DRAWDOWNFREQUENCY));
    }
  }
  
  public String getDrawdownFrequencyId()
  {
    return getValue(DRAWDOWNFREQUENCY);
  }
  
  public void validateDrawdownFrequency()
  {
    this.validateAttribute(DRAWDOWNFREQUENCY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getDrawdownFrequencyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(DRAWDOWNFREQUENCY);
  }
  
  public void setDrawdownFrequency(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(DRAWDOWNFREQUENCY, "");
    }
    else
    {
      setValue(DRAWDOWNFREQUENCY, value.getId());
    }
  }
  
  public Integer getDrawdownPercent()
  {
    return com.runwaysdk.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(DRAWDOWNPERCENT));
  }
  
  public void validateDrawdownPercent()
  {
    this.validateAttribute(DRAWDOWNPERCENT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getDrawdownPercentMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(DRAWDOWNPERCENT);
  }
  
  public void setDrawdownPercent(Integer value)
  {
    if(value == null)
    {
      setValue(DRAWDOWNPERCENT, "");
    }
    else
    {
      setValue(DRAWDOWNPERCENT, java.lang.Integer.toString(value));
    }
  }
  
  public dss.vector.solutions.ontology.Term getFillFrequency()
  {
    if (getValue(FILLFREQUENCY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(FILLFREQUENCY));
    }
  }
  
  public String getFillFrequencyId()
  {
    return getValue(FILLFREQUENCY);
  }
  
  public void validateFillFrequency()
  {
    this.validateAttribute(FILLFREQUENCY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getFillFrequencyMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(FILLFREQUENCY);
  }
  
  public void setFillFrequency(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(FILLFREQUENCY, "");
    }
    else
    {
      setValue(FILLFREQUENCY, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getFillMethod()
  {
    if (getValue(FILLMETHOD).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(FILLMETHOD));
    }
  }
  
  public String getFillMethodId()
  {
    return getValue(FILLMETHOD);
  }
  
  public void validateFillMethod()
  {
    this.validateAttribute(FILLMETHOD);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getFillMethodMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(FILLMETHOD);
  }
  
  public void setFillMethod(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(FILLMETHOD, "");
    }
    else
    {
      setValue(FILLMETHOD, value.getId());
    }
  }
  
  public java.math.BigDecimal getHeight()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(HEIGHT));
  }
  
  public void validateHeight()
  {
    this.validateAttribute(HEIGHT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getHeightMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(HEIGHT);
  }
  
  public void setHeight(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(HEIGHT, "");
    }
    else
    {
      setValue(HEIGHT, value.toString());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.ontology.Term getLid()
  {
    if (getValue(LID).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(LID));
    }
  }
  
  public String getLidId()
  {
    return getValue(LID);
  }
  
  public void validateLid()
  {
    this.validateAttribute(LID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getLidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(LID);
  }
  
  public void setLid(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(LID, "");
    }
    else
    {
      setValue(LID, value.getId());
    }
  }
  
  public java.math.BigDecimal getOpeningDiameter()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(OPENINGDIAMETER));
  }
  
  public void validateOpeningDiameter()
  {
    this.validateAttribute(OPENINGDIAMETER);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getOpeningDiameterMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(OPENINGDIAMETER);
  }
  
  public void setOpeningDiameter(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(OPENINGDIAMETER, "");
    }
    else
    {
      setValue(OPENINGDIAMETER, value.toString());
    }
  }
  
  public java.math.BigDecimal getOpeningLength()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(OPENINGLENGTH));
  }
  
  public void validateOpeningLength()
  {
    this.validateAttribute(OPENINGLENGTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getOpeningLengthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(OPENINGLENGTH);
  }
  
  public void setOpeningLength(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(OPENINGLENGTH, "");
    }
    else
    {
      setValue(OPENINGLENGTH, value.toString());
    }
  }
  
  public java.math.BigDecimal getOpeningWidth()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(OPENINGWIDTH));
  }
  
  public void validateOpeningWidth()
  {
    this.validateAttribute(OPENINGWIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getOpeningWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(OPENINGWIDTH);
  }
  
  public void setOpeningWidth(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(OPENINGWIDTH, "");
    }
    else
    {
      setValue(OPENINGWIDTH, value.toString());
    }
  }
  
  public dss.vector.solutions.entomology.PupalPremise getPremise()
  {
    if (getValue(PREMISE).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.entomology.PupalPremise.get(getValue(PREMISE));
    }
  }
  
  public String getPremiseId()
  {
    return getValue(PREMISE);
  }
  
  public void validatePremise()
  {
    this.validateAttribute(PREMISE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getPremiseMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(PREMISE);
  }
  
  public void setPremise(dss.vector.solutions.entomology.PupalPremise value)
  {
    if(value == null)
    {
      setValue(PREMISE, "");
    }
    else
    {
      setValue(PREMISE, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getPupaeAmount()
  {
    if (getValue(PUPAEAMOUNT).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(PUPAEAMOUNT));
    }
  }
  
  public String getPupaeAmountId()
  {
    return getValue(PUPAEAMOUNT);
  }
  
  public void validatePupaeAmount()
  {
    this.validateAttribute(PUPAEAMOUNT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getPupaeAmountMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(PUPAEAMOUNT);
  }
  
  public void setPupaeAmount(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(PUPAEAMOUNT, "");
    }
    else
    {
      setValue(PUPAEAMOUNT, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getRoof()
  {
    if (getValue(ROOF).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(ROOF));
    }
  }
  
  public String getRoofId()
  {
    return getValue(ROOF);
  }
  
  public void validateRoof()
  {
    this.validateAttribute(ROOF);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getRoofMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(ROOF);
  }
  
  public void setRoof(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(ROOF, "");
    }
    else
    {
      setValue(ROOF, value.getId());
    }
  }
  
  public dss.vector.solutions.ontology.Term getShading()
  {
    if (getValue(SHADING).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(SHADING));
    }
  }
  
  public String getShadingId()
  {
    return getValue(SHADING);
  }
  
  public void validateShading()
  {
    this.validateAttribute(SHADING);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getShadingMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(SHADING);
  }
  
  public void setShading(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(SHADING, "");
    }
    else
    {
      setValue(SHADING, value.getId());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.entomology.ContainerShape> getShape()
  {
    return (java.util.List<dss.vector.solutions.entomology.ContainerShape>) getEnumValues(SHAPE);
  }
  
  public void addShape(dss.vector.solutions.entomology.ContainerShape value)
  {
    if(value != null)
    {
      addEnumItem(SHAPE, value.getId());
    }
  }
  
  public void removeShape(dss.vector.solutions.entomology.ContainerShape value)
  {
    if(value != null)
    {
      removeEnumItem(SHAPE, value.getId());
    }
  }
  
  public void clearShape()
  {
    clearEnum(SHAPE);
  }
  
  public void validateShape()
  {
    this.validateAttribute(SHAPE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getShapeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(SHAPE);
  }
  
  public java.math.BigDecimal getWidth()
  {
    return com.runwaysdk.constants.MdAttributeDecimalUtil.getTypeSafeValue(getValue(WIDTH));
  }
  
  public void validateWidth()
  {
    this.validateAttribute(WIDTH);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getWidthMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.PupalContainerView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(WIDTH);
  }
  
  public void setWidth(java.math.BigDecimal value)
  {
    if(value == null)
    {
      setValue(WIDTH, "");
    }
    else
    {
      setValue(WIDTH, value.toString());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static PupalContainerView get(String id)
  {
    return (PupalContainerView) com.runwaysdk.business.View.get(id);
  }
  
  public dss.vector.solutions.entomology.PupalContainerAmountView[] getAmounts()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.PupalContainerView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.entomology.PupalContainerAmountView[] getAmounts(java.lang.String id)
  {
    PupalContainerView _instance = PupalContainerView.get(id);
    return _instance.getAmounts();
  }
  
  public static dss.vector.solutions.entomology.PupalContainerAmountView[][] getAmountsForViews(dss.vector.solutions.entomology.PupalContainerView[] views)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.PupalContainerView.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
