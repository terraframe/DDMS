package dss.vector.solutions.ontology;

@com.runwaysdk.business.ClassSignature(hash = 1114932297)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to TermSynonymArrayExcelView.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class TermSynonymArrayExcelViewBase extends com.runwaysdk.business.View implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.ontology.TermSynonymArrayExcelView";
  public static java.lang.String ID = "id";
  public static java.lang.String SYNONYMNAMES = "synonymNames";
  public static java.lang.String TERM = "term";
  public static java.lang.String TERMINSTANCEID = "termInstanceId";
  private static final long serialVersionUID = 1114932297;
  
  public TermSynonymArrayExcelViewBase()
  {
    super();
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayExcelView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getSynonymNames()
  {
    return getValue(SYNONYMNAMES);
  }
  
  public void validateSynonymNames()
  {
    this.validateAttribute(SYNONYMNAMES);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getSynonymNamesMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayExcelView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(SYNONYMNAMES);
  }
  
  public void setSynonymNames(String value)
  {
    if(value == null)
    {
      setValue(SYNONYMNAMES, "");
    }
    else
    {
      setValue(SYNONYMNAMES, value);
    }
  }
  
  public dss.vector.solutions.ontology.Term getTerm()
  {
    if (getValue(TERM).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.ontology.Term.get(getValue(TERM));
    }
  }
  
  public String getTermId()
  {
    return getValue(TERM);
  }
  
  public void validateTerm()
  {
    this.validateAttribute(TERM);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getTermMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayExcelView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(TERM);
  }
  
  public void setTerm(dss.vector.solutions.ontology.Term value)
  {
    if(value == null)
    {
      setValue(TERM, "");
    }
    else
    {
      setValue(TERM, value.getId());
    }
  }
  
  public String getTermInstanceId()
  {
    return getValue(TERMINSTANCEID);
  }
  
  public void validateTermInstanceId()
  {
    this.validateAttribute(TERMINSTANCEID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF getTermInstanceIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ontology.TermSynonymArrayExcelView.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeVirtualDAOIF)mdClassIF.definesAttribute(TERMINSTANCEID);
  }
  
  public void setTermInstanceId(String value)
  {
    if(value == null)
    {
      setValue(TERMINSTANCEID, "");
    }
    else
    {
      setValue(TERMINSTANCEID, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static TermSynonymArrayExcelView get(String id)
  {
    return (TermSynonymArrayExcelView) com.runwaysdk.business.View.get(id);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
