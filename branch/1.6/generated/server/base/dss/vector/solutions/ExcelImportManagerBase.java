package dss.vector.solutions;

@com.runwaysdk.business.ClassSignature(hash = -790890573)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to ExcelImportManager.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class ExcelImportManagerBase extends com.runwaysdk.business.Util implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.ExcelImportManager";
  public static java.lang.String ID = "id";
  public static java.lang.String UNMATCHEDGEOVIEWIDSTRING = "unmatchedGeoViewIdString";
  private static final long serialVersionUID = -790890573;
  
  public ExcelImportManagerBase()
  {
    super();
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ExcelImportManager.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(ID);
  }
  
  public String getUnmatchedGeoViewIdString()
  {
    return getValue(UNMATCHEDGEOVIEWIDSTRING);
  }
  
  public void validateUnmatchedGeoViewIdString()
  {
    this.validateAttribute(UNMATCHEDGEOVIEWIDSTRING);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getUnmatchedGeoViewIdStringMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.ExcelImportManager.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(UNMATCHEDGEOVIEWIDSTRING);
  }
  
  public void setUnmatchedGeoViewIdString(String value)
  {
    if(value == null)
    {
      setValue(UNMATCHEDGEOVIEWIDSTRING, "");
    }
    else
    {
      setValue(UNMATCHEDGEOVIEWIDSTRING, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static ExcelImportManager get(String id)
  {
    return (ExcelImportManager) com.runwaysdk.business.Util.get(id);
  }
  
  public static dss.vector.solutions.ExcelImportManager getNewInstance()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ExcelImportManager.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public dss.vector.solutions.geo.UnknownGeoEntity[] getUnmatchedGeoViews()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ExcelImportManager.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final dss.vector.solutions.geo.UnknownGeoEntity[] getUnmatchedGeoViews(java.lang.String id)
  {
    ExcelImportManager _instance = ExcelImportManager.get(id);
    return _instance.getUnmatchedGeoViews();
  }
  
  public java.io.InputStream importWhatYouCan(java.io.InputStream inputStream, java.lang.String[] params)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.ExcelImportManager.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.io.InputStream importWhatYouCan(java.lang.String id, java.io.InputStream inputStream, java.lang.String[] params)
  {
    ExcelImportManager _instance = ExcelImportManager.get(id);
    return _instance.importWhatYouCan(inputStream, params);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
