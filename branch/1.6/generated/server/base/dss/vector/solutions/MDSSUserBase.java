package dss.vector.solutions;

@com.runwaysdk.business.ClassSignature(hash = -1090319741)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MDSSUser.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class MDSSUserBase extends com.runwaysdk.system.Users implements com.runwaysdk.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.MDSSUser";
  public static java.lang.String GEOROOT = "geoRoot";
  public static java.lang.String PERSON = "person";
  public static java.lang.String ROOTGEOENTITY = "rootGeoEntity";
  private static final long serialVersionUID = -1090319741;
  
  public MDSSUserBase()
  {
    super();
  }
  
  public String getGeoRoot()
  {
    return getValue(GEOROOT);
  }
  
  public void validateGeoRoot()
  {
    this.validateAttribute(GEOROOT);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getGeoRootMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(GEOROOT);
  }
  
  public void setGeoRoot(String value)
  {
    if(value == null)
    {
      setValue(GEOROOT, "");
    }
    else
    {
      setValue(GEOROOT, value);
    }
  }
  
  public dss.vector.solutions.Person getPerson()
  {
    if (getValue(PERSON).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.Person.get(getValue(PERSON));
    }
  }
  
  public String getPersonId()
  {
    return getValue(PERSON);
  }
  
  public void validatePerson()
  {
    this.validateAttribute(PERSON);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getPersonMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(PERSON);
  }
  
  public void setPerson(dss.vector.solutions.Person value)
  {
    if(value == null)
    {
      setValue(PERSON, "");
    }
    else
    {
      setValue(PERSON, value.getId());
    }
  }
  
  public dss.vector.solutions.geo.generated.GeoEntity getRootGeoEntity()
  {
    if (getValue(ROOTGEOENTITY).trim().equals(""))
    {
      return null;
    }
    else
    {
      return dss.vector.solutions.geo.generated.GeoEntity.get(getValue(ROOTGEOENTITY));
    }
  }
  
  public String getRootGeoEntityId()
  {
    return getValue(ROOTGEOENTITY);
  }
  
  public void validateRootGeoEntity()
  {
    this.validateAttribute(ROOTGEOENTITY);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF getRootGeoEntityMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.MDSSUser.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeReferenceDAOIF)mdClassIF.definesAttribute(ROOTGEOENTITY);
  }
  
  public void setRootGeoEntity(dss.vector.solutions.geo.generated.GeoEntity value)
  {
    if(value == null)
    {
      setValue(ROOTGEOENTITY, "");
    }
    else
    {
      setValue(ROOTGEOENTITY, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MDSSUserQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    MDSSUserQuery query = new MDSSUserQuery(new com.runwaysdk.query.QueryFactory());
    com.runwaysdk.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public dss.vector.solutions.query.PersistsSearch addPersistedQueries(dss.vector.solutions.query.SavedSearch savedSearch)
  {
    return (dss.vector.solutions.query.PersistsSearch) addChild(savedSearch, dss.vector.solutions.query.PersistsSearch.CLASS);
  }
  
  public void removePersistedQueries(dss.vector.solutions.query.SavedSearch savedSearch)
  {
    removeAllChildren(savedSearch, dss.vector.solutions.query.PersistsSearch.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.SavedSearch> getAllPersistedQueries()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.SavedSearch>) getChildren(dss.vector.solutions.query.PersistsSearch.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.PersistsSearch> getAllPersistedQueriesRel()
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.PersistsSearch>) getChildRelationships(dss.vector.solutions.query.PersistsSearch.CLASS);
  }
  
  @SuppressWarnings("unchecked")
  public com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.PersistsSearch> getPersistedQueriesRel(dss.vector.solutions.query.SavedSearch savedSearch)
  {
    return (com.runwaysdk.query.OIterator<? extends dss.vector.solutions.query.PersistsSearch>) getRelationshipsWithChild(savedSearch, dss.vector.solutions.query.PersistsSearch.CLASS);
  }
  
  public static MDSSUser get(String id)
  {
    return (MDSSUser) com.runwaysdk.business.Business.get(id);
  }
  
  public static MDSSUser getByKey(String key)
  {
    return (MDSSUser) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static java.lang.Boolean canDeleteAll()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.MDSSUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public void changeDisease(java.lang.String diseaseName)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.MDSSUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void changeDisease(java.lang.String id, java.lang.String diseaseName)
  {
    MDSSUser _instance = MDSSUser.get(id);
    _instance.changeDisease(diseaseName);
  }
  
  public static void changeRootGeoEntity(java.lang.String geoEntityId)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.MDSSUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public java.lang.String getDiseaseName()
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.MDSSUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final java.lang.String getDiseaseName(java.lang.String id)
  {
    MDSSUser _instance = MDSSUser.get(id);
    return _instance.getDiseaseName();
  }
  
  public void updateRoles(java.lang.String[] assign, java.lang.String[] revoke)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.MDSSUser.java";
    throw new com.runwaysdk.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public static final void updateRoles(java.lang.String id, java.lang.String[] assign, java.lang.String[] revoke)
  {
    MDSSUser _instance = MDSSUser.get(id);
    _instance.updateRoles(assign, revoke);
  }
  
  public static MDSSUser lock(java.lang.String id)
  {
    MDSSUser _instance = MDSSUser.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static MDSSUser unlock(java.lang.String id)
  {
    MDSSUser _instance = MDSSUser.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
