package csu.mrc.ivcc.mdss.entomology;

/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MosquitoView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class MosquitoViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "csu.mrc.ivcc.mdss.entomology.MosquitoView";
  public static java.lang.String AESTERASE = "aEsterase";
  public static java.lang.String AESTERASEMETHOD = "aEsteraseMethod";
  public static java.lang.String ACHEBIOCHEMICAL = "acHEBiochemical";
  public static java.lang.String ACHEBIOCHEMICALMETHOD = "acHEBiochemicalMethod";
  public static java.lang.String ACHEMOLECULAR = "acHEMolecular";
  public static java.lang.String ACHEMOLECULARMETHOD = "acHEMolecularMethod";
  public static java.lang.String BESTERASE = "bEsterase";
  public static java.lang.String BESTERASEMETHOD = "bEsteraseMethod";
  public static java.lang.String COLLECTION = "collection";
  public static java.lang.String EKDR = "eKDR";
  public static java.lang.String EKDRMETHOD = "eKDRMethod";
  public static java.lang.String GABA = "gABA";
  public static java.lang.String GABAMETHOD = "gABAMethod";
  public static java.lang.String GST = "gST";
  public static java.lang.String GSTMETHOD = "gSTMethod";
  public static java.lang.String GENERATION = "generation";
  public static java.lang.String ID = "id";
  public static java.lang.String IDENTIFICATIONMETHOD = "identificationMethod";
  public static java.lang.String ISOFEMALE = "isofemale";
  public static java.lang.String MONOOXYGENASE = "monooxygenase";
  public static java.lang.String MONOOXYGENASEMETHOD = "monooxygenaseMethod";
  public static java.lang.String MOSQUITOID = "mosquitoId";
  public static java.lang.String PFALCIPARUM = "pFalciparum";
  public static java.lang.String PFALCIPARUMMETHOD = "pFalciparumMethod";
  public static java.lang.String PMALARIAE = "pMalariae";
  public static java.lang.String PMALARIAEMETHOD = "pMalariaeMethod";
  public static java.lang.String PNPA = "pNPA";
  public static java.lang.String PNPAMETHOD = "pNPAMethod";
  public static java.lang.String POVALE = "pOvale";
  public static java.lang.String POVALEMETHOD = "pOvaleMethod";
  public static java.lang.String PVIVAX = "pVivax";
  public static java.lang.String PVIVAXMETHOD = "pVivaxMethod";
  public static java.lang.String SEX = "sex";
  public static java.lang.String SPECIE = "specie";
  public static java.lang.String TESTDATE = "testDate";
  public static java.lang.String WKDR = "wKDR";
  public static java.lang.String WKDRMETHOD = "wKDRMethod";
  private static final long serialVersionUID = 1236803173160L;
  
  public MosquitoViewBase()
  {
    super();
  }
  
  public Integer getAEsterase()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(AESTERASE));
  }
  
  public void validateAEsterase()
  {
    this.validateAttribute(AESTERASE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAEsteraseMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(AESTERASE);
  }
  
  public void setAEsterase(Integer value)
  {
    if(value == null)
    {
      setValue(AESTERASE, "");
    }
    else
    {
      setValue(AESTERASE, java.lang.Integer.toString(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.BiochemicalMethodology getAEsteraseMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.BiochemicalMethodology.get(getValue(AESTERASEMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAEsteraseMethod()
  {
    this.validateAttribute(AESTERASEMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAEsteraseMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(AESTERASEMETHOD);
  }
  
  public void setAEsteraseMethod(csu.mrc.ivcc.mdss.mo.BiochemicalMethodology value)
  {
    if(value == null)
    {
      setValue(AESTERASEMETHOD, "");
    }
    else
    {
      setValue(AESTERASEMETHOD, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.MolecularAssayResult getAcHEBiochemical()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.MolecularAssayResult.get(getValue(ACHEBIOCHEMICAL));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHEBiochemical()
  {
    this.validateAttribute(ACHEBIOCHEMICAL);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHEBiochemicalMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHEBIOCHEMICAL);
  }
  
  public void setAcHEBiochemical(csu.mrc.ivcc.mdss.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(ACHEBIOCHEMICAL, "");
    }
    else
    {
      setValue(ACHEBIOCHEMICAL, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.BiochemicalMethodology getAcHEBiochemicalMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.BiochemicalMethodology.get(getValue(ACHEBIOCHEMICALMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHEBiochemicalMethod()
  {
    this.validateAttribute(ACHEBIOCHEMICALMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHEBiochemicalMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHEBIOCHEMICALMETHOD);
  }
  
  public void setAcHEBiochemicalMethod(csu.mrc.ivcc.mdss.mo.BiochemicalMethodology value)
  {
    if(value == null)
    {
      setValue(ACHEBIOCHEMICALMETHOD, "");
    }
    else
    {
      setValue(ACHEBIOCHEMICALMETHOD, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.MolecularAssayResult getAcHEMolecular()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.MolecularAssayResult.get(getValue(ACHEMOLECULAR));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHEMolecular()
  {
    this.validateAttribute(ACHEMOLECULAR);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHEMolecularMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHEMOLECULAR);
  }
  
  public void setAcHEMolecular(csu.mrc.ivcc.mdss.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(ACHEMOLECULAR, "");
    }
    else
    {
      setValue(ACHEMOLECULAR, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.InsecticideMethodology getAcHEMolecularMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.InsecticideMethodology.get(getValue(ACHEMOLECULARMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHEMolecularMethod()
  {
    this.validateAttribute(ACHEMOLECULARMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHEMolecularMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHEMOLECULARMETHOD);
  }
  
  public void setAcHEMolecularMethod(csu.mrc.ivcc.mdss.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(ACHEMOLECULARMETHOD, "");
    }
    else
    {
      setValue(ACHEMOLECULARMETHOD, value.getId());
    }
  }
  
  public Integer getBEsterase()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(BESTERASE));
  }
  
  public void validateBEsterase()
  {
    this.validateAttribute(BESTERASE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBEsteraseMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(BESTERASE);
  }
  
  public void setBEsterase(Integer value)
  {
    if(value == null)
    {
      setValue(BESTERASE, "");
    }
    else
    {
      setValue(BESTERASE, java.lang.Integer.toString(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.BiochemicalMethodology getBEsteraseMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.BiochemicalMethodology.get(getValue(BESTERASEMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateBEsteraseMethod()
  {
    this.validateAttribute(BESTERASEMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBEsteraseMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(BESTERASEMETHOD);
  }
  
  public void setBEsteraseMethod(csu.mrc.ivcc.mdss.mo.BiochemicalMethodology value)
  {
    if(value == null)
    {
      setValue(BESTERASEMETHOD, "");
    }
    else
    {
      setValue(BESTERASEMETHOD, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.entomology.AbstractMosquitoCollection getCollection()
  {
    try
    {
      return csu.mrc.ivcc.mdss.entomology.AbstractMosquitoCollection.get(getValue(COLLECTION));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateCollection()
  {
    this.validateAttribute(COLLECTION);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getCollectionMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(COLLECTION);
  }
  
  public void setCollection(csu.mrc.ivcc.mdss.entomology.AbstractMosquitoCollection value)
  {
    if(value == null)
    {
      setValue(COLLECTION, "");
    }
    else
    {
      setValue(COLLECTION, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.MolecularAssayResult getEKDR()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.MolecularAssayResult.get(getValue(EKDR));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateEKDR()
  {
    this.validateAttribute(EKDR);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getEKDRMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(EKDR);
  }
  
  public void setEKDR(csu.mrc.ivcc.mdss.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(EKDR, "");
    }
    else
    {
      setValue(EKDR, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.InsecticideMethodology getEKDRMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.InsecticideMethodology.get(getValue(EKDRMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateEKDRMethod()
  {
    this.validateAttribute(EKDRMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getEKDRMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(EKDRMETHOD);
  }
  
  public void setEKDRMethod(csu.mrc.ivcc.mdss.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(EKDRMETHOD, "");
    }
    else
    {
      setValue(EKDRMETHOD, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.MolecularAssayResult getGABA()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.MolecularAssayResult.get(getValue(GABA));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateGABA()
  {
    this.validateAttribute(GABA);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGABAMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GABA);
  }
  
  public void setGABA(csu.mrc.ivcc.mdss.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(GABA, "");
    }
    else
    {
      setValue(GABA, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.InsecticideMethodology getGABAMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.InsecticideMethodology.get(getValue(GABAMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateGABAMethod()
  {
    this.validateAttribute(GABAMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGABAMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GABAMETHOD);
  }
  
  public void setGABAMethod(csu.mrc.ivcc.mdss.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(GABAMETHOD, "");
    }
    else
    {
      setValue(GABAMETHOD, value.getId());
    }
  }
  
  public Integer getGST()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(GST));
  }
  
  public void validateGST()
  {
    this.validateAttribute(GST);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGSTMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GST);
  }
  
  public void setGST(Integer value)
  {
    if(value == null)
    {
      setValue(GST, "");
    }
    else
    {
      setValue(GST, java.lang.Integer.toString(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.BiochemicalMethodology getGSTMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.BiochemicalMethodology.get(getValue(GSTMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateGSTMethod()
  {
    this.validateAttribute(GSTMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGSTMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GSTMETHOD);
  }
  
  public void setGSTMethod(csu.mrc.ivcc.mdss.mo.BiochemicalMethodology value)
  {
    if(value == null)
    {
      setValue(GSTMETHOD, "");
    }
    else
    {
      setValue(GSTMETHOD, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.Generation getGeneration()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.Generation.get(getValue(GENERATION));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateGeneration()
  {
    this.validateAttribute(GENERATION);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGenerationMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GENERATION);
  }
  
  public void setGeneration(csu.mrc.ivcc.mdss.mo.Generation value)
  {
    if(value == null)
    {
      setValue(GENERATION, "");
    }
    else
    {
      setValue(GENERATION, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public csu.mrc.ivcc.mdss.mo.IdentificationMethod getIdentificationMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.IdentificationMethod.get(getValue(IDENTIFICATIONMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateIdentificationMethod()
  {
    this.validateAttribute(IDENTIFICATIONMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdentificationMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(IDENTIFICATIONMETHOD);
  }
  
  public void setIdentificationMethod(csu.mrc.ivcc.mdss.mo.IdentificationMethod value)
  {
    if(value == null)
    {
      setValue(IDENTIFICATIONMETHOD, "");
    }
    else
    {
      setValue(IDENTIFICATIONMETHOD, value.getId());
    }
  }
  
  public Boolean getIsofemale()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISOFEMALE));
  }
  
  public void validateIsofemale()
  {
    this.validateAttribute(ISOFEMALE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIsofemaleMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ISOFEMALE);
  }
  
  public void setIsofemale(Boolean value)
  {
    if(value == null)
    {
      setValue(ISOFEMALE, "");
    }
    else
    {
      setValue(ISOFEMALE, java.lang.Boolean.toString(value));
    }
  }
  
  public Integer getMonooxygenase()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(MONOOXYGENASE));
  }
  
  public void validateMonooxygenase()
  {
    this.validateAttribute(MONOOXYGENASE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMonooxygenaseMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(MONOOXYGENASE);
  }
  
  public void setMonooxygenase(Integer value)
  {
    if(value == null)
    {
      setValue(MONOOXYGENASE, "");
    }
    else
    {
      setValue(MONOOXYGENASE, java.lang.Integer.toString(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.BiochemicalMethodology getMonooxygenaseMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.BiochemicalMethodology.get(getValue(MONOOXYGENASEMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateMonooxygenaseMethod()
  {
    this.validateAttribute(MONOOXYGENASEMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMonooxygenaseMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(MONOOXYGENASEMETHOD);
  }
  
  public void setMonooxygenaseMethod(csu.mrc.ivcc.mdss.mo.BiochemicalMethodology value)
  {
    if(value == null)
    {
      setValue(MONOOXYGENASEMETHOD, "");
    }
    else
    {
      setValue(MONOOXYGENASEMETHOD, value.getId());
    }
  }
  
  public String getMosquitoId()
  {
    return getValue(MOSQUITOID);
  }
  
  public void validateMosquitoId()
  {
    this.validateAttribute(MOSQUITOID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMosquitoIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(MOSQUITOID);
  }
  
  public void setMosquitoId(String value)
  {
    if(value == null)
    {
      setValue(MOSQUITOID, "");
    }
    else
    {
      setValue(MOSQUITOID, value);
    }
  }
  
  public Boolean getPFalciparum()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PFALCIPARUM));
  }
  
  public void validatePFalciparum()
  {
    this.validateAttribute(PFALCIPARUM);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPFalciparumMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PFALCIPARUM);
  }
  
  public void setPFalciparum(Boolean value)
  {
    if(value == null)
    {
      setValue(PFALCIPARUM, "");
    }
    else
    {
      setValue(PFALCIPARUM, java.lang.Boolean.toString(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.InfectivityMethodology getPFalciparumMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.InfectivityMethodology.get(getValue(PFALCIPARUMMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validatePFalciparumMethod()
  {
    this.validateAttribute(PFALCIPARUMMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPFalciparumMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PFALCIPARUMMETHOD);
  }
  
  public void setPFalciparumMethod(csu.mrc.ivcc.mdss.mo.InfectivityMethodology value)
  {
    if(value == null)
    {
      setValue(PFALCIPARUMMETHOD, "");
    }
    else
    {
      setValue(PFALCIPARUMMETHOD, value.getId());
    }
  }
  
  public Boolean getPMalariae()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PMALARIAE));
  }
  
  public void validatePMalariae()
  {
    this.validateAttribute(PMALARIAE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPMalariaeMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PMALARIAE);
  }
  
  public void setPMalariae(Boolean value)
  {
    if(value == null)
    {
      setValue(PMALARIAE, "");
    }
    else
    {
      setValue(PMALARIAE, java.lang.Boolean.toString(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.InfectivityMethodology getPMalariaeMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.InfectivityMethodology.get(getValue(PMALARIAEMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validatePMalariaeMethod()
  {
    this.validateAttribute(PMALARIAEMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPMalariaeMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PMALARIAEMETHOD);
  }
  
  public void setPMalariaeMethod(csu.mrc.ivcc.mdss.mo.InfectivityMethodology value)
  {
    if(value == null)
    {
      setValue(PMALARIAEMETHOD, "");
    }
    else
    {
      setValue(PMALARIAEMETHOD, value.getId());
    }
  }
  
  public Integer getPNPA()
  {
    return com.terraframe.mojo.constants.MdAttributeIntegerUtil.getTypeSafeValue(getValue(PNPA));
  }
  
  public void validatePNPA()
  {
    this.validateAttribute(PNPA);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPNPAMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PNPA);
  }
  
  public void setPNPA(Integer value)
  {
    if(value == null)
    {
      setValue(PNPA, "");
    }
    else
    {
      setValue(PNPA, java.lang.Integer.toString(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.BiochemicalMethodology getPNPAMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.BiochemicalMethodology.get(getValue(PNPAMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validatePNPAMethod()
  {
    this.validateAttribute(PNPAMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPNPAMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PNPAMETHOD);
  }
  
  public void setPNPAMethod(csu.mrc.ivcc.mdss.mo.BiochemicalMethodology value)
  {
    if(value == null)
    {
      setValue(PNPAMETHOD, "");
    }
    else
    {
      setValue(PNPAMETHOD, value.getId());
    }
  }
  
  public Boolean getPOvale()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(POVALE));
  }
  
  public void validatePOvale()
  {
    this.validateAttribute(POVALE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPOvaleMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(POVALE);
  }
  
  public void setPOvale(Boolean value)
  {
    if(value == null)
    {
      setValue(POVALE, "");
    }
    else
    {
      setValue(POVALE, java.lang.Boolean.toString(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.InfectivityMethodology getPOvaleMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.InfectivityMethodology.get(getValue(POVALEMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validatePOvaleMethod()
  {
    this.validateAttribute(POVALEMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPOvaleMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(POVALEMETHOD);
  }
  
  public void setPOvaleMethod(csu.mrc.ivcc.mdss.mo.InfectivityMethodology value)
  {
    if(value == null)
    {
      setValue(POVALEMETHOD, "");
    }
    else
    {
      setValue(POVALEMETHOD, value.getId());
    }
  }
  
  public Boolean getPVivax()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PVIVAX));
  }
  
  public void validatePVivax()
  {
    this.validateAttribute(PVIVAX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPVivaxMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PVIVAX);
  }
  
  public void setPVivax(Boolean value)
  {
    if(value == null)
    {
      setValue(PVIVAX, "");
    }
    else
    {
      setValue(PVIVAX, java.lang.Boolean.toString(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.InfectivityMethodology getPVivaxMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.InfectivityMethodology.get(getValue(PVIVAXMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validatePVivaxMethod()
  {
    this.validateAttribute(PVIVAXMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPVivaxMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PVIVAXMETHOD);
  }
  
  public void setPVivaxMethod(csu.mrc.ivcc.mdss.mo.InfectivityMethodology value)
  {
    if(value == null)
    {
      setValue(PVIVAXMETHOD, "");
    }
    else
    {
      setValue(PVIVAXMETHOD, value.getId());
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<csu.mrc.ivcc.mdss.entomology.Sex> getSex()
  {
    return (java.util.List<csu.mrc.ivcc.mdss.entomology.Sex>) getEnumValues(SEX);
  }
  
  public void addSex(csu.mrc.ivcc.mdss.entomology.Sex value)
  {
    addEnumItem(SEX, value.getId());
  }
  
  public void removeSex(csu.mrc.ivcc.mdss.entomology.Sex value)
  {
    removeEnumItem(SEX, value.getId());
  }
  
  public void clearSex()
  {
    clearEnum(SEX);
  }
  
  public void validateSex()
  {
    this.validateAttribute(SEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(SEX);
  }
  
  public csu.mrc.ivcc.mdss.mo.Specie getSpecie()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.Specie.get(getValue(SPECIE));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateSpecie()
  {
    this.validateAttribute(SPECIE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSpecieMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(SPECIE);
  }
  
  public void setSpecie(csu.mrc.ivcc.mdss.mo.Specie value)
  {
    if(value == null)
    {
      setValue(SPECIE, "");
    }
    else
    {
      setValue(SPECIE, value.getId());
    }
  }
  
  public java.util.Date getTestDate()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(TESTDATE));
  }
  
  public void validateTestDate()
  {
    this.validateAttribute(TESTDATE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getTestDateMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(TESTDATE);
  }
  
  public void setTestDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(TESTDATE, "");
    }
    else
    {
      setValue(TESTDATE, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.MolecularAssayResult getWKDR()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.MolecularAssayResult.get(getValue(WKDR));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateWKDR()
  {
    this.validateAttribute(WKDR);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getWKDRMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(WKDR);
  }
  
  public void setWKDR(csu.mrc.ivcc.mdss.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(WKDR, "");
    }
    else
    {
      setValue(WKDR, value.getId());
    }
  }
  
  public csu.mrc.ivcc.mdss.mo.InsecticideMethodology getWKDRMethod()
  {
    try
    {
      return csu.mrc.ivcc.mdss.mo.InsecticideMethodology.get(getValue(WKDRMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateWKDRMethod()
  {
    this.validateAttribute(WKDRMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getWKDRMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(csu.mrc.ivcc.mdss.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(WKDRMETHOD);
  }
  
  public void setWKDRMethod(csu.mrc.ivcc.mdss.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(WKDRMETHOD, "");
    }
    else
    {
      setValue(WKDRMETHOD, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MosquitoView get(String id)
  {
    return (MosquitoView) com.terraframe.mojo.business.View.get(id);
  }
  
  public static csu.mrc.ivcc.mdss.entomology.MosquitoView[] saveAll(csu.mrc.ivcc.mdss.entomology.MosquitoView[] array)
  {
    return null;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: Mosquito       Assay View";
    }
    else
    {
      return super.toString();
    }
  }
}
