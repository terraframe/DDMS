package dss.vector.solutions.entomology;

/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to MosquitoView.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class MosquitoViewBase extends com.terraframe.mojo.business.View implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.entomology.MosquitoView";
  public static java.lang.String AACETATE = "aAcetate";
  public static java.lang.String ACHES = "acHES";
  public static java.lang.String ACHESMETHOD = "acHESMethod";
  public static java.lang.String ACHEV = "acHEV";
  public static java.lang.String ACHEVMETHOD = "acHEVMethod";
  public static java.lang.String ACHEW = "acHEW";
  public static java.lang.String ACHEWMETHOD = "acHEWMethod";
  public static java.lang.String BACETATE = "bAcetate";
  public static java.lang.String COLLECTION = "collection";
  public static java.lang.String EKDR = "eKDR";
  public static java.lang.String EKDRMETHOD = "eKDRMethod";
  public static java.lang.String GABAG = "gABAG";
  public static java.lang.String GABAGMETHOD = "gABAGMethod";
  public static java.lang.String GABAS = "gABAS";
  public static java.lang.String GABASMETHOD = "gABASMethod";
  public static java.lang.String GSTCDNB = "gSTCDNB";
  public static java.lang.String GSTDCNB = "gSTDCNB";
  public static java.lang.String GENERATION = "generation";
  public static java.lang.String HEME = "heme";
  public static java.lang.String IACHE = "iAcHE";
  public static java.lang.String IACHEMETHOD = "iAcHEMethod";
  public static java.lang.String ID = "id";
  public static java.lang.String IDENTIFICATIONMETHOD = "identificationMethod";
  public static java.lang.String ISOFEMALE = "isofemale";
  public static java.lang.String MOSQUITOID = "mosquitoId";
  public static java.lang.String P450 = "p450";
  public static java.lang.String PFALCIPARUM = "pFalciparum";
  public static java.lang.String PFALCIPARUMMETHOD = "pFalciparumMethod";
  public static java.lang.String PMALARIAE = "pMalariae";
  public static java.lang.String PMALARIAEMETHOD = "pMalariaeMethod";
  public static java.lang.String PNPA = "pNPA";
  public static java.lang.String POVALE = "pOvale";
  public static java.lang.String POVALEMETHOD = "pOvaleMethod";
  public static java.lang.String PVIVAX = "pVivax";
  public static java.lang.String PVIVAXMETHOD = "pVivaxMethod";
  public static java.lang.String SAMPLEID = "sampleId";
  public static java.lang.String SEX = "sex";
  public static java.lang.String SPECIE = "specie";
  public static java.lang.String TESTDATE = "testDate";
  public static java.lang.String WKDR = "wKDR";
  public static java.lang.String WKDRMETHOD = "wKDRMethod";
  private static final long serialVersionUID = 1239670243905L;
  
  public MosquitoViewBase()
  {
    super();
  }
  
  public Boolean getAAcetate()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(AACETATE));
  }
  
  public void validateAAcetate()
  {
    this.validateAttribute(AACETATE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAAcetateMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(AACETATE);
  }
  
  public void setAAcetate(Boolean value)
  {
    if(value == null)
    {
      setValue(AACETATE, "");
    }
    else
    {
      setValue(AACETATE, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.mo.MolecularAssayResult getAcHES()
  {
    try
    {
      return dss.vector.solutions.mo.MolecularAssayResult.get(getValue(ACHES));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHES()
  {
    this.validateAttribute(ACHES);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHESMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHES);
  }
  
  public void setAcHES(dss.vector.solutions.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(ACHES, "");
    }
    else
    {
      setValue(ACHES, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.InsecticideMethodology getAcHESMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InsecticideMethodology.get(getValue(ACHESMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHESMethod()
  {
    this.validateAttribute(ACHESMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHESMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHESMETHOD);
  }
  
  public void setAcHESMethod(dss.vector.solutions.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(ACHESMETHOD, "");
    }
    else
    {
      setValue(ACHESMETHOD, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.MolecularAssayResult getAcHEV()
  {
    try
    {
      return dss.vector.solutions.mo.MolecularAssayResult.get(getValue(ACHEV));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHEV()
  {
    this.validateAttribute(ACHEV);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHEVMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHEV);
  }
  
  public void setAcHEV(dss.vector.solutions.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(ACHEV, "");
    }
    else
    {
      setValue(ACHEV, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.InsecticideMethodology getAcHEVMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InsecticideMethodology.get(getValue(ACHEVMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHEVMethod()
  {
    this.validateAttribute(ACHEVMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHEVMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHEVMETHOD);
  }
  
  public void setAcHEVMethod(dss.vector.solutions.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(ACHEVMETHOD, "");
    }
    else
    {
      setValue(ACHEVMETHOD, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.MolecularAssayResult getAcHEW()
  {
    try
    {
      return dss.vector.solutions.mo.MolecularAssayResult.get(getValue(ACHEW));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHEW()
  {
    this.validateAttribute(ACHEW);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHEWMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHEW);
  }
  
  public void setAcHEW(dss.vector.solutions.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(ACHEW, "");
    }
    else
    {
      setValue(ACHEW, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.InsecticideMethodology getAcHEWMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InsecticideMethodology.get(getValue(ACHEWMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateAcHEWMethod()
  {
    this.validateAttribute(ACHEWMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getAcHEWMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ACHEWMETHOD);
  }
  
  public void setAcHEWMethod(dss.vector.solutions.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(ACHEWMETHOD, "");
    }
    else
    {
      setValue(ACHEWMETHOD, value.getId());
    }
  }
  
  public Boolean getBAcetate()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(BACETATE));
  }
  
  public void validateBAcetate()
  {
    this.validateAttribute(BACETATE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getBAcetateMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(BACETATE);
  }
  
  public void setBAcetate(Boolean value)
  {
    if(value == null)
    {
      setValue(BACETATE, "");
    }
    else
    {
      setValue(BACETATE, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.entomology.AbstractMosquitoCollection getCollection()
  {
    try
    {
      return dss.vector.solutions.entomology.AbstractMosquitoCollection.get(getValue(COLLECTION));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateCollection()
  {
    this.validateAttribute(COLLECTION);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getCollectionMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(COLLECTION);
  }
  
  public void setCollection(dss.vector.solutions.entomology.AbstractMosquitoCollection value)
  {
    if(value == null)
    {
      setValue(COLLECTION, "");
    }
    else
    {
      setValue(COLLECTION, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.MolecularAssayResult getEKDR()
  {
    try
    {
      return dss.vector.solutions.mo.MolecularAssayResult.get(getValue(EKDR));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateEKDR()
  {
    this.validateAttribute(EKDR);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getEKDRMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(EKDR);
  }
  
  public void setEKDR(dss.vector.solutions.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(EKDR, "");
    }
    else
    {
      setValue(EKDR, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.InsecticideMethodology getEKDRMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InsecticideMethodology.get(getValue(EKDRMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateEKDRMethod()
  {
    this.validateAttribute(EKDRMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getEKDRMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(EKDRMETHOD);
  }
  
  public void setEKDRMethod(dss.vector.solutions.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(EKDRMETHOD, "");
    }
    else
    {
      setValue(EKDRMETHOD, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.MolecularAssayResult getGABAG()
  {
    try
    {
      return dss.vector.solutions.mo.MolecularAssayResult.get(getValue(GABAG));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateGABAG()
  {
    this.validateAttribute(GABAG);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGABAGMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GABAG);
  }
  
  public void setGABAG(dss.vector.solutions.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(GABAG, "");
    }
    else
    {
      setValue(GABAG, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.InsecticideMethodology getGABAGMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InsecticideMethodology.get(getValue(GABAGMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateGABAGMethod()
  {
    this.validateAttribute(GABAGMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGABAGMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GABAGMETHOD);
  }
  
  public void setGABAGMethod(dss.vector.solutions.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(GABAGMETHOD, "");
    }
    else
    {
      setValue(GABAGMETHOD, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.MolecularAssayResult getGABAS()
  {
    try
    {
      return dss.vector.solutions.mo.MolecularAssayResult.get(getValue(GABAS));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateGABAS()
  {
    this.validateAttribute(GABAS);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGABASMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GABAS);
  }
  
  public void setGABAS(dss.vector.solutions.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(GABAS, "");
    }
    else
    {
      setValue(GABAS, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.InsecticideMethodology getGABASMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InsecticideMethodology.get(getValue(GABASMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateGABASMethod()
  {
    this.validateAttribute(GABASMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGABASMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GABASMETHOD);
  }
  
  public void setGABASMethod(dss.vector.solutions.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(GABASMETHOD, "");
    }
    else
    {
      setValue(GABASMETHOD, value.getId());
    }
  }
  
  public Boolean getGSTCDNB()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(GSTCDNB));
  }
  
  public void validateGSTCDNB()
  {
    this.validateAttribute(GSTCDNB);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGSTCDNBMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GSTCDNB);
  }
  
  public void setGSTCDNB(Boolean value)
  {
    if(value == null)
    {
      setValue(GSTCDNB, "");
    }
    else
    {
      setValue(GSTCDNB, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getGSTDCNB()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(GSTDCNB));
  }
  
  public void validateGSTDCNB()
  {
    this.validateAttribute(GSTDCNB);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGSTDCNBMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GSTDCNB);
  }
  
  public void setGSTDCNB(Boolean value)
  {
    if(value == null)
    {
      setValue(GSTDCNB, "");
    }
    else
    {
      setValue(GSTDCNB, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.mo.Generation getGeneration()
  {
    try
    {
      return dss.vector.solutions.mo.Generation.get(getValue(GENERATION));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateGeneration()
  {
    this.validateAttribute(GENERATION);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getGenerationMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(GENERATION);
  }
  
  public void setGeneration(dss.vector.solutions.mo.Generation value)
  {
    if(value == null)
    {
      setValue(GENERATION, "");
    }
    else
    {
      setValue(GENERATION, value.getId());
    }
  }
  
  public Boolean getHeme()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(HEME));
  }
  
  public void validateHeme()
  {
    this.validateAttribute(HEME);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getHemeMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(HEME);
  }
  
  public void setHeme(Boolean value)
  {
    if(value == null)
    {
      setValue(HEME, "");
    }
    else
    {
      setValue(HEME, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.mo.MolecularAssayResult getIAcHE()
  {
    try
    {
      return dss.vector.solutions.mo.MolecularAssayResult.get(getValue(IACHE));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateIAcHE()
  {
    this.validateAttribute(IACHE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIAcHEMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(IACHE);
  }
  
  public void setIAcHE(dss.vector.solutions.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(IACHE, "");
    }
    else
    {
      setValue(IACHE, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.InsecticideMethodology getIAcHEMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InsecticideMethodology.get(getValue(IACHEMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateIAcHEMethod()
  {
    this.validateAttribute(IACHEMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIAcHEMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(IACHEMETHOD);
  }
  
  public void setIAcHEMethod(dss.vector.solutions.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(IACHEMETHOD, "");
    }
    else
    {
      setValue(IACHEMETHOD, value.getId());
    }
  }
  
  public String getId()
  {
    return getValue(ID);
  }
  
  public void validateId()
  {
    this.validateAttribute(ID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ID);
  }
  
  public dss.vector.solutions.mo.IdentificationMethod getIdentificationMethod()
  {
    try
    {
      return dss.vector.solutions.mo.IdentificationMethod.get(getValue(IDENTIFICATIONMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateIdentificationMethod()
  {
    this.validateAttribute(IDENTIFICATIONMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIdentificationMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(IDENTIFICATIONMETHOD);
  }
  
  public void setIdentificationMethod(dss.vector.solutions.mo.IdentificationMethod value)
  {
    if(value == null)
    {
      setValue(IDENTIFICATIONMETHOD, "");
    }
    else
    {
      setValue(IDENTIFICATIONMETHOD, value.getId());
    }
  }
  
  public Boolean getIsofemale()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(ISOFEMALE));
  }
  
  public void validateIsofemale()
  {
    this.validateAttribute(ISOFEMALE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getIsofemaleMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(ISOFEMALE);
  }
  
  public void setIsofemale(Boolean value)
  {
    if(value == null)
    {
      setValue(ISOFEMALE, "");
    }
    else
    {
      setValue(ISOFEMALE, java.lang.Boolean.toString(value));
    }
  }
  
  public String getMosquitoId()
  {
    return getValue(MOSQUITOID);
  }
  
  public void validateMosquitoId()
  {
    this.validateAttribute(MOSQUITOID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMosquitoIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(MOSQUITOID);
  }
  
  public void setMosquitoId(String value)
  {
    if(value == null)
    {
      setValue(MOSQUITOID, "");
    }
    else
    {
      setValue(MOSQUITOID, value);
    }
  }
  
  public Boolean getP450()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(P450));
  }
  
  public void validateP450()
  {
    this.validateAttribute(P450);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getP450Md()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(P450);
  }
  
  public void setP450(Boolean value)
  {
    if(value == null)
    {
      setValue(P450, "");
    }
    else
    {
      setValue(P450, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getPFalciparum()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PFALCIPARUM));
  }
  
  public void validatePFalciparum()
  {
    this.validateAttribute(PFALCIPARUM);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPFalciparumMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PFALCIPARUM);
  }
  
  public void setPFalciparum(Boolean value)
  {
    if(value == null)
    {
      setValue(PFALCIPARUM, "");
    }
    else
    {
      setValue(PFALCIPARUM, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.mo.InfectivityMethodology getPFalciparumMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InfectivityMethodology.get(getValue(PFALCIPARUMMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validatePFalciparumMethod()
  {
    this.validateAttribute(PFALCIPARUMMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPFalciparumMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PFALCIPARUMMETHOD);
  }
  
  public void setPFalciparumMethod(dss.vector.solutions.mo.InfectivityMethodology value)
  {
    if(value == null)
    {
      setValue(PFALCIPARUMMETHOD, "");
    }
    else
    {
      setValue(PFALCIPARUMMETHOD, value.getId());
    }
  }
  
  public Boolean getPMalariae()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PMALARIAE));
  }
  
  public void validatePMalariae()
  {
    this.validateAttribute(PMALARIAE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPMalariaeMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PMALARIAE);
  }
  
  public void setPMalariae(Boolean value)
  {
    if(value == null)
    {
      setValue(PMALARIAE, "");
    }
    else
    {
      setValue(PMALARIAE, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.mo.InfectivityMethodology getPMalariaeMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InfectivityMethodology.get(getValue(PMALARIAEMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validatePMalariaeMethod()
  {
    this.validateAttribute(PMALARIAEMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPMalariaeMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PMALARIAEMETHOD);
  }
  
  public void setPMalariaeMethod(dss.vector.solutions.mo.InfectivityMethodology value)
  {
    if(value == null)
    {
      setValue(PMALARIAEMETHOD, "");
    }
    else
    {
      setValue(PMALARIAEMETHOD, value.getId());
    }
  }
  
  public Boolean getPNPA()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PNPA));
  }
  
  public void validatePNPA()
  {
    this.validateAttribute(PNPA);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPNPAMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PNPA);
  }
  
  public void setPNPA(Boolean value)
  {
    if(value == null)
    {
      setValue(PNPA, "");
    }
    else
    {
      setValue(PNPA, java.lang.Boolean.toString(value));
    }
  }
  
  public Boolean getPOvale()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(POVALE));
  }
  
  public void validatePOvale()
  {
    this.validateAttribute(POVALE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPOvaleMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(POVALE);
  }
  
  public void setPOvale(Boolean value)
  {
    if(value == null)
    {
      setValue(POVALE, "");
    }
    else
    {
      setValue(POVALE, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.mo.InfectivityMethodology getPOvaleMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InfectivityMethodology.get(getValue(POVALEMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validatePOvaleMethod()
  {
    this.validateAttribute(POVALEMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPOvaleMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(POVALEMETHOD);
  }
  
  public void setPOvaleMethod(dss.vector.solutions.mo.InfectivityMethodology value)
  {
    if(value == null)
    {
      setValue(POVALEMETHOD, "");
    }
    else
    {
      setValue(POVALEMETHOD, value.getId());
    }
  }
  
  public Boolean getPVivax()
  {
    return com.terraframe.mojo.constants.MdAttributeBooleanUtil.getTypeSafeValue(getValue(PVIVAX));
  }
  
  public void validatePVivax()
  {
    this.validateAttribute(PVIVAX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPVivaxMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PVIVAX);
  }
  
  public void setPVivax(Boolean value)
  {
    if(value == null)
    {
      setValue(PVIVAX, "");
    }
    else
    {
      setValue(PVIVAX, java.lang.Boolean.toString(value));
    }
  }
  
  public dss.vector.solutions.mo.InfectivityMethodology getPVivaxMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InfectivityMethodology.get(getValue(PVIVAXMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validatePVivaxMethod()
  {
    this.validateAttribute(PVIVAXMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getPVivaxMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(PVIVAXMETHOD);
  }
  
  public void setPVivaxMethod(dss.vector.solutions.mo.InfectivityMethodology value)
  {
    if(value == null)
    {
      setValue(PVIVAXMETHOD, "");
    }
    else
    {
      setValue(PVIVAXMETHOD, value.getId());
    }
  }
  
  public String getSampleId()
  {
    return getValue(SAMPLEID);
  }
  
  public void validateSampleId()
  {
    this.validateAttribute(SAMPLEID);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSampleIdMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(SAMPLEID);
  }
  
  public void setSampleId(String value)
  {
    if(value == null)
    {
      setValue(SAMPLEID, "");
    }
    else
    {
      setValue(SAMPLEID, value);
    }
  }
  
  @SuppressWarnings("unchecked")
  public java.util.List<dss.vector.solutions.entomology.Sex> getSex()
  {
    return (java.util.List<dss.vector.solutions.entomology.Sex>) getEnumValues(SEX);
  }
  
  public void addSex(dss.vector.solutions.entomology.Sex value)
  {
    addEnumItem(SEX, value.getId());
  }
  
  public void removeSex(dss.vector.solutions.entomology.Sex value)
  {
    removeEnumItem(SEX, value.getId());
  }
  
  public void clearSex()
  {
    clearEnum(SEX);
  }
  
  public void validateSex()
  {
    this.validateAttribute(SEX);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSexMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(SEX);
  }
  
  public dss.vector.solutions.mo.Specie getSpecie()
  {
    try
    {
      return dss.vector.solutions.mo.Specie.get(getValue(SPECIE));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateSpecie()
  {
    this.validateAttribute(SPECIE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getSpecieMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(SPECIE);
  }
  
  public void setSpecie(dss.vector.solutions.mo.Specie value)
  {
    if(value == null)
    {
      setValue(SPECIE, "");
    }
    else
    {
      setValue(SPECIE, value.getId());
    }
  }
  
  public java.util.Date getTestDate()
  {
    return com.terraframe.mojo.constants.MdAttributeDateUtil.getTypeSafeValue(getValue(TESTDATE));
  }
  
  public void validateTestDate()
  {
    this.validateAttribute(TESTDATE);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getTestDateMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(TESTDATE);
  }
  
  public void setTestDate(java.util.Date value)
  {
    if(value == null)
    {
      setValue(TESTDATE, "");
    }
    else
    {
      setValue(TESTDATE, new java.text.SimpleDateFormat(com.terraframe.mojo.constants.Constants.DATE_FORMAT).format(value));
    }
  }
  
  public dss.vector.solutions.mo.MolecularAssayResult getWKDR()
  {
    try
    {
      return dss.vector.solutions.mo.MolecularAssayResult.get(getValue(WKDR));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateWKDR()
  {
    this.validateAttribute(WKDR);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getWKDRMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(WKDR);
  }
  
  public void setWKDR(dss.vector.solutions.mo.MolecularAssayResult value)
  {
    if(value == null)
    {
      setValue(WKDR, "");
    }
    else
    {
      setValue(WKDR, value.getId());
    }
  }
  
  public dss.vector.solutions.mo.InsecticideMethodology getWKDRMethod()
  {
    try
    {
      return dss.vector.solutions.mo.InsecticideMethodology.get(getValue(WKDRMETHOD));
    }
    catch (com.terraframe.mojo.dataaccess.cache.DataNotFoundException e)
    {
      return null;
    }
  }
  
  public void validateWKDRMethod()
  {
    this.validateAttribute(WKDRMETHOD);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getWKDRMethodMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.entomology.MosquitoView.CLASS);
    return mdClassIF.definesAttribute(WKDRMETHOD);
  }
  
  public void setWKDRMethod(dss.vector.solutions.mo.InsecticideMethodology value)
  {
    if(value == null)
    {
      setValue(WKDRMETHOD, "");
    }
    else
    {
      setValue(WKDRMETHOD, value.getId());
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static MosquitoView get(String id)
  {
    return (MosquitoView) com.terraframe.mojo.business.View.get(id);
  }
  
  public static dss.vector.solutions.entomology.MosquitoView[] saveAll(dss.vector.solutions.entomology.MosquitoView[] array)
  {
    String msg = "This method should never be invoked.  It should be overwritten in dss.vector.solutions.entomology.MosquitoView.java";
    throw new com.terraframe.mojo.dataaccess.metadata.ForbiddenMethodException(msg);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
