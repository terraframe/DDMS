package dss.vector.solutions.geo.generated;

/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to AbstractSite.java
 *
 * @author Autogenerated by TerraFrame
 */
public abstract class AbstractSiteBase extends dss.vector.solutions.geo.generated.GeoEntity implements com.terraframe.mojo.generation.loader.Reloadable
{
  public final static String CLASS = "dss.vector.solutions.geo.generated.AbstractSite";
  public static java.lang.String MULTIPOINT = "multiPoint";
  private static final long serialVersionUID = 1239075005040L;
  
  public AbstractSiteBase()
  {
    super();
  }
  
  public com.vividsolutions.jts.geom.MultiPoint getMultiPoint()
  {
    return (com.vividsolutions.jts.geom.MultiPoint)getObjectValue(MULTIPOINT);
  }
  
  public void validateMultiPoint()
  {
    this.validateAttribute(MULTIPOINT);
  }
  
  public static com.terraframe.mojo.dataaccess.MdAttributeDAOIF getMultiPointMd()
  {
    com.terraframe.mojo.dataaccess.MdClassDAOIF mdClassIF = com.terraframe.mojo.dataaccess.metadata.MdClassDAO.getMdClassDAO(dss.vector.solutions.geo.generated.AbstractSite.CLASS);
    return mdClassIF.definesAttribute(MULTIPOINT);
  }
  
  public void setMultiPoint(com.vividsolutions.jts.geom.MultiPoint value)
  {
    if(value == null)
    {
      setValue(MULTIPOINT, "");
    }
    else
    {
      setValue(MULTIPOINT, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static AbstractSiteQuery getAllInstances(String sortAttribute, Boolean ascending, Integer pageSize, Integer pageNumber)
  {
    AbstractSiteQuery query = new AbstractSiteQuery(new com.terraframe.mojo.query.QueryFactory());
    com.terraframe.mojo.business.Entity.getAllInstances(query, sortAttribute, ascending, pageSize, pageNumber);
    return query;
  }
  
  public static AbstractSite get(String id)
  {
    return (AbstractSite) com.terraframe.mojo.business.Business.get(id);
  }
  
  public static AbstractSite lock(java.lang.String id)
  {
    AbstractSite _instance = AbstractSite.get(id);
    _instance.lock();
    
    return _instance;
  }
  
  public static AbstractSite unlock(java.lang.String id)
  {
    AbstractSite _instance = AbstractSite.get(id);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
